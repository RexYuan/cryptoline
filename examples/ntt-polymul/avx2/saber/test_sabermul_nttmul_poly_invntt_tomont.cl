proc main (
bit x,
sint16 c00, sint16 c01, sint16 c02, sint16 c03, sint16 c04, sint16 c05,
sint16 c06, sint16 c07, sint16 c08, sint16 c09, sint16 c0a, sint16 c0b,
sint16 c0c, sint16 c0d, sint16 c0e, sint16 c0f, sint16 c10, sint16 c11,
sint16 c12, sint16 c13, sint16 c14, sint16 c15, sint16 c16, sint16 c17,
sint16 c18, sint16 c19, sint16 c1a, sint16 c1b, sint16 c1c, sint16 c1d,
sint16 c1e, sint16 c1f, sint16 c20, sint16 c21, sint16 c22, sint16 c23,
sint16 c24, sint16 c25, sint16 c26, sint16 c27, sint16 c28, sint16 c29,
sint16 c2a, sint16 c2b, sint16 c2c, sint16 c2d, sint16 c2e, sint16 c2f,
sint16 c30, sint16 c31, sint16 c32, sint16 c33, sint16 c34, sint16 c35,
sint16 c36, sint16 c37, sint16 c38, sint16 c39, sint16 c3a, sint16 c3b,
sint16 c3c, sint16 c3d, sint16 c3e, sint16 c3f, sint16 c40, sint16 c41,
sint16 c42, sint16 c43, sint16 c44, sint16 c45, sint16 c46, sint16 c47,
sint16 c48, sint16 c49, sint16 c4a, sint16 c4b, sint16 c4c, sint16 c4d,
sint16 c4e, sint16 c4f, sint16 c50, sint16 c51, sint16 c52, sint16 c53,
sint16 c54, sint16 c55, sint16 c56, sint16 c57, sint16 c58, sint16 c59,
sint16 c5a, sint16 c5b, sint16 c5c, sint16 c5d, sint16 c5e, sint16 c5f,
sint16 c60, sint16 c61, sint16 c62, sint16 c63, sint16 c64, sint16 c65,
sint16 c66, sint16 c67, sint16 c68, sint16 c69, sint16 c6a, sint16 c6b,
sint16 c6c, sint16 c6d, sint16 c6e, sint16 c6f, sint16 c70, sint16 c71,
sint16 c72, sint16 c73, sint16 c74, sint16 c75, sint16 c76, sint16 c77,
sint16 c78, sint16 c79, sint16 c7a, sint16 c7b, sint16 c7c, sint16 c7d,
sint16 c7e, sint16 c7f, sint16 c80, sint16 c81, sint16 c82, sint16 c83,
sint16 c84, sint16 c85, sint16 c86, sint16 c87, sint16 c88, sint16 c89,
sint16 c8a, sint16 c8b, sint16 c8c, sint16 c8d, sint16 c8e, sint16 c8f,
sint16 c90, sint16 c91, sint16 c92, sint16 c93, sint16 c94, sint16 c95,
sint16 c96, sint16 c97, sint16 c98, sint16 c99, sint16 c9a, sint16 c9b,
sint16 c9c, sint16 c9d, sint16 c9e, sint16 c9f, sint16 ca0, sint16 ca1,
sint16 ca2, sint16 ca3, sint16 ca4, sint16 ca5, sint16 ca6, sint16 ca7,
sint16 ca8, sint16 ca9, sint16 caa, sint16 cab, sint16 cac, sint16 cad,
sint16 cae, sint16 caf, sint16 cb0, sint16 cb1, sint16 cb2, sint16 cb3,
sint16 cb4, sint16 cb5, sint16 cb6, sint16 cb7, sint16 cb8, sint16 cb9,
sint16 cba, sint16 cbb, sint16 cbc, sint16 cbd, sint16 cbe, sint16 cbf,
sint16 cc0, sint16 cc1, sint16 cc2, sint16 cc3, sint16 cc4, sint16 cc5,
sint16 cc6, sint16 cc7, sint16 cc8, sint16 cc9, sint16 cca, sint16 ccb,
sint16 ccc, sint16 ccd, sint16 cce, sint16 ccf, sint16 cd0, sint16 cd1,
sint16 cd2, sint16 cd3, sint16 cd4, sint16 cd5, sint16 cd6, sint16 cd7,
sint16 cd8, sint16 cd9, sint16 cda, sint16 cdb, sint16 cdc, sint16 cdd,
sint16 cde, sint16 cdf, sint16 ce0, sint16 ce1, sint16 ce2, sint16 ce3,
sint16 ce4, sint16 ce5, sint16 ce6, sint16 ce7, sint16 ce8, sint16 ce9,
sint16 cea, sint16 ceb, sint16 cec, sint16 ced, sint16 cee, sint16 cef,
sint16 cf0, sint16 cf1, sint16 cf2, sint16 cf3, sint16 cf4, sint16 cf5,
sint16 cf6, sint16 cf7, sint16 cf8, sint16 cf9, sint16 cfa, sint16 cfb,
sint16 cfc, sint16 cfd, sint16 cfe, sint16 cff
) =
{
true && and [
(-7681)@16 <s c00, c00 <s (7681)@16, (-7681)@16 <s c01, c01 <s (7681)@16,
(-7681)@16 <s c02, c02 <s (7681)@16, (-7681)@16 <s c03, c03 <s (7681)@16,
(-7681)@16 <s c04, c04 <s (7681)@16, (-7681)@16 <s c05, c05 <s (7681)@16,
(-7681)@16 <s c06, c06 <s (7681)@16, (-7681)@16 <s c07, c07 <s (7681)@16,
(-7681)@16 <s c08, c08 <s (7681)@16, (-7681)@16 <s c09, c09 <s (7681)@16,
(-7681)@16 <s c0a, c0a <s (7681)@16, (-7681)@16 <s c0b, c0b <s (7681)@16,
(-7681)@16 <s c0c, c0c <s (7681)@16, (-7681)@16 <s c0d, c0d <s (7681)@16,
(-7681)@16 <s c0e, c0e <s (7681)@16, (-7681)@16 <s c0f, c0f <s (7681)@16,
(-7681)@16 <s c10, c10 <s (7681)@16, (-7681)@16 <s c11, c11 <s (7681)@16,
(-7681)@16 <s c12, c12 <s (7681)@16, (-7681)@16 <s c13, c13 <s (7681)@16,
(-7681)@16 <s c14, c14 <s (7681)@16, (-7681)@16 <s c15, c15 <s (7681)@16,
(-7681)@16 <s c16, c16 <s (7681)@16, (-7681)@16 <s c17, c17 <s (7681)@16,
(-7681)@16 <s c18, c18 <s (7681)@16, (-7681)@16 <s c19, c19 <s (7681)@16,
(-7681)@16 <s c1a, c1a <s (7681)@16, (-7681)@16 <s c1b, c1b <s (7681)@16,
(-7681)@16 <s c1c, c1c <s (7681)@16, (-7681)@16 <s c1d, c1d <s (7681)@16,
(-7681)@16 <s c1e, c1e <s (7681)@16, (-7681)@16 <s c1f, c1f <s (7681)@16,
(-7681)@16 <s c20, c20 <s (7681)@16, (-7681)@16 <s c21, c21 <s (7681)@16,
(-7681)@16 <s c22, c22 <s (7681)@16, (-7681)@16 <s c23, c23 <s (7681)@16,
(-7681)@16 <s c24, c24 <s (7681)@16, (-7681)@16 <s c25, c25 <s (7681)@16,
(-7681)@16 <s c26, c26 <s (7681)@16, (-7681)@16 <s c27, c27 <s (7681)@16,
(-7681)@16 <s c28, c28 <s (7681)@16, (-7681)@16 <s c29, c29 <s (7681)@16,
(-7681)@16 <s c2a, c2a <s (7681)@16, (-7681)@16 <s c2b, c2b <s (7681)@16,
(-7681)@16 <s c2c, c2c <s (7681)@16, (-7681)@16 <s c2d, c2d <s (7681)@16,
(-7681)@16 <s c2e, c2e <s (7681)@16, (-7681)@16 <s c2f, c2f <s (7681)@16,
(-7681)@16 <s c30, c30 <s (7681)@16, (-7681)@16 <s c31, c31 <s (7681)@16,
(-7681)@16 <s c32, c32 <s (7681)@16, (-7681)@16 <s c33, c33 <s (7681)@16,
(-7681)@16 <s c34, c34 <s (7681)@16, (-7681)@16 <s c35, c35 <s (7681)@16,
(-7681)@16 <s c36, c36 <s (7681)@16, (-7681)@16 <s c37, c37 <s (7681)@16,
(-7681)@16 <s c38, c38 <s (7681)@16, (-7681)@16 <s c39, c39 <s (7681)@16,
(-7681)@16 <s c3a, c3a <s (7681)@16, (-7681)@16 <s c3b, c3b <s (7681)@16,
(-7681)@16 <s c3c, c3c <s (7681)@16, (-7681)@16 <s c3d, c3d <s (7681)@16,
(-7681)@16 <s c3e, c3e <s (7681)@16, (-7681)@16 <s c3f, c3f <s (7681)@16,
(-7681)@16 <s c40, c40 <s (7681)@16, (-7681)@16 <s c41, c41 <s (7681)@16,
(-7681)@16 <s c42, c42 <s (7681)@16, (-7681)@16 <s c43, c43 <s (7681)@16,
(-7681)@16 <s c44, c44 <s (7681)@16, (-7681)@16 <s c45, c45 <s (7681)@16,
(-7681)@16 <s c46, c46 <s (7681)@16, (-7681)@16 <s c47, c47 <s (7681)@16,
(-7681)@16 <s c48, c48 <s (7681)@16, (-7681)@16 <s c49, c49 <s (7681)@16,
(-7681)@16 <s c4a, c4a <s (7681)@16, (-7681)@16 <s c4b, c4b <s (7681)@16,
(-7681)@16 <s c4c, c4c <s (7681)@16, (-7681)@16 <s c4d, c4d <s (7681)@16,
(-7681)@16 <s c4e, c4e <s (7681)@16, (-7681)@16 <s c4f, c4f <s (7681)@16,
(-7681)@16 <s c50, c50 <s (7681)@16, (-7681)@16 <s c51, c51 <s (7681)@16,
(-7681)@16 <s c52, c52 <s (7681)@16, (-7681)@16 <s c53, c53 <s (7681)@16,
(-7681)@16 <s c54, c54 <s (7681)@16, (-7681)@16 <s c55, c55 <s (7681)@16,
(-7681)@16 <s c56, c56 <s (7681)@16, (-7681)@16 <s c57, c57 <s (7681)@16,
(-7681)@16 <s c58, c58 <s (7681)@16, (-7681)@16 <s c59, c59 <s (7681)@16,
(-7681)@16 <s c5a, c5a <s (7681)@16, (-7681)@16 <s c5b, c5b <s (7681)@16,
(-7681)@16 <s c5c, c5c <s (7681)@16, (-7681)@16 <s c5d, c5d <s (7681)@16,
(-7681)@16 <s c5e, c5e <s (7681)@16, (-7681)@16 <s c5f, c5f <s (7681)@16,
(-7681)@16 <s c60, c60 <s (7681)@16, (-7681)@16 <s c61, c61 <s (7681)@16,
(-7681)@16 <s c62, c62 <s (7681)@16, (-7681)@16 <s c63, c63 <s (7681)@16,
(-7681)@16 <s c64, c64 <s (7681)@16, (-7681)@16 <s c65, c65 <s (7681)@16,
(-7681)@16 <s c66, c66 <s (7681)@16, (-7681)@16 <s c67, c67 <s (7681)@16,
(-7681)@16 <s c68, c68 <s (7681)@16, (-7681)@16 <s c69, c69 <s (7681)@16,
(-7681)@16 <s c6a, c6a <s (7681)@16, (-7681)@16 <s c6b, c6b <s (7681)@16,
(-7681)@16 <s c6c, c6c <s (7681)@16, (-7681)@16 <s c6d, c6d <s (7681)@16,
(-7681)@16 <s c6e, c6e <s (7681)@16, (-7681)@16 <s c6f, c6f <s (7681)@16,
(-7681)@16 <s c70, c70 <s (7681)@16, (-7681)@16 <s c71, c71 <s (7681)@16,
(-7681)@16 <s c72, c72 <s (7681)@16, (-7681)@16 <s c73, c73 <s (7681)@16,
(-7681)@16 <s c74, c74 <s (7681)@16, (-7681)@16 <s c75, c75 <s (7681)@16,
(-7681)@16 <s c76, c76 <s (7681)@16, (-7681)@16 <s c77, c77 <s (7681)@16,
(-7681)@16 <s c78, c78 <s (7681)@16, (-7681)@16 <s c79, c79 <s (7681)@16,
(-7681)@16 <s c7a, c7a <s (7681)@16, (-7681)@16 <s c7b, c7b <s (7681)@16,
(-7681)@16 <s c7c, c7c <s (7681)@16, (-7681)@16 <s c7d, c7d <s (7681)@16,
(-7681)@16 <s c7e, c7e <s (7681)@16, (-7681)@16 <s c7f, c7f <s (7681)@16,
(-7681)@16 <s c80, c80 <s (7681)@16, (-7681)@16 <s c81, c81 <s (7681)@16,
(-7681)@16 <s c82, c82 <s (7681)@16, (-7681)@16 <s c83, c83 <s (7681)@16,
(-7681)@16 <s c84, c84 <s (7681)@16, (-7681)@16 <s c85, c85 <s (7681)@16,
(-7681)@16 <s c86, c86 <s (7681)@16, (-7681)@16 <s c87, c87 <s (7681)@16,
(-7681)@16 <s c88, c88 <s (7681)@16, (-7681)@16 <s c89, c89 <s (7681)@16,
(-7681)@16 <s c8a, c8a <s (7681)@16, (-7681)@16 <s c8b, c8b <s (7681)@16,
(-7681)@16 <s c8c, c8c <s (7681)@16, (-7681)@16 <s c8d, c8d <s (7681)@16,
(-7681)@16 <s c8e, c8e <s (7681)@16, (-7681)@16 <s c8f, c8f <s (7681)@16,
(-7681)@16 <s c90, c90 <s (7681)@16, (-7681)@16 <s c91, c91 <s (7681)@16,
(-7681)@16 <s c92, c92 <s (7681)@16, (-7681)@16 <s c93, c93 <s (7681)@16,
(-7681)@16 <s c94, c94 <s (7681)@16, (-7681)@16 <s c95, c95 <s (7681)@16,
(-7681)@16 <s c96, c96 <s (7681)@16, (-7681)@16 <s c97, c97 <s (7681)@16,
(-7681)@16 <s c98, c98 <s (7681)@16, (-7681)@16 <s c99, c99 <s (7681)@16,
(-7681)@16 <s c9a, c9a <s (7681)@16, (-7681)@16 <s c9b, c9b <s (7681)@16,
(-7681)@16 <s c9c, c9c <s (7681)@16, (-7681)@16 <s c9d, c9d <s (7681)@16,
(-7681)@16 <s c9e, c9e <s (7681)@16, (-7681)@16 <s c9f, c9f <s (7681)@16,
(-7681)@16 <s ca0, ca0 <s (7681)@16, (-7681)@16 <s ca1, ca1 <s (7681)@16,
(-7681)@16 <s ca2, ca2 <s (7681)@16, (-7681)@16 <s ca3, ca3 <s (7681)@16,
(-7681)@16 <s ca4, ca4 <s (7681)@16, (-7681)@16 <s ca5, ca5 <s (7681)@16,
(-7681)@16 <s ca6, ca6 <s (7681)@16, (-7681)@16 <s ca7, ca7 <s (7681)@16,
(-7681)@16 <s ca8, ca8 <s (7681)@16, (-7681)@16 <s ca9, ca9 <s (7681)@16,
(-7681)@16 <s caa, caa <s (7681)@16, (-7681)@16 <s cab, cab <s (7681)@16,
(-7681)@16 <s cac, cac <s (7681)@16, (-7681)@16 <s cad, cad <s (7681)@16,
(-7681)@16 <s cae, cae <s (7681)@16, (-7681)@16 <s caf, caf <s (7681)@16,
(-7681)@16 <s cb0, cb0 <s (7681)@16, (-7681)@16 <s cb1, cb1 <s (7681)@16,
(-7681)@16 <s cb2, cb2 <s (7681)@16, (-7681)@16 <s cb3, cb3 <s (7681)@16,
(-7681)@16 <s cb4, cb4 <s (7681)@16, (-7681)@16 <s cb5, cb5 <s (7681)@16,
(-7681)@16 <s cb6, cb6 <s (7681)@16, (-7681)@16 <s cb7, cb7 <s (7681)@16,
(-7681)@16 <s cb8, cb8 <s (7681)@16, (-7681)@16 <s cb9, cb9 <s (7681)@16,
(-7681)@16 <s cba, cba <s (7681)@16, (-7681)@16 <s cbb, cbb <s (7681)@16,
(-7681)@16 <s cbc, cbc <s (7681)@16, (-7681)@16 <s cbd, cbd <s (7681)@16,
(-7681)@16 <s cbe, cbe <s (7681)@16, (-7681)@16 <s cbf, cbf <s (7681)@16,
(-7681)@16 <s cc0, cc0 <s (7681)@16, (-7681)@16 <s cc1, cc1 <s (7681)@16,
(-7681)@16 <s cc2, cc2 <s (7681)@16, (-7681)@16 <s cc3, cc3 <s (7681)@16,
(-7681)@16 <s cc4, cc4 <s (7681)@16, (-7681)@16 <s cc5, cc5 <s (7681)@16,
(-7681)@16 <s cc6, cc6 <s (7681)@16, (-7681)@16 <s cc7, cc7 <s (7681)@16,
(-7681)@16 <s cc8, cc8 <s (7681)@16, (-7681)@16 <s cc9, cc9 <s (7681)@16,
(-7681)@16 <s cca, cca <s (7681)@16, (-7681)@16 <s ccb, ccb <s (7681)@16,
(-7681)@16 <s ccc, ccc <s (7681)@16, (-7681)@16 <s ccd, ccd <s (7681)@16,
(-7681)@16 <s cce, cce <s (7681)@16, (-7681)@16 <s ccf, ccf <s (7681)@16,
(-7681)@16 <s cd0, cd0 <s (7681)@16, (-7681)@16 <s cd1, cd1 <s (7681)@16,
(-7681)@16 <s cd2, cd2 <s (7681)@16, (-7681)@16 <s cd3, cd3 <s (7681)@16,
(-7681)@16 <s cd4, cd4 <s (7681)@16, (-7681)@16 <s cd5, cd5 <s (7681)@16,
(-7681)@16 <s cd6, cd6 <s (7681)@16, (-7681)@16 <s cd7, cd7 <s (7681)@16,
(-7681)@16 <s cd8, cd8 <s (7681)@16, (-7681)@16 <s cd9, cd9 <s (7681)@16,
(-7681)@16 <s cda, cda <s (7681)@16, (-7681)@16 <s cdb, cdb <s (7681)@16,
(-7681)@16 <s cdc, cdc <s (7681)@16, (-7681)@16 <s cdd, cdd <s (7681)@16,
(-7681)@16 <s cde, cde <s (7681)@16, (-7681)@16 <s cdf, cdf <s (7681)@16,
(-7681)@16 <s ce0, ce0 <s (7681)@16, (-7681)@16 <s ce1, ce1 <s (7681)@16,
(-7681)@16 <s ce2, ce2 <s (7681)@16, (-7681)@16 <s ce3, ce3 <s (7681)@16,
(-7681)@16 <s ce4, ce4 <s (7681)@16, (-7681)@16 <s ce5, ce5 <s (7681)@16,
(-7681)@16 <s ce6, ce6 <s (7681)@16, (-7681)@16 <s ce7, ce7 <s (7681)@16,
(-7681)@16 <s ce8, ce8 <s (7681)@16, (-7681)@16 <s ce9, ce9 <s (7681)@16,
(-7681)@16 <s cea, cea <s (7681)@16, (-7681)@16 <s ceb, ceb <s (7681)@16,
(-7681)@16 <s cec, cec <s (7681)@16, (-7681)@16 <s ced, ced <s (7681)@16,
(-7681)@16 <s cee, cee <s (7681)@16, (-7681)@16 <s cef, cef <s (7681)@16,
(-7681)@16 <s cf0, cf0 <s (7681)@16, (-7681)@16 <s cf1, cf1 <s (7681)@16,
(-7681)@16 <s cf2, cf2 <s (7681)@16, (-7681)@16 <s cf3, cf3 <s (7681)@16,
(-7681)@16 <s cf4, cf4 <s (7681)@16, (-7681)@16 <s cf5, cf5 <s (7681)@16,
(-7681)@16 <s cf6, cf6 <s (7681)@16, (-7681)@16 <s cf7, cf7 <s (7681)@16,
(-7681)@16 <s cf8, cf8 <s (7681)@16, (-7681)@16 <s cf9, cf9 <s (7681)@16,
(-7681)@16 <s cfa, cfa <s (7681)@16, (-7681)@16 <s cfb, cfb <s (7681)@16,
(-7681)@16 <s cfc, cfc <s (7681)@16, (-7681)@16 <s cfd, cfd <s (7681)@16,
(-7681)@16 <s cfe, cfe <s (7681)@16, (-7681)@16 <s cff, cff <s (7681)@16
]
}


(**************** initialization *****************)


mov L0x7fffffffbb20 c00; mov L0x7fffffffbb22 c01; mov L0x7fffffffbb24 c02;
mov L0x7fffffffbb26 c03; mov L0x7fffffffbb28 c04; mov L0x7fffffffbb2a c05;
mov L0x7fffffffbb2c c06; mov L0x7fffffffbb2e c07; mov L0x7fffffffbb30 c08;
mov L0x7fffffffbb32 c09; mov L0x7fffffffbb34 c0a; mov L0x7fffffffbb36 c0b;
mov L0x7fffffffbb38 c0c; mov L0x7fffffffbb3a c0d; mov L0x7fffffffbb3c c0e;
mov L0x7fffffffbb3e c0f; mov L0x7fffffffbb40 c10; mov L0x7fffffffbb42 c11;
mov L0x7fffffffbb44 c12; mov L0x7fffffffbb46 c13; mov L0x7fffffffbb48 c14;
mov L0x7fffffffbb4a c15; mov L0x7fffffffbb4c c16; mov L0x7fffffffbb4e c17;
mov L0x7fffffffbb50 c18; mov L0x7fffffffbb52 c19; mov L0x7fffffffbb54 c1a;
mov L0x7fffffffbb56 c1b; mov L0x7fffffffbb58 c1c; mov L0x7fffffffbb5a c1d;
mov L0x7fffffffbb5c c1e; mov L0x7fffffffbb5e c1f; mov L0x7fffffffbb60 c20;
mov L0x7fffffffbb62 c21; mov L0x7fffffffbb64 c22; mov L0x7fffffffbb66 c23;
mov L0x7fffffffbb68 c24; mov L0x7fffffffbb6a c25; mov L0x7fffffffbb6c c26;
mov L0x7fffffffbb6e c27; mov L0x7fffffffbb70 c28; mov L0x7fffffffbb72 c29;
mov L0x7fffffffbb74 c2a; mov L0x7fffffffbb76 c2b; mov L0x7fffffffbb78 c2c;
mov L0x7fffffffbb7a c2d; mov L0x7fffffffbb7c c2e; mov L0x7fffffffbb7e c2f;
mov L0x7fffffffbb80 c30; mov L0x7fffffffbb82 c31; mov L0x7fffffffbb84 c32;
mov L0x7fffffffbb86 c33; mov L0x7fffffffbb88 c34; mov L0x7fffffffbb8a c35;
mov L0x7fffffffbb8c c36; mov L0x7fffffffbb8e c37; mov L0x7fffffffbb90 c38;
mov L0x7fffffffbb92 c39; mov L0x7fffffffbb94 c3a; mov L0x7fffffffbb96 c3b;
mov L0x7fffffffbb98 c3c; mov L0x7fffffffbb9a c3d; mov L0x7fffffffbb9c c3e;
mov L0x7fffffffbb9e c3f; mov L0x7fffffffbba0 c40; mov L0x7fffffffbba2 c41;
mov L0x7fffffffbba4 c42; mov L0x7fffffffbba6 c43; mov L0x7fffffffbba8 c44;
mov L0x7fffffffbbaa c45; mov L0x7fffffffbbac c46; mov L0x7fffffffbbae c47;
mov L0x7fffffffbbb0 c48; mov L0x7fffffffbbb2 c49; mov L0x7fffffffbbb4 c4a;
mov L0x7fffffffbbb6 c4b; mov L0x7fffffffbbb8 c4c; mov L0x7fffffffbbba c4d;
mov L0x7fffffffbbbc c4e; mov L0x7fffffffbbbe c4f; mov L0x7fffffffbbc0 c50;
mov L0x7fffffffbbc2 c51; mov L0x7fffffffbbc4 c52; mov L0x7fffffffbbc6 c53;
mov L0x7fffffffbbc8 c54; mov L0x7fffffffbbca c55; mov L0x7fffffffbbcc c56;
mov L0x7fffffffbbce c57; mov L0x7fffffffbbd0 c58; mov L0x7fffffffbbd2 c59;
mov L0x7fffffffbbd4 c5a; mov L0x7fffffffbbd6 c5b; mov L0x7fffffffbbd8 c5c;
mov L0x7fffffffbbda c5d; mov L0x7fffffffbbdc c5e; mov L0x7fffffffbbde c5f;
mov L0x7fffffffbbe0 c60; mov L0x7fffffffbbe2 c61; mov L0x7fffffffbbe4 c62;
mov L0x7fffffffbbe6 c63; mov L0x7fffffffbbe8 c64; mov L0x7fffffffbbea c65;
mov L0x7fffffffbbec c66; mov L0x7fffffffbbee c67; mov L0x7fffffffbbf0 c68;
mov L0x7fffffffbbf2 c69; mov L0x7fffffffbbf4 c6a; mov L0x7fffffffbbf6 c6b;
mov L0x7fffffffbbf8 c6c; mov L0x7fffffffbbfa c6d; mov L0x7fffffffbbfc c6e;
mov L0x7fffffffbbfe c6f; mov L0x7fffffffbc00 c70; mov L0x7fffffffbc02 c71;
mov L0x7fffffffbc04 c72; mov L0x7fffffffbc06 c73; mov L0x7fffffffbc08 c74;
mov L0x7fffffffbc0a c75; mov L0x7fffffffbc0c c76; mov L0x7fffffffbc0e c77;
mov L0x7fffffffbc10 c78; mov L0x7fffffffbc12 c79; mov L0x7fffffffbc14 c7a;
mov L0x7fffffffbc16 c7b; mov L0x7fffffffbc18 c7c; mov L0x7fffffffbc1a c7d;
mov L0x7fffffffbc1c c7e; mov L0x7fffffffbc1e c7f; mov L0x7fffffffbc20 c80;
mov L0x7fffffffbc22 c81; mov L0x7fffffffbc24 c82; mov L0x7fffffffbc26 c83;
mov L0x7fffffffbc28 c84; mov L0x7fffffffbc2a c85; mov L0x7fffffffbc2c c86;
mov L0x7fffffffbc2e c87; mov L0x7fffffffbc30 c88; mov L0x7fffffffbc32 c89;
mov L0x7fffffffbc34 c8a; mov L0x7fffffffbc36 c8b; mov L0x7fffffffbc38 c8c;
mov L0x7fffffffbc3a c8d; mov L0x7fffffffbc3c c8e; mov L0x7fffffffbc3e c8f;
mov L0x7fffffffbc40 c90; mov L0x7fffffffbc42 c91; mov L0x7fffffffbc44 c92;
mov L0x7fffffffbc46 c93; mov L0x7fffffffbc48 c94; mov L0x7fffffffbc4a c95;
mov L0x7fffffffbc4c c96; mov L0x7fffffffbc4e c97; mov L0x7fffffffbc50 c98;
mov L0x7fffffffbc52 c99; mov L0x7fffffffbc54 c9a; mov L0x7fffffffbc56 c9b;
mov L0x7fffffffbc58 c9c; mov L0x7fffffffbc5a c9d; mov L0x7fffffffbc5c c9e;
mov L0x7fffffffbc5e c9f; mov L0x7fffffffbc60 ca0; mov L0x7fffffffbc62 ca1;
mov L0x7fffffffbc64 ca2; mov L0x7fffffffbc66 ca3; mov L0x7fffffffbc68 ca4;
mov L0x7fffffffbc6a ca5; mov L0x7fffffffbc6c ca6; mov L0x7fffffffbc6e ca7;
mov L0x7fffffffbc70 ca8; mov L0x7fffffffbc72 ca9; mov L0x7fffffffbc74 caa;
mov L0x7fffffffbc76 cab; mov L0x7fffffffbc78 cac; mov L0x7fffffffbc7a cad;
mov L0x7fffffffbc7c cae; mov L0x7fffffffbc7e caf; mov L0x7fffffffbc80 cb0;
mov L0x7fffffffbc82 cb1; mov L0x7fffffffbc84 cb2; mov L0x7fffffffbc86 cb3;
mov L0x7fffffffbc88 cb4; mov L0x7fffffffbc8a cb5; mov L0x7fffffffbc8c cb6;
mov L0x7fffffffbc8e cb7; mov L0x7fffffffbc90 cb8; mov L0x7fffffffbc92 cb9;
mov L0x7fffffffbc94 cba; mov L0x7fffffffbc96 cbb; mov L0x7fffffffbc98 cbc;
mov L0x7fffffffbc9a cbd; mov L0x7fffffffbc9c cbe; mov L0x7fffffffbc9e cbf;
mov L0x7fffffffbca0 cc0; mov L0x7fffffffbca2 cc1; mov L0x7fffffffbca4 cc2;
mov L0x7fffffffbca6 cc3; mov L0x7fffffffbca8 cc4; mov L0x7fffffffbcaa cc5;
mov L0x7fffffffbcac cc6; mov L0x7fffffffbcae cc7; mov L0x7fffffffbcb0 cc8;
mov L0x7fffffffbcb2 cc9; mov L0x7fffffffbcb4 cca; mov L0x7fffffffbcb6 ccb;
mov L0x7fffffffbcb8 ccc; mov L0x7fffffffbcba ccd; mov L0x7fffffffbcbc cce;
mov L0x7fffffffbcbe ccf; mov L0x7fffffffbcc0 cd0; mov L0x7fffffffbcc2 cd1;
mov L0x7fffffffbcc4 cd2; mov L0x7fffffffbcc6 cd3; mov L0x7fffffffbcc8 cd4;
mov L0x7fffffffbcca cd5; mov L0x7fffffffbccc cd6; mov L0x7fffffffbcce cd7;
mov L0x7fffffffbcd0 cd8; mov L0x7fffffffbcd2 cd9; mov L0x7fffffffbcd4 cda;
mov L0x7fffffffbcd6 cdb; mov L0x7fffffffbcd8 cdc; mov L0x7fffffffbcda cdd;
mov L0x7fffffffbcdc cde; mov L0x7fffffffbcde cdf; mov L0x7fffffffbce0 ce0;
mov L0x7fffffffbce2 ce1; mov L0x7fffffffbce4 ce2; mov L0x7fffffffbce6 ce3;
mov L0x7fffffffbce8 ce4; mov L0x7fffffffbcea ce5; mov L0x7fffffffbcec ce6;
mov L0x7fffffffbcee ce7; mov L0x7fffffffbcf0 ce8; mov L0x7fffffffbcf2 ce9;
mov L0x7fffffffbcf4 cea; mov L0x7fffffffbcf6 ceb; mov L0x7fffffffbcf8 cec;
mov L0x7fffffffbcfa ced; mov L0x7fffffffbcfc cee; mov L0x7fffffffbcfe cef;
mov L0x7fffffffbd00 cf0; mov L0x7fffffffbd02 cf1; mov L0x7fffffffbd04 cf2;
mov L0x7fffffffbd06 cf3; mov L0x7fffffffbd08 cf4; mov L0x7fffffffbd0a cf5;
mov L0x7fffffffbd0c cf6; mov L0x7fffffffbd0e cf7; mov L0x7fffffffbd10 cf8;
mov L0x7fffffffbd12 cf9; mov L0x7fffffffbd14 cfa; mov L0x7fffffffbd16 cfb;
mov L0x7fffffffbd18 cfc; mov L0x7fffffffbd1a cfd; mov L0x7fffffffbd1c cfe;
mov L0x7fffffffbd1e cff; 


(**************** constants *****************)


mov L0x555555560700 (  7681)@sint16; mov L0x555555560702 (  7681)@sint16;
mov L0x555555560704 (  7681)@sint16; mov L0x555555560706 (  7681)@sint16;
mov L0x555555560708 (  7681)@sint16; mov L0x55555556070a (  7681)@sint16;
mov L0x55555556070c (  7681)@sint16; mov L0x55555556070e (  7681)@sint16;
mov L0x555555560710 (  7681)@sint16; mov L0x555555560712 (  7681)@sint16;
mov L0x555555560714 (  7681)@sint16; mov L0x555555560716 (  7681)@sint16;
mov L0x555555560718 (  7681)@sint16; mov L0x55555556071a (  7681)@sint16;
mov L0x55555556071c (  7681)@sint16; mov L0x55555556071e (  7681)@sint16;
mov L0x555555560720 ( -7679)@sint16; mov L0x555555560722 ( -7679)@sint16;
mov L0x555555560724 ( -7679)@sint16; mov L0x555555560726 ( -7679)@sint16;
mov L0x555555560728 ( -7679)@sint16; mov L0x55555556072a ( -7679)@sint16;
mov L0x55555556072c ( -7679)@sint16; mov L0x55555556072e ( -7679)@sint16;
mov L0x555555560730 ( -7679)@sint16; mov L0x555555560732 ( -7679)@sint16;
mov L0x555555560734 ( -7679)@sint16; mov L0x555555560736 ( -7679)@sint16;
mov L0x555555560738 ( -7679)@sint16; mov L0x55555556073a ( -7679)@sint16;
mov L0x55555556073c ( -7679)@sint16; mov L0x55555556073e ( -7679)@sint16;
mov L0x555555560740 ( 17474)@sint16; mov L0x555555560742 ( 17474)@sint16;
mov L0x555555560744 ( 17474)@sint16; mov L0x555555560746 ( 17474)@sint16;
mov L0x555555560748 ( 17474)@sint16; mov L0x55555556074a ( 17474)@sint16;
mov L0x55555556074c ( 17474)@sint16; mov L0x55555556074e ( 17474)@sint16;
mov L0x555555560750 ( 17474)@sint16; mov L0x555555560752 ( 17474)@sint16;
mov L0x555555560754 ( 17474)@sint16; mov L0x555555560756 ( 17474)@sint16;
mov L0x555555560758 ( 17474)@sint16; mov L0x55555556075a ( 17474)@sint16;
mov L0x55555556075c ( 17474)@sint16; mov L0x55555556075e ( 17474)@sint16;
mov L0x555555560760 (    16)@sint16; mov L0x555555560762 (    16)@sint16;
mov L0x555555560764 (    16)@sint16; mov L0x555555560766 (    16)@sint16;
mov L0x555555560768 (    16)@sint16; mov L0x55555556076a (    16)@sint16;
mov L0x55555556076c (    16)@sint16; mov L0x55555556076e (    16)@sint16;
mov L0x555555560770 (    16)@sint16; mov L0x555555560772 (    16)@sint16;
mov L0x555555560774 (    16)@sint16; mov L0x555555560776 (    16)@sint16;
mov L0x555555560778 (    16)@sint16; mov L0x55555556077a (    16)@sint16;
mov L0x55555556077c (    16)@sint16; mov L0x55555556077e (    16)@sint16;
mov L0x555555560780 (    -9)@sint16; mov L0x555555560782 (    -9)@sint16;
mov L0x555555560784 (    -9)@sint16; mov L0x555555560786 (    -9)@sint16;
mov L0x555555560788 (    -9)@sint16; mov L0x55555556078a (    -9)@sint16;
mov L0x55555556078c (    -9)@sint16; mov L0x55555556078e (    -9)@sint16;
mov L0x555555560790 (    -9)@sint16; mov L0x555555560792 (    -9)@sint16;
mov L0x555555560794 (    -9)@sint16; mov L0x555555560796 (    -9)@sint16;
mov L0x555555560798 (    -9)@sint16; mov L0x55555556079a (    -9)@sint16;
mov L0x55555556079c (    -9)@sint16; mov L0x55555556079e (    -9)@sint16;
mov L0x5555555607a0 ( -3593)@sint16; mov L0x5555555607a2 ( -3593)@sint16;
mov L0x5555555607a4 ( -3593)@sint16; mov L0x5555555607a6 ( -3593)@sint16;
mov L0x5555555607a8 ( -3593)@sint16; mov L0x5555555607aa ( -3593)@sint16;
mov L0x5555555607ac ( -3593)@sint16; mov L0x5555555607ae ( -3593)@sint16;
mov L0x5555555607b0 ( -3593)@sint16; mov L0x5555555607b2 ( -3593)@sint16;
mov L0x5555555607b4 ( -3593)@sint16; mov L0x5555555607b6 ( -3593)@sint16;
mov L0x5555555607b8 ( -3593)@sint16; mov L0x5555555607ba ( -3593)@sint16;
mov L0x5555555607bc ( -3593)@sint16; mov L0x5555555607be ( -3593)@sint16;
mov L0x5555555607c0 ( -2184)@sint16; mov L0x5555555607c2 ( -2184)@sint16;
mov L0x5555555607c4 ( -2184)@sint16; mov L0x5555555607c6 ( -2184)@sint16;
mov L0x5555555607c8 ( -2184)@sint16; mov L0x5555555607ca ( -2184)@sint16;
mov L0x5555555607cc ( -2184)@sint16; mov L0x5555555607ce ( -2184)@sint16;
mov L0x5555555607d0 ( -2184)@sint16; mov L0x5555555607d2 ( -2184)@sint16;
mov L0x5555555607d4 ( -2184)@sint16; mov L0x5555555607d6 ( -2184)@sint16;
mov L0x5555555607d8 ( -2184)@sint16; mov L0x5555555607da ( -2184)@sint16;
mov L0x5555555607dc ( -2184)@sint16; mov L0x5555555607de ( -2184)@sint16;
mov L0x5555555607e0 (  1912)@sint16; mov L0x5555555607e2 (  1912)@sint16;
mov L0x5555555607e4 (  1912)@sint16; mov L0x5555555607e6 (  1912)@sint16;
mov L0x5555555607e8 (  1912)@sint16; mov L0x5555555607ea (  1912)@sint16;
mov L0x5555555607ec (  1912)@sint16; mov L0x5555555607ee (  1912)@sint16;
mov L0x5555555607f0 (  1912)@sint16; mov L0x5555555607f2 (  1912)@sint16;
mov L0x5555555607f4 (  1912)@sint16; mov L0x5555555607f6 (  1912)@sint16;
mov L0x5555555607f8 (  1912)@sint16; mov L0x5555555607fa (  1912)@sint16;
mov L0x5555555607fc (  1912)@sint16; mov L0x5555555607fe (  1912)@sint16;
mov L0x555555560800 ( 28865)@sint16; mov L0x555555560802 ( 28865)@sint16;
mov L0x555555560804 ( 28865)@sint16; mov L0x555555560806 ( 28865)@sint16;
mov L0x555555560808 ( 28865)@sint16; mov L0x55555556080a ( 28865)@sint16;
mov L0x55555556080c ( 28865)@sint16; mov L0x55555556080e ( 28865)@sint16;
mov L0x555555560810 ( 28865)@sint16; mov L0x555555560812 ( 28865)@sint16;
mov L0x555555560814 ( 28865)@sint16; mov L0x555555560816 ( 28865)@sint16;
mov L0x555555560818 ( 28865)@sint16; mov L0x55555556081a ( 28865)@sint16;
mov L0x55555556081c ( 28865)@sint16; mov L0x55555556081e ( 28865)@sint16;
mov L0x555555560820 (  3777)@sint16; mov L0x555555560822 (  3777)@sint16;
mov L0x555555560824 (  3777)@sint16; mov L0x555555560826 (  3777)@sint16;
mov L0x555555560828 (  3777)@sint16; mov L0x55555556082a (  3777)@sint16;
mov L0x55555556082c (  3777)@sint16; mov L0x55555556082e (  3777)@sint16;
mov L0x555555560830 (  3777)@sint16; mov L0x555555560832 (  3777)@sint16;
mov L0x555555560834 (  3777)@sint16; mov L0x555555560836 (  3777)@sint16;
mov L0x555555560838 (  3777)@sint16; mov L0x55555556083a (  3777)@sint16;
mov L0x55555556083c (  3777)@sint16; mov L0x55555556083e (  3777)@sint16;
mov L0x555555560840 (-10350)@sint16; mov L0x555555560842 (-10350)@sint16;
mov L0x555555560844 (-10350)@sint16; mov L0x555555560846 (-10350)@sint16;
mov L0x555555560848 (-10350)@sint16; mov L0x55555556084a (-10350)@sint16;
mov L0x55555556084c (-10350)@sint16; mov L0x55555556084e (-10350)@sint16;
mov L0x555555560850 (-10350)@sint16; mov L0x555555560852 (-10350)@sint16;
mov L0x555555560854 (-10350)@sint16; mov L0x555555560856 (-10350)@sint16;
mov L0x555555560858 (-10350)@sint16; mov L0x55555556085a (-10350)@sint16;
mov L0x55555556085c (-10350)@sint16; mov L0x55555556085e (-10350)@sint16;
mov L0x555555560860 ( -3182)@sint16; mov L0x555555560862 ( -3182)@sint16;
mov L0x555555560864 ( -3182)@sint16; mov L0x555555560866 ( -3182)@sint16;
mov L0x555555560868 ( -3182)@sint16; mov L0x55555556086a ( -3182)@sint16;
mov L0x55555556086c ( -3182)@sint16; mov L0x55555556086e ( -3182)@sint16;
mov L0x555555560870 ( -3182)@sint16; mov L0x555555560872 ( -3182)@sint16;
mov L0x555555560874 ( -3182)@sint16; mov L0x555555560876 ( -3182)@sint16;
mov L0x555555560878 ( -3182)@sint16; mov L0x55555556087a ( -3182)@sint16;
mov L0x55555556087c ( -3182)@sint16; mov L0x55555556087e ( -3182)@sint16;
mov L0x555555560880 (  4496)@sint16; mov L0x555555560882 (  4496)@sint16;
mov L0x555555560884 (  4496)@sint16; mov L0x555555560886 (  4496)@sint16;
mov L0x555555560888 (  4496)@sint16; mov L0x55555556088a (  4496)@sint16;
mov L0x55555556088c (  4496)@sint16; mov L0x55555556088e (  4496)@sint16;
mov L0x555555560890 ( -7244)@sint16; mov L0x555555560892 ( -7244)@sint16;
mov L0x555555560894 ( -7244)@sint16; mov L0x555555560896 ( -7244)@sint16;
mov L0x555555560898 ( -7244)@sint16; mov L0x55555556089a ( -7244)@sint16;
mov L0x55555556089c ( -7244)@sint16; mov L0x55555556089e ( -7244)@sint16;
mov L0x5555555608a0 ( -3696)@sint16; mov L0x5555555608a2 ( -3696)@sint16;
mov L0x5555555608a4 ( -3696)@sint16; mov L0x5555555608a6 ( -3696)@sint16;
mov L0x5555555608a8 ( -3696)@sint16; mov L0x5555555608aa ( -3696)@sint16;
mov L0x5555555608ac ( -3696)@sint16; mov L0x5555555608ae ( -3696)@sint16;
mov L0x5555555608b0 ( -1100)@sint16; mov L0x5555555608b2 ( -1100)@sint16;
mov L0x5555555608b4 ( -1100)@sint16; mov L0x5555555608b6 ( -1100)@sint16;
mov L0x5555555608b8 ( -1100)@sint16; mov L0x5555555608ba ( -1100)@sint16;
mov L0x5555555608bc ( -1100)@sint16; mov L0x5555555608be ( -1100)@sint16;
mov L0x5555555608c0 ( 16425)@sint16; mov L0x5555555608c2 ( 16425)@sint16;
mov L0x5555555608c4 ( 16425)@sint16; mov L0x5555555608c6 ( 16425)@sint16;
mov L0x5555555608c8 ( 16425)@sint16; mov L0x5555555608ca ( 16425)@sint16;
mov L0x5555555608cc ( 16425)@sint16; mov L0x5555555608ce ( 16425)@sint16;
mov L0x5555555608d0 ( 16425)@sint16; mov L0x5555555608d2 ( 16425)@sint16;
mov L0x5555555608d4 ( 16425)@sint16; mov L0x5555555608d6 ( 16425)@sint16;
mov L0x5555555608d8 ( 16425)@sint16; mov L0x5555555608da ( 16425)@sint16;
mov L0x5555555608dc ( 16425)@sint16; mov L0x5555555608de ( 16425)@sint16;
mov L0x5555555608e0 (  3625)@sint16; mov L0x5555555608e2 (  3625)@sint16;
mov L0x5555555608e4 (  3625)@sint16; mov L0x5555555608e6 (  3625)@sint16;
mov L0x5555555608e8 (  3625)@sint16; mov L0x5555555608ea (  3625)@sint16;
mov L0x5555555608ec (  3625)@sint16; mov L0x5555555608ee (  3625)@sint16;
mov L0x5555555608f0 (  3625)@sint16; mov L0x5555555608f2 (  3625)@sint16;
mov L0x5555555608f4 (  3625)@sint16; mov L0x5555555608f6 (  3625)@sint16;
mov L0x5555555608f8 (  3625)@sint16; mov L0x5555555608fa (  3625)@sint16;
mov L0x5555555608fc (  3625)@sint16; mov L0x5555555608fe (  3625)@sint16;
mov L0x555555560900 ( 14744)@sint16; mov L0x555555560902 ( 14744)@sint16;
mov L0x555555560904 ( 14744)@sint16; mov L0x555555560906 ( 14744)@sint16;
mov L0x555555560908 ( 14744)@sint16; mov L0x55555556090a ( 14744)@sint16;
mov L0x55555556090c ( 14744)@sint16; mov L0x55555556090e ( 14744)@sint16;
mov L0x555555560910 ( -4974)@sint16; mov L0x555555560912 ( -4974)@sint16;
mov L0x555555560914 ( -4974)@sint16; mov L0x555555560916 ( -4974)@sint16;
mov L0x555555560918 ( -4974)@sint16; mov L0x55555556091a ( -4974)@sint16;
mov L0x55555556091c ( -4974)@sint16; mov L0x55555556091e ( -4974)@sint16;
mov L0x555555560920 (  2456)@sint16; mov L0x555555560922 (  2456)@sint16;
mov L0x555555560924 (  2456)@sint16; mov L0x555555560926 (  2456)@sint16;
mov L0x555555560928 (  2456)@sint16; mov L0x55555556092a (  2456)@sint16;
mov L0x55555556092c (  2456)@sint16; mov L0x55555556092e (  2456)@sint16;
mov L0x555555560930 (  2194)@sint16; mov L0x555555560932 (  2194)@sint16;
mov L0x555555560934 (  2194)@sint16; mov L0x555555560936 (  2194)@sint16;
mov L0x555555560938 (  2194)@sint16; mov L0x55555556093a (  2194)@sint16;
mov L0x55555556093c (  2194)@sint16; mov L0x55555556093e (  2194)@sint16;
mov L0x555555560940 (    -9)@sint16; mov L0x555555560942 (  -529)@sint16;
mov L0x555555560944 ( 32738)@sint16; mov L0x555555560946 ( -1851)@sint16;
mov L0x555555560948 (    -9)@sint16; mov L0x55555556094a ( 29394)@sint16;
mov L0x55555556094c ( -7508)@sint16; mov L0x55555556094e (-20435)@sint16;
mov L0x555555560950 (    -9)@sint16; mov L0x555555560952 ( 26288)@sint16;
mov L0x555555560954 (  9855)@sint16; mov L0x555555560956 (-19215)@sint16;
mov L0x555555560958 (    -9)@sint16; mov L0x55555556095a ( 16006)@sint16;
mov L0x55555556095c (-12611)@sint16; mov L0x55555556095e (  -964)@sint16;
mov L0x555555560960 ( -3593)@sint16; mov L0x555555560962 (   -17)@sint16;
mov L0x555555560964 ( -1054)@sint16; mov L0x555555560966 (  3781)@sint16;
mov L0x555555560968 ( -3593)@sint16; mov L0x55555556096a (  3794)@sint16;
mov L0x55555556096c (  2732)@sint16; mov L0x55555556096e ( -2515)@sint16;
mov L0x555555560970 ( -3593)@sint16; mov L0x555555560972 (  1712)@sint16;
mov L0x555555560974 (  2175)@sint16; mov L0x555555560976 ( -3343)@sint16;
mov L0x555555560978 ( -3593)@sint16; mov L0x55555556097a ( -3450)@sint16;
mov L0x55555556097c ( -2883)@sint16; mov L0x55555556097e (  1084)@sint16;
mov L0x555555560980 ( 16279)@sint16; mov L0x555555560982 ( 26288)@sint16;
mov L0x555555560984 ( -8558)@sint16; mov L0x555555560986 ( -6297)@sint16;
mov L0x555555560988 ( 11783)@sint16; mov L0x55555556098a (-25648)@sint16;
mov L0x55555556098c ( 14351)@sint16; mov L0x55555556098e (-25733)@sint16;
mov L0x555555560990 ( 21066)@sint16; mov L0x555555560992 (-23882)@sint16;
mov L0x555555560994 (-17440)@sint16; mov L0x555555560996 ( -7304)@sint16;
mov L0x555555560998 (-26279)@sint16; mov L0x55555556099a ( 16791)@sint16;
mov L0x55555556099c ( 22124)@sint16; mov L0x55555556099e (-20435)@sint16;
mov L0x5555555609a0 ( -3689)@sint16; mov L0x5555555609a2 (  1712)@sint16;
mov L0x5555555609a4 ( -1390)@sint16; mov L0x5555555609a6 ( -1689)@sint16;
mov L0x5555555609a8 (     7)@sint16; mov L0x5555555609aa ( -1072)@sint16;
mov L0x5555555609ac ( -1521)@sint16; mov L0x5555555609ae (  1403)@sint16;
mov L0x5555555609b0 (  -438)@sint16; mov L0x5555555609b2 ( -2378)@sint16;
mov L0x5555555609b4 ( -1056)@sint16; mov L0x5555555609b6 ( -3208)@sint16;
mov L0x5555555609b8 (  1881)@sint16; mov L0x5555555609ba ( -3177)@sint16;
mov L0x5555555609bc (  -404)@sint16; mov L0x5555555609be ( -2515)@sint16;
mov L0x5555555609c0 (  2816)@sint16; mov L0x5555555609c2 (-22039)@sint16;
mov L0x5555555609c4 (  9855)@sint16; mov L0x5555555609c6 ( 21168)@sint16;
mov L0x5555555609c8 (-19394)@sint16; mov L0x5555555609ca ( 30255)@sint16;
mov L0x5555555609cc (-27132)@sint16; mov L0x5555555609ce ( 17013)@sint16;
mov L0x5555555609d0 ( 23489)@sint16; mov L0x5555555609d2 (-18506)@sint16;
mov L0x5555555609d4 (  1869)@sint16; mov L0x5555555609d6 ( 10145)@sint16;
mov L0x5555555609d8 ( -3114)@sint16; mov L0x5555555609da (  9650)@sint16;
mov L0x5555555609dc (-15358)@sint16; mov L0x5555555609de (-24232)@sint16;
mov L0x5555555609e0 (  2816)@sint16; mov L0x5555555609e2 ( -2071)@sint16;
mov L0x5555555609e4 (  2175)@sint16; mov L0x5555555609e6 ( -3408)@sint16;
mov L0x5555555609e8 ( -1986)@sint16; mov L0x5555555609ea ( -2001)@sint16;
mov L0x5555555609ec (  3588)@sint16; mov L0x5555555609ee ( -1931)@sint16;
mov L0x5555555609f0 ( -1599)@sint16; mov L0x5555555609f2 (  2998)@sint16;
mov L0x5555555609f4 (  3405)@sint16; mov L0x5555555609f6 (  1441)@sint16;
mov L0x5555555609f8 (  2006)@sint16; mov L0x5555555609fa (   434)@sint16;
mov L0x5555555609fc (     2)@sint16; mov L0x5555555609fe ( -3752)@sint16;
mov L0x555555560a00 (  1724)@sint16; mov L0x555555560a02 (-24214)@sint16;
mov L0x555555560a04 (  6032)@sint16; mov L0x555555560a06 (-19215)@sint16;
mov L0x555555560a08 (-21467)@sint16; mov L0x555555560a0a ( 29453)@sint16;
mov L0x555555560a0c (-16655)@sint16; mov L0x555555560a0e ( 32124)@sint16;
mov L0x555555560a10 (  4505)@sint16; mov L0x555555560a12 ( 13686)@sint16;
mov L0x555555560a14 (-25946)@sint16; mov L0x555555560a16 (-12790)@sint16;
mov L0x555555560a18 (-23668)@sint16; mov L0x555555560a1a (-31518)@sint16;
mov L0x555555560a1c ( 14351)@sint16; mov L0x555555560a1e ( 12449)@sint16;
mov L0x555555560a20 (  3772)@sint16; mov L0x555555560a22 (  3434)@sint16;
mov L0x555555560a24 ( -2160)@sint16; mov L0x555555560a26 ( -3343)@sint16;
mov L0x555555560a28 (   549)@sint16; mov L0x555555560a2a ( -1779)@sint16;
mov L0x555555560a2c (  -783)@sint16; mov L0x555555560a2e (  1404)@sint16;
mov L0x555555560a30 (  -103)@sint16; mov L0x555555560a32 (  2422)@sint16;
mov L0x555555560a34 (  3750)@sint16; mov L0x555555560a36 ( -1526)@sint16;
mov L0x555555560a38 (  2956)@sint16; mov L0x555555560a3a (   226)@sint16;
mov L0x555555560a3c ( -1521)@sint16; mov L0x555555560a3e (  3745)@sint16;
mov L0x555555560a40 (-11655)@sint16; mov L0x555555560a42 ( -1715)@sint16;
mov L0x555555560a44 ( 24743)@sint16; mov L0x555555560a46 ( 26766)@sint16;
mov L0x555555560a48 ( 23754)@sint16; mov L0x555555560a4a ( 22943)@sint16;
mov L0x555555560a4c ( -2722)@sint16; mov L0x555555560a4e (  4880)@sint16;
mov L0x555555560a50 ( 18242)@sint16; mov L0x555555560a52 ( 26621)@sint16;
mov L0x555555560a54 (-32329)@sint16; mov L0x555555560a56 (-10333)@sint16;
mov L0x555555560a58 (-22593)@sint16; mov L0x555555560a5a (-16715)@sint16;
mov L0x555555560a5c ( 30426)@sint16; mov L0x555555560a5e (  2858)@sint16;
mov L0x555555560a60 (   121)@sint16; mov L0x555555560a62 (  -179)@sint16;
mov L0x555555560a64 ( -3417)@sint16; mov L0x555555560a66 (  3214)@sint16;
mov L0x555555560a68 (  2250)@sint16; mov L0x555555560a6a ( -1121)@sint16;
mov L0x555555560a6c ( -1698)@sint16; mov L0x555555560a6e ( -3312)@sint16;
mov L0x555555560a70 (   834)@sint16; mov L0x555555560a72 (  3581)@sint16;
mov L0x555555560a74 ( -3145)@sint16; mov L0x555555560a76 ( -3677)@sint16;
mov L0x555555560a78 (  2495)@sint16; mov L0x555555560a7a ( -2891)@sint16;
mov L0x555555560a7c (   730)@sint16; mov L0x555555560a7e ( -2262)@sint16;
mov L0x555555560a80 ( 21066)@sint16; mov L0x555555560a82 ( -4624)@sint16;
mov L0x555555560a84 (-24573)@sint16; mov L0x555555560a86 (-16186)@sint16;
mov L0x555555560a88 ( 29667)@sint16; mov L0x555555560a8a (-30597)@sint16;
mov L0x555555560a8c ( 23225)@sint16; mov L0x555555560a8e ( 10333)@sint16;
mov L0x555555560a90 (-15998)@sint16; mov L0x555555560a92 (  6510)@sint16;
mov L0x555555560a94 ( -3558)@sint16; mov L0x555555560a96 ( 17491)@sint16;
mov L0x555555560a98 ( 11792)@sint16; mov L0x555555560a9a ( 30255)@sint16;
mov L0x555555560a9c ( -4693)@sint16; mov L0x555555560a9e ( 21723)@sint16;
mov L0x555555560aa0 (  -438)@sint16; mov L0x555555560aa2 (  3568)@sint16;
mov L0x555555560aa4 ( -1533)@sint16; mov L0x555555560aa6 ( -2874)@sint16;
mov L0x555555560aa8 (  3555)@sint16; mov L0x555555560aaa ( -3461)@sint16;
mov L0x555555560aac (  2233)@sint16; mov L0x555555560aae (  3677)@sint16;
mov L0x555555560ab0 (  -638)@sint16; mov L0x555555560ab2 (  -658)@sint16;
mov L0x555555560ab4 (  -486)@sint16; mov L0x555555560ab6 (  -429)@sint16;
mov L0x555555560ab8 (  3600)@sint16; mov L0x555555560aba ( -2001)@sint16;
mov L0x555555560abc ( -2133)@sint16; mov L0x555555560abe (  -293)@sint16;
mov L0x555555560ac0 (-20469)@sint16; mov L0x555555560ac2 (-23882)@sint16;
mov L0x555555560ac4 ( 26663)@sint16; mov L0x555555560ac6 ( 14718)@sint16;
mov L0x555555560ac8 ( -9488)@sint16; mov L0x555555560aca (-16885)@sint16;
mov L0x555555560acc (-26220)@sint16; mov L0x555555560ace ( 17636)@sint16;
mov L0x555555560ad0 (-19351)@sint16; mov L0x555555560ad2 (-17082)@sint16;
mov L0x555555560ad4 (  2722)@sint16; mov L0x555555560ad6 (  2807)@sint16;
mov L0x555555560ad8 ( 10972)@sint16; mov L0x555555560ada ( -5990)@sint16;
mov L0x555555560adc ( 29871)@sint16; mov L0x555555560ade ( -5299)@sint16;
mov L0x555555560ae0 ( -1525)@sint16; mov L0x555555560ae2 ( -2378)@sint16;
mov L0x555555560ae4 ( -1497)@sint16; mov L0x555555560ae6 (  -642)@sint16;
mov L0x555555560ae8 ( -1296)@sint16; mov L0x555555560aea (  2059)@sint16;
mov L0x555555560aec ( -3692)@sint16; mov L0x555555560aee (  -796)@sint16;
mov L0x555555560af0 (   617)@sint16; mov L0x555555560af2 ( -3770)@sint16;
mov L0x555555560af4 (  1698)@sint16; mov L0x555555560af6 (  -777)@sint16;
mov L0x555555560af8 ( -3364)@sint16; mov L0x555555560afa ( -2918)@sint16;
mov L0x555555560afc ( -2385)@sint16; mov L0x555555560afe ( -3763)@sint16;
mov L0x555555560b00 ( -4983)@sint16; mov L0x555555560b02 ( 18745)@sint16;
mov L0x555555560b04 (-17440)@sint16; mov L0x555555560b06 (-32695)@sint16;
mov L0x555555560b08 ( -4505)@sint16; mov L0x555555560b0a (-12261)@sint16;
mov L0x555555560b0c (-32252)@sint16; mov L0x555555560b0e ( 23933)@sint16;
mov L0x555555560b10 (  2073)@sint16; mov L0x555555560b12 (-30938)@sint16;
mov L0x555555560b14 ( 30136)@sint16; mov L0x555555560b16 ( 16083)@sint16;
mov L0x555555560b18 (-21467)@sint16; mov L0x555555560b1a (-32414)@sint16;
mov L0x555555560b1c ( -8908)@sint16; mov L0x555555560b1e (  -947)@sint16;
mov L0x555555560b20 ( -1399)@sint16; mov L0x555555560b22 ( -2247)@sint16;
mov L0x555555560b24 ( -1056)@sint16; mov L0x555555560b26 (  3657)@sint16;
mov L0x555555560b28 (   103)@sint16; mov L0x555555560b2a ( -1509)@sint16;
mov L0x555555560b2c ( -1532)@sint16; mov L0x555555560b2e (   893)@sint16;
mov L0x555555560b30 ( -2535)@sint16; mov L0x555555560b32 ( -1242)@sint16;
mov L0x555555560b34 (  1464)@sint16; mov L0x555555560b36 ( -1837)@sint16;
mov L0x555555560b38 (   549)@sint16; mov L0x555555560b3a (  -670)@sint16;
mov L0x555555560b3c ( -2764)@sint16; mov L0x555555560b3e (   589)@sint16;
mov L0x555555560b40 (    -9)@sint16; mov L0x555555560b42 ( -1851)@sint16;
mov L0x555555560b44 ( -8558)@sint16; mov L0x555555560b46 (-22039)@sint16;
mov L0x555555560b48 (    -9)@sint16; mov L0x555555560b4a (  4573)@sint16;
mov L0x555555560b4c (-26441)@sint16; mov L0x555555560b4e ( 16791)@sint16;
mov L0x555555560b50 (    -9)@sint16; mov L0x555555560b52 ( -6297)@sint16;
mov L0x555555560b54 (  6032)@sint16; mov L0x555555560b56 ( -4624)@sint16;
mov L0x555555560b58 (    -9)@sint16; mov L0x555555560b5a ( -9513)@sint16;
mov L0x555555560b5c (  9360)@sint16; mov L0x555555560b5e ( 16006)@sint16;
mov L0x555555560b60 ( -3593)@sint16; mov L0x555555560b62 (  3781)@sint16;
mov L0x555555560b64 ( -1390)@sint16; mov L0x555555560b66 ( -2071)@sint16;
mov L0x555555560b68 ( -3593)@sint16; mov L0x555555560b6a ( -2083)@sint16;
mov L0x555555560b6c (  2743)@sint16; mov L0x555555560b6e ( -3177)@sint16;
mov L0x555555560b70 ( -3593)@sint16; mov L0x555555560b72 ( -1689)@sint16;
mov L0x555555560b74 ( -2160)@sint16; mov L0x555555560b76 (  3568)@sint16;
mov L0x555555560b78 ( -3593)@sint16; mov L0x555555560b7a (  3287)@sint16;
mov L0x555555560b7c (  1168)@sint16; mov L0x555555560b7e ( -3450)@sint16;
mov L0x555555560b80 (  1724)@sint16; mov L0x555555560b82 (-19215)@sint16;
mov L0x555555560b84 ( 24743)@sint16; mov L0x555555560b86 ( -4624)@sint16;
mov L0x555555560b88 (-21766)@sint16; mov L0x555555560b8a (  1007)@sint16;
mov L0x555555560b8c (-15358)@sint16; mov L0x555555560b8e (-25648)@sint16;
mov L0x555555560b90 ( -4983)@sint16; mov L0x555555560b92 ( -7304)@sint16;
mov L0x555555560b94 (-16092)@sint16; mov L0x555555560b96 (-13711)@sint16;
mov L0x555555560b98 ( 21399)@sint16; mov L0x555555560b9a (  4573)@sint16;
mov L0x555555560b9c (-12611)@sint16; mov L0x555555560b9e ( 29394)@sint16;
mov L0x555555560ba0 (  3772)@sint16; mov L0x555555560ba2 ( -3343)@sint16;
mov L0x555555560ba4 ( -3417)@sint16; mov L0x555555560ba6 (  3568)@sint16;
mov L0x555555560ba8 ( -2310)@sint16; mov L0x555555560baa (  1519)@sint16;
mov L0x555555560bac (     2)@sint16; mov L0x555555560bae ( -1072)@sint16;
mov L0x555555560bb0 ( -1399)@sint16; mov L0x555555560bb2 ( -3208)@sint16;
mov L0x555555560bb4 ( -1756)@sint16; mov L0x555555560bb6 (  2161)@sint16;
mov L0x555555560bb8 (  1431)@sint16; mov L0x555555560bba ( -2083)@sint16;
mov L0x555555560bbc ( -2883)@sint16; mov L0x555555560bbe (  3794)@sint16;
mov L0x555555560bc0 (-20469)@sint16; mov L0x555555560bc2 ( 14718)@sint16;
mov L0x555555560bc4 (-17440)@sint16; mov L0x555555560bc6 ( 16638)@sint16;
mov L0x555555560bc8 (-15307)@sint16; mov L0x555555560bca ( 12449)@sint16;
mov L0x555555560bcc ( 12269)@sint16; mov L0x555555560bce (-22764)@sint16;
mov L0x555555560bd0 (-26382)@sint16; mov L0x555555560bd2 ( -5452)@sint16;
mov L0x555555560bd4 (-25946)@sint16; mov L0x555555560bd6 (-11996)@sint16;
mov L0x555555560bd8 (  5759)@sint16; mov L0x555555560bda (  -964)@sint16;
mov L0x555555560bdc (-26441)@sint16; mov L0x555555560bde (  9087)@sint16;
mov L0x555555560be0 ( -1525)@sint16; mov L0x555555560be2 (  -642)@sint16;
mov L0x555555560be4 ( -1056)@sint16; mov L0x555555560be6 (  1278)@sint16;
mov L0x555555560be8 ( -1483)@sint16; mov L0x555555560bea (  3745)@sint16;
mov L0x555555560bec ( -2579)@sint16; mov L0x555555560bee (  -236)@sint16;
mov L0x555555560bf0 ( -2830)@sint16; mov L0x555555560bf2 (   692)@sint16;
mov L0x555555560bf4 (  3750)@sint16; mov L0x555555560bf6 (  2340)@sint16;
mov L0x555555560bf8 ( -1921)@sint16; mov L0x555555560bfa (  1084)@sint16;
mov L0x555555560bfc (  2743)@sint16; mov L0x555555560bfe (  1407)@sint16;
mov L0x555555560c00 (  5930)@sint16; mov L0x555555560c02 (-23933)@sint16;
mov L0x555555560c04 (-16092)@sint16; mov L0x555555560c06 (-18506)@sint16;
mov L0x555555560c08 ( 11792)@sint16; mov L0x555555560c0a (-28805)@sint16;
mov L0x555555560c0c (-27132)@sint16; mov L0x555555560c0e ( -5990)@sint16;
mov L0x555555560c10 ( -5913)@sint16; mov L0x555555560c12 ( 27243)@sint16;
mov L0x555555560c14 (-13933)@sint16; mov L0x555555560c16 (  6510)@sint16;
mov L0x555555560c18 (-26279)@sint16; mov L0x555555560c1a ( -6766)@sint16;
mov L0x555555560c1c ( -7508)@sint16; mov L0x555555560c1e ( 16791)@sint16;
mov L0x555555560c20 (   810)@sint16; mov L0x555555560c22 (  -893)@sint16;
mov L0x555555560c24 ( -1756)@sint16; mov L0x555555560c26 (  2998)@sint16;
mov L0x555555560c28 (  3600)@sint16; mov L0x555555560c2a ( -1669)@sint16;
mov L0x555555560c2c (  3588)@sint16; mov L0x555555560c2e ( -2918)@sint16;
mov L0x555555560c30 ( -1305)@sint16; mov L0x555555560c32 ( -2965)@sint16;
mov L0x555555560c34 (   915)@sint16; mov L0x555555560c36 (  -658)@sint16;
mov L0x555555560c38 (  1881)@sint16; mov L0x555555560c3a (   402)@sint16;
mov L0x555555560c3c (  2732)@sint16; mov L0x555555560c3e ( -3177)@sint16;
mov L0x555555560c40 (-18191)@sint16; mov L0x555555560c42 (-15221)@sint16;
mov L0x555555560c44 (-26262)@sint16; mov L0x555555560c46 (  2739)@sint16;
mov L0x555555560c48 (  -828)@sint16; mov L0x555555560c4a (-15145)@sint16;
mov L0x555555560c4c ( -8908)@sint16; mov L0x555555560c4e ( -9633)@sint16;
mov L0x555555560c50 ( 20315)@sint16; mov L0x555555560c52 (-15111)@sint16;
mov L0x555555560c54 (-10478)@sint16; mov L0x555555560c56 (   802)@sint16;
mov L0x555555560c58 (-20870)@sint16; mov L0x555555560c5a ( -4565)@sint16;
mov L0x555555560c5c ( 22124)@sint16; mov L0x555555560c5e ( 26783)@sint16;
mov L0x555555560c60 ( -2319)@sint16; mov L0x555555560c62 (  3723)@sint16;
mov L0x555555560c64 (  1386)@sint16; mov L0x555555560c66 (  1203)@sint16;
mov L0x555555560c68 ( -2876)@sint16; mov L0x555555560c6a ( -2345)@sint16;
mov L0x555555560c6c ( -2764)@sint16; mov L0x555555560c6e (  -929)@sint16;
mov L0x555555560c70 ( -1701)@sint16; mov L0x555555560c72 ( -3335)@sint16;
mov L0x555555560c74 ( -3310)@sint16; mov L0x555555560c76 (  -222)@sint16;
mov L0x555555560c78 ( -1414)@sint16; mov L0x555555560c7a ( -2005)@sint16;
mov L0x555555560c7c (  -404)@sint16; mov L0x555555560c7e (  2719)@sint16;
mov L0x555555560c80 (  4505)@sint16; mov L0x555555560c82 ( -5452)@sint16;
mov L0x555555560c84 ( -3456)@sint16; mov L0x555555560c86 (-28958)@sint16;
mov L0x555555560c88 (-14121)@sint16; mov L0x555555560c8a ( 32124)@sint16;
mov L0x555555560c8c ( 17602)@sint16; mov L0x555555560c8e (  2526)@sint16;
mov L0x555555560c90 (  2073)@sint16; mov L0x555555560c92 ( 22790)@sint16;
mov L0x555555560c94 (-24052)@sint16; mov L0x555555560c96 (  9633)@sint16;
mov L0x555555560c98 (-21766)@sint16; mov L0x555555560c9a (-20435)@sint16;
mov L0x555555560c9c ( 21868)@sint16; mov L0x555555560c9e (  3524)@sint16;
mov L0x555555560ca0 (  -103)@sint16; mov L0x555555560ca2 (   692)@sint16;
mov L0x555555560ca4 ( -3456)@sint16; mov L0x555555560ca6 (  2786)@sint16;
mov L0x555555560ca8 ( -1321)@sint16; mov L0x555555560caa (  1404)@sint16;
mov L0x555555560cac (   194)@sint16; mov L0x555555560cae (  3550)@sint16;
mov L0x555555560cb0 ( -2535)@sint16; mov L0x555555560cb2 (  3334)@sint16;
mov L0x555555560cb4 (  2572)@sint16; mov L0x555555560cb6 (   929)@sint16;
mov L0x555555560cb8 ( -2310)@sint16; mov L0x555555560cba ( -2515)@sint16;
mov L0x555555560cbc (  -660)@sint16; mov L0x555555560cbe (  1476)@sint16;
mov L0x555555560cc0 (  7491)@sint16; mov L0x555555560cc2 (-12790)@sint16;
mov L0x555555560cc4 (-22875)@sint16; mov L0x555555560cc6 ( 16885)@sint16;
mov L0x555555560cc8 ( 22568)@sint16; mov L0x555555560cca ( 27858)@sint16;
mov L0x555555560ccc ( 10478)@sint16; mov L0x555555560cce ( 20119)@sint16;
mov L0x555555560cd0 ( 31177)@sint16; mov L0x555555560cd2 (  5299)@sint16;
mov L0x555555560cd4 (-21860)@sint16; mov L0x555555560cd6 (-10495)@sint16;
mov L0x555555560cd8 ( -3114)@sint16; mov L0x555555560cda (  1007)@sint16;
mov L0x555555560cdc (  8472)@sint16; mov L0x555555560cde (  9650)@sint16;
mov L0x555555560ce0 ( -2237)@sint16; mov L0x555555560ce2 ( -1526)@sint16;
mov L0x555555560ce4 (  -859)@sint16; mov L0x555555560ce6 ( -2059)@sint16;
mov L0x555555560ce8 (  2088)@sint16; mov L0x555555560cea (  2258)@sint16;
mov L0x555555560cec (  3310)@sint16; mov L0x555555560cee (   151)@sint16;
mov L0x555555560cf0 (  1993)@sint16; mov L0x555555560cf2 (  3763)@sint16;
mov L0x555555560cf4 ( -3428)@sint16; mov L0x555555560cf6 ( -2815)@sint16;
mov L0x555555560cf8 (  2006)@sint16; mov L0x555555560cfa (  1519)@sint16;
mov L0x555555560cfc ( -3816)@sint16; mov L0x555555560cfe (   434)@sint16;
mov L0x555555560d00 ( -5913)@sint16; mov L0x555555560d02 ( 27636)@sint16;
mov L0x555555560d04 (-32329)@sint16; mov L0x555555560d06 ( -2952)@sint16;
mov L0x555555560d08 ( 29667)@sint16; mov L0x555555560d0a ( 23984)@sint16;
mov L0x555555560d0c (-10409)@sint16; mov L0x555555560d0e (  8831)@sint16;
mov L0x555555560d10 (-11792)@sint16; mov L0x555555560d12 ( 14138)@sint16;
mov L0x555555560d14 ( 13541)@sint16; mov L0x555555560d16 ( 31518)@sint16;
mov L0x555555560d18 ( 11783)@sint16; mov L0x555555560d1a ( 30844)@sint16;
mov L0x555555560d1c (-15358)@sint16; mov L0x555555560d1e (-19274)@sint16;
mov L0x555555560d20 ( -1305)@sint16; mov L0x555555560d22 (  1012)@sint16;
mov L0x555555560d24 ( -3145)@sint16; mov L0x555555560d26 (  1144)@sint16;
mov L0x555555560d28 (  3555)@sint16; mov L0x555555560d2a (  -592)@sint16;
mov L0x555555560d2c (  2391)@sint16; mov L0x555555560d2e (  1151)@sint16;
mov L0x555555560d30 ( -3600)@sint16; mov L0x555555560d32 (   826)@sint16;
mov L0x555555560d34 (  2789)@sint16; mov L0x555555560d36 (  -226)@sint16;
mov L0x555555560d38 (     7)@sint16; mov L0x555555560d3a (   124)@sint16;
mov L0x555555560d3c (     2)@sint16; mov L0x555555560d3e (  2230)@sint16;
mov L0x555555560d40 (    -9)@sint16; mov L0x555555560d42 (-16425)@sint16;
mov L0x555555560d44 (-28865)@sint16; mov L0x555555560d46 ( 10350)@sint16;
mov L0x555555560d48 ( -3593)@sint16; mov L0x555555560d4a ( -3625)@sint16;
mov L0x555555560d4c ( -3777)@sint16; mov L0x555555560d4e (  3182)@sint16;
mov L0x555555560d50 (    -9)@sint16; mov L0x555555560d52 (-10350)@sint16;
mov L0x555555560d54 ( 28865)@sint16; mov L0x555555560d56 ( 16425)@sint16;
mov L0x555555560d58 ( -3593)@sint16; mov L0x555555560d5a ( -3182)@sint16;
mov L0x555555560d5c (  3777)@sint16; mov L0x555555560d5e (  3625)@sint16;
mov L0x555555560d60 (    -9)@sint16; mov L0x555555560d62 (  4496)@sint16;
mov L0x555555560d64 (-10350)@sint16; mov L0x555555560d66 ( 14744)@sint16;
mov L0x555555560d68 ( -3593)@sint16; mov L0x555555560d6a ( -3696)@sint16;
mov L0x555555560d6c ( -3182)@sint16; mov L0x555555560d6e (  2456)@sint16;
mov L0x555555560d70 (    -9)@sint16; mov L0x555555560d72 (  4974)@sint16;
mov L0x555555560d74 (-16425)@sint16; mov L0x555555560d76 (  7244)@sint16;
mov L0x555555560d78 ( -3593)@sint16; mov L0x555555560d7a ( -2194)@sint16;
mov L0x555555560d7c ( -3625)@sint16; mov L0x555555560d7e (  1100)@sint16;
mov L0x555555560d80 (    -9)@sint16; mov L0x555555560d82 (-11655)@sint16;
mov L0x555555560d84 (  4496)@sint16; mov L0x555555560d86 (-18191)@sint16;
mov L0x555555560d88 ( -3593)@sint16; mov L0x555555560d8a (   121)@sint16;
mov L0x555555560d8c ( -3696)@sint16; mov L0x555555560d8e ( -2319)@sint16;
mov L0x555555560d90 (    -9)@sint16; mov L0x555555560d92 (-22593)@sint16;
mov L0x555555560d94 (  7244)@sint16; mov L0x555555560d96 (-20315)@sint16;
mov L0x555555560d98 ( -3593)@sint16; mov L0x555555560d9a (  2495)@sint16;
mov L0x555555560d9c (  1100)@sint16; mov L0x555555560d9e (  1701)@sint16;
mov L0x555555560da0 (    -9)@sint16; mov L0x555555560da2 (-18191)@sint16;
mov L0x555555560da4 ( 14744)@sint16; mov L0x555555560da6 (-23754)@sint16;
mov L0x555555560da8 ( -3593)@sint16; mov L0x555555560daa ( -2319)@sint16;
mov L0x555555560dac (  2456)@sint16; mov L0x555555560dae ( -2250)@sint16;
mov L0x555555560db0 (    -9)@sint16; mov L0x555555560db2 (-20870)@sint16;
mov L0x555555560db4 (  4974)@sint16; mov L0x555555560db6 (-22593)@sint16;
mov L0x555555560db8 ( -3593)@sint16; mov L0x555555560dba ( -1414)@sint16;
mov L0x555555560dbc ( -2194)@sint16; mov L0x555555560dbe (  2495)@sint16;

(* #! -> SP = 0x7fffffff9a78 *)
#! 0x7fffffff9a78 = 0x7fffffff9a78;
(* vmovdqa (%rdx),%ymm0                            #! EA = L0x555555560700; Value = 0x1e011e011e011e01; PC = 0x555555558a28 *)
mov ymm0_0 L0x555555560700;
mov ymm0_1 L0x555555560702;
mov ymm0_2 L0x555555560704;
mov ymm0_3 L0x555555560706;
mov ymm0_4 L0x555555560708;
mov ymm0_5 L0x55555556070a;
mov ymm0_6 L0x55555556070c;
mov ymm0_7 L0x55555556070e;
mov ymm0_8 L0x555555560710;
mov ymm0_9 L0x555555560712;
mov ymm0_a L0x555555560714;
mov ymm0_b L0x555555560716;
mov ymm0_c L0x555555560718;
mov ymm0_d L0x55555556071a;
mov ymm0_e L0x55555556071c;
mov ymm0_f L0x55555556071e;
(* vmovdqa 0x40(%rsi),%ymm6                        #! EA = L0x7fffffffbb60; Value = 0xfc9e0537f5380bbb; PC = 0x555555558a2c *)
mov ymm6_0 L0x7fffffffbb60;
mov ymm6_1 L0x7fffffffbb62;
mov ymm6_2 L0x7fffffffbb64;
mov ymm6_3 L0x7fffffffbb66;
mov ymm6_4 L0x7fffffffbb68;
mov ymm6_5 L0x7fffffffbb6a;
mov ymm6_6 L0x7fffffffbb6c;
mov ymm6_7 L0x7fffffffbb6e;
mov ymm6_8 L0x7fffffffbb70;
mov ymm6_9 L0x7fffffffbb72;
mov ymm6_a L0x7fffffffbb74;
mov ymm6_b L0x7fffffffbb76;
mov ymm6_c L0x7fffffffbb78;
mov ymm6_d L0x7fffffffbb7a;
mov ymm6_e L0x7fffffffbb7c;
mov ymm6_f L0x7fffffffbb7e;
(* vmovdqa 0x60(%rsi),%ymm7                        #! EA = L0x7fffffffbb80; Value = 0xf552f36a00db0790; PC = 0x555555558a31 *)
mov ymm7_0 L0x7fffffffbb80;
mov ymm7_1 L0x7fffffffbb82;
mov ymm7_2 L0x7fffffffbb84;
mov ymm7_3 L0x7fffffffbb86;
mov ymm7_4 L0x7fffffffbb88;
mov ymm7_5 L0x7fffffffbb8a;
mov ymm7_6 L0x7fffffffbb8c;
mov ymm7_7 L0x7fffffffbb8e;
mov ymm7_8 L0x7fffffffbb90;
mov ymm7_9 L0x7fffffffbb92;
mov ymm7_a L0x7fffffffbb94;
mov ymm7_b L0x7fffffffbb96;
mov ymm7_c L0x7fffffffbb98;
mov ymm7_d L0x7fffffffbb9a;
mov ymm7_e L0x7fffffffbb9c;
mov ymm7_f L0x7fffffffbb9e;
(* vmovdqa 0xc0(%rsi),%ymm10                       #! EA = L0x7fffffffbbe0; Value = 0x020eff13018a0944; PC = 0x555555558a36 *)
mov ymm10_0 L0x7fffffffbbe0;
mov ymm10_1 L0x7fffffffbbe2;
mov ymm10_2 L0x7fffffffbbe4;
mov ymm10_3 L0x7fffffffbbe6;
mov ymm10_4 L0x7fffffffbbe8;
mov ymm10_5 L0x7fffffffbbea;
mov ymm10_6 L0x7fffffffbbec;
mov ymm10_7 L0x7fffffffbbee;
mov ymm10_8 L0x7fffffffbbf0;
mov ymm10_9 L0x7fffffffbbf2;
mov ymm10_a L0x7fffffffbbf4;
mov ymm10_b L0x7fffffffbbf6;
mov ymm10_c L0x7fffffffbbf8;
mov ymm10_d L0x7fffffffbbfa;
mov ymm10_e L0x7fffffffbbfc;
mov ymm10_f L0x7fffffffbbfe;
(* vmovdqa 0xe0(%rsi),%ymm11                       #! EA = L0x7fffffffbc00; Value = 0x04d20862092a0b9c; PC = 0x555555558a3e *)
mov ymm11_0 L0x7fffffffbc00;
mov ymm11_1 L0x7fffffffbc02;
mov ymm11_2 L0x7fffffffbc04;
mov ymm11_3 L0x7fffffffbc06;
mov ymm11_4 L0x7fffffffbc08;
mov ymm11_5 L0x7fffffffbc0a;
mov ymm11_6 L0x7fffffffbc0c;
mov ymm11_7 L0x7fffffffbc0e;
mov ymm11_8 L0x7fffffffbc10;
mov ymm11_9 L0x7fffffffbc12;
mov ymm11_a L0x7fffffffbc14;
mov ymm11_b L0x7fffffffbc16;
mov ymm11_c L0x7fffffffbc18;
mov ymm11_d L0x7fffffffbc1a;
mov ymm11_e L0x7fffffffbc1c;
mov ymm11_f L0x7fffffffbc1e;
(* vmovdqa 0x100(%rdx),%ymm1                       #! EA = L0x555555560800; Value = 0x70c170c170c170c1; PC = 0x555555558a46 *)
mov ymm1_0 L0x555555560800;
mov ymm1_1 L0x555555560802;
mov ymm1_2 L0x555555560804;
mov ymm1_3 L0x555555560806;
mov ymm1_4 L0x555555560808;
mov ymm1_5 L0x55555556080a;
mov ymm1_6 L0x55555556080c;
mov ymm1_7 L0x55555556080e;
mov ymm1_8 L0x555555560810;
mov ymm1_9 L0x555555560812;
mov ymm1_a L0x555555560814;
mov ymm1_b L0x555555560816;
mov ymm1_c L0x555555560818;
mov ymm1_d L0x55555556081a;
mov ymm1_e L0x55555556081c;
mov ymm1_f L0x55555556081e;
(* vpsubw %ymm6,%ymm7,%ymm12                       #! PC = 0x555555558a4e *)
sub ymm12_0 ymm7_0 ymm6_0;
sub ymm12_1 ymm7_1 ymm6_1;
sub ymm12_2 ymm7_2 ymm6_2;
sub ymm12_3 ymm7_3 ymm6_3;
sub ymm12_4 ymm7_4 ymm6_4;
sub ymm12_5 ymm7_5 ymm6_5;
sub ymm12_6 ymm7_6 ymm6_6;
sub ymm12_7 ymm7_7 ymm6_7;
sub ymm12_8 ymm7_8 ymm6_8;
sub ymm12_9 ymm7_9 ymm6_9;
sub ymm12_a ymm7_a ymm6_a;
sub ymm12_b ymm7_b ymm6_b;
sub ymm12_c ymm7_c ymm6_c;
sub ymm12_d ymm7_d ymm6_d;
sub ymm12_e ymm7_e ymm6_e;
sub ymm12_f ymm7_f ymm6_f;
(* vpaddw %ymm7,%ymm6,%ymm6                        #! PC = 0x555555558a52 *)
add ymm6_0 ymm6_0 ymm7_0;
add ymm6_1 ymm6_1 ymm7_1;
add ymm6_2 ymm6_2 ymm7_2;
add ymm6_3 ymm6_3 ymm7_3;
add ymm6_4 ymm6_4 ymm7_4;
add ymm6_5 ymm6_5 ymm7_5;
add ymm6_6 ymm6_6 ymm7_6;
add ymm6_7 ymm6_7 ymm7_7;
add ymm6_8 ymm6_8 ymm7_8;
add ymm6_9 ymm6_9 ymm7_9;
add ymm6_a ymm6_a ymm7_a;
add ymm6_b ymm6_b ymm7_b;
add ymm6_c ymm6_c ymm7_c;
add ymm6_d ymm6_d ymm7_d;
add ymm6_e ymm6_e ymm7_e;
add ymm6_f ymm6_f ymm7_f;
(* vpmullw %ymm1,%ymm12,%ymm7                      #! PC = 0x555555558a56 *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpsubw %ymm10,%ymm11,%ymm13                     #! PC = 0x555555558a5a *)
sub ymm13_0 ymm11_0 ymm10_0;
sub ymm13_1 ymm11_1 ymm10_1;
sub ymm13_2 ymm11_2 ymm10_2;
sub ymm13_3 ymm11_3 ymm10_3;
sub ymm13_4 ymm11_4 ymm10_4;
sub ymm13_5 ymm11_5 ymm10_5;
sub ymm13_6 ymm11_6 ymm10_6;
sub ymm13_7 ymm11_7 ymm10_7;
sub ymm13_8 ymm11_8 ymm10_8;
sub ymm13_9 ymm11_9 ymm10_9;
sub ymm13_a ymm11_a ymm10_a;
sub ymm13_b ymm11_b ymm10_b;
sub ymm13_c ymm11_c ymm10_c;
sub ymm13_d ymm11_d ymm10_d;
sub ymm13_e ymm11_e ymm10_e;
sub ymm13_f ymm11_f ymm10_f;
(* vpaddw %ymm11,%ymm10,%ymm10                     #! PC = 0x555555558a5f *)
add ymm10_0 ymm10_0 ymm11_0;
add ymm10_1 ymm10_1 ymm11_1;
add ymm10_2 ymm10_2 ymm11_2;
add ymm10_3 ymm10_3 ymm11_3;
add ymm10_4 ymm10_4 ymm11_4;
add ymm10_5 ymm10_5 ymm11_5;
add ymm10_6 ymm10_6 ymm11_6;
add ymm10_7 ymm10_7 ymm11_7;
add ymm10_8 ymm10_8 ymm11_8;
add ymm10_9 ymm10_9 ymm11_9;
add ymm10_a ymm10_a ymm11_a;
add ymm10_b ymm10_b ymm11_b;
add ymm10_c ymm10_c ymm11_c;
add ymm10_d ymm10_d ymm11_d;
add ymm10_e ymm10_e ymm11_e;
add ymm10_f ymm10_f ymm11_f;
(* vpmullw %ymm1,%ymm13,%ymm11                     #! PC = 0x555555558a64 *)
smull mulHymm13_0 mulL_0 ymm1_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm1_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm1_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm1_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm1_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm1_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm1_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm1_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm1_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm1_9 ymm13_9;
smull mulHymm13_a mulL_a ymm1_a ymm13_a;
smull mulHymm13_b mulL_b ymm1_b ymm13_b;
smull mulHymm13_c mulL_c ymm1_c ymm13_c;
smull mulHymm13_d mulL_d ymm1_d ymm13_d;
smull mulHymm13_e mulL_e ymm1_e ymm13_e;
smull mulHymm13_f mulL_f ymm1_f ymm13_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vmovdqa (%rsi),%ymm4                            #! EA = L0x7fffffffbb20; Value = 0xf82706a1ff780822; PC = 0x555555558a68 *)
mov ymm4_0 L0x7fffffffbb20;
mov ymm4_1 L0x7fffffffbb22;
mov ymm4_2 L0x7fffffffbb24;
mov ymm4_3 L0x7fffffffbb26;
mov ymm4_4 L0x7fffffffbb28;
mov ymm4_5 L0x7fffffffbb2a;
mov ymm4_6 L0x7fffffffbb2c;
mov ymm4_7 L0x7fffffffbb2e;
mov ymm4_8 L0x7fffffffbb30;
mov ymm4_9 L0x7fffffffbb32;
mov ymm4_a L0x7fffffffbb34;
mov ymm4_b L0x7fffffffbb36;
mov ymm4_c L0x7fffffffbb38;
mov ymm4_d L0x7fffffffbb3a;
mov ymm4_e L0x7fffffffbb3c;
mov ymm4_f L0x7fffffffbb3e;
(* vmovdqa 0x20(%rsi),%ymm5                        #! EA = L0x7fffffffbb40; Value = 0xfd6a04edf4430c44; PC = 0x555555558a6c *)
mov ymm5_0 L0x7fffffffbb40;
mov ymm5_1 L0x7fffffffbb42;
mov ymm5_2 L0x7fffffffbb44;
mov ymm5_3 L0x7fffffffbb46;
mov ymm5_4 L0x7fffffffbb48;
mov ymm5_5 L0x7fffffffbb4a;
mov ymm5_6 L0x7fffffffbb4c;
mov ymm5_7 L0x7fffffffbb4e;
mov ymm5_8 L0x7fffffffbb50;
mov ymm5_9 L0x7fffffffbb52;
mov ymm5_a L0x7fffffffbb54;
mov ymm5_b L0x7fffffffbb56;
mov ymm5_c L0x7fffffffbb58;
mov ymm5_d L0x7fffffffbb5a;
mov ymm5_e L0x7fffffffbb5c;
mov ymm5_f L0x7fffffffbb5e;
(* vmovdqa 0x80(%rsi),%ymm8                        #! EA = L0x7fffffffbba0; Value = 0x026606e903e207b8; PC = 0x555555558a71 *)
mov ymm8_0 L0x7fffffffbba0;
mov ymm8_1 L0x7fffffffbba2;
mov ymm8_2 L0x7fffffffbba4;
mov ymm8_3 L0x7fffffffbba6;
mov ymm8_4 L0x7fffffffbba8;
mov ymm8_5 L0x7fffffffbbaa;
mov ymm8_6 L0x7fffffffbbac;
mov ymm8_7 L0x7fffffffbbae;
mov ymm8_8 L0x7fffffffbbb0;
mov ymm8_9 L0x7fffffffbbb2;
mov ymm8_a L0x7fffffffbbb4;
mov ymm8_b L0x7fffffffbbb6;
mov ymm8_c L0x7fffffffbbb8;
mov ymm8_d L0x7fffffffbbba;
mov ymm8_e L0x7fffffffbbbc;
mov ymm8_f L0x7fffffffbbbe;
(* vmovdqa 0xa0(%rsi),%ymm9                        #! EA = L0x7fffffffbbc0; Value = 0xf813fc9f0d9e0efd; PC = 0x555555558a79 *)
mov ymm9_0 L0x7fffffffbbc0;
mov ymm9_1 L0x7fffffffbbc2;
mov ymm9_2 L0x7fffffffbbc4;
mov ymm9_3 L0x7fffffffbbc6;
mov ymm9_4 L0x7fffffffbbc8;
mov ymm9_5 L0x7fffffffbbca;
mov ymm9_6 L0x7fffffffbbcc;
mov ymm9_7 L0x7fffffffbbce;
mov ymm9_8 L0x7fffffffbbd0;
mov ymm9_9 L0x7fffffffbbd2;
mov ymm9_a L0x7fffffffbbd4;
mov ymm9_b L0x7fffffffbbd6;
mov ymm9_c L0x7fffffffbbd8;
mov ymm9_d L0x7fffffffbbda;
mov ymm9_e L0x7fffffffbbdc;
mov ymm9_f L0x7fffffffbbde;
(* vmovdqa 0x120(%rdx),%ymm2                       #! EA = L0x555555560820; Value = 0x0ec10ec10ec10ec1; PC = 0x555555558a81 *)
mov ymm2_0 L0x555555560820;
mov ymm2_1 L0x555555560822;
mov ymm2_2 L0x555555560824;
mov ymm2_3 L0x555555560826;
mov ymm2_4 L0x555555560828;
mov ymm2_5 L0x55555556082a;
mov ymm2_6 L0x55555556082c;
mov ymm2_7 L0x55555556082e;
mov ymm2_8 L0x555555560830;
mov ymm2_9 L0x555555560832;
mov ymm2_a L0x555555560834;
mov ymm2_b L0x555555560836;
mov ymm2_c L0x555555560838;
mov ymm2_d L0x55555556083a;
mov ymm2_e L0x55555556083c;
mov ymm2_f L0x55555556083e;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x555555558a89 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm2,%ymm13,%ymm13                     #! PC = 0x555555558a8d *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm2_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm2_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm2_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm2_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm2_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm2_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm2_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm2_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm2_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm2_9;
smull mulH_a mulLymm13_a ymm13_a ymm2_a;
smull mulH_b mulLymm13_b ymm13_b ymm2_b;
smull mulH_c mulLymm13_c ymm13_c ymm2_c;
smull mulH_d mulLymm13_d ymm13_d ymm2_d;
smull mulH_e mulLymm13_e ymm13_e ymm2_e;
smull mulH_f mulLymm13_f ymm13_f ymm2_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558a91 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x555555558a95 *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpaddw %ymm5,%ymm4,%ymm14                       #! PC = 0x555555558a99 *)
add ymm14_0 ymm4_0 ymm5_0;
add ymm14_1 ymm4_1 ymm5_1;
add ymm14_2 ymm4_2 ymm5_2;
add ymm14_3 ymm4_3 ymm5_3;
add ymm14_4 ymm4_4 ymm5_4;
add ymm14_5 ymm4_5 ymm5_5;
add ymm14_6 ymm4_6 ymm5_6;
add ymm14_7 ymm4_7 ymm5_7;
add ymm14_8 ymm4_8 ymm5_8;
add ymm14_9 ymm4_9 ymm5_9;
add ymm14_a ymm4_a ymm5_a;
add ymm14_b ymm4_b ymm5_b;
add ymm14_c ymm4_c ymm5_c;
add ymm14_d ymm4_d ymm5_d;
add ymm14_e ymm4_e ymm5_e;
add ymm14_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x555555558a9d *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm9,%ymm8,%ymm15                       #! PC = 0x555555558aa1 *)
add ymm15_0 ymm8_0 ymm9_0;
add ymm15_1 ymm8_1 ymm9_1;
add ymm15_2 ymm8_2 ymm9_2;
add ymm15_3 ymm8_3 ymm9_3;
add ymm15_4 ymm8_4 ymm9_4;
add ymm15_5 ymm8_5 ymm9_5;
add ymm15_6 ymm8_6 ymm9_6;
add ymm15_7 ymm8_7 ymm9_7;
add ymm15_8 ymm8_8 ymm9_8;
add ymm15_9 ymm8_9 ymm9_9;
add ymm15_a ymm8_a ymm9_a;
add ymm15_b ymm8_b ymm9_b;
add ymm15_c ymm8_c ymm9_c;
add ymm15_d ymm8_d ymm9_d;
add ymm15_e ymm8_e ymm9_e;
add ymm15_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x555555558aa6 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpsubw %ymm7,%ymm12,%ymm7                       #! PC = 0x555555558aab *)
sub ymm7_0 ymm12_0 ymm7_0;
sub ymm7_1 ymm12_1 ymm7_1;
sub ymm7_2 ymm12_2 ymm7_2;
sub ymm7_3 ymm12_3 ymm7_3;
sub ymm7_4 ymm12_4 ymm7_4;
sub ymm7_5 ymm12_5 ymm7_5;
sub ymm7_6 ymm12_6 ymm7_6;
sub ymm7_7 ymm12_7 ymm7_7;
sub ymm7_8 ymm12_8 ymm7_8;
sub ymm7_9 ymm12_9 ymm7_9;
sub ymm7_a ymm12_a ymm7_a;
sub ymm7_b ymm12_b ymm7_b;
sub ymm7_c ymm12_c ymm7_c;
sub ymm7_d ymm12_d ymm7_d;
sub ymm7_e ymm12_e ymm7_e;
sub ymm7_f ymm12_f ymm7_f;
(* vpsubw %ymm11,%ymm13,%ymm11                     #! PC = 0x555555558aaf *)
sub ymm11_0 ymm13_0 ymm11_0;
sub ymm11_1 ymm13_1 ymm11_1;
sub ymm11_2 ymm13_2 ymm11_2;
sub ymm11_3 ymm13_3 ymm11_3;
sub ymm11_4 ymm13_4 ymm11_4;
sub ymm11_5 ymm13_5 ymm11_5;
sub ymm11_6 ymm13_6 ymm11_6;
sub ymm11_7 ymm13_7 ymm11_7;
sub ymm11_8 ymm13_8 ymm11_8;
sub ymm11_9 ymm13_9 ymm11_9;
sub ymm11_a ymm13_a ymm11_a;
sub ymm11_b ymm13_b ymm11_b;
sub ymm11_c ymm13_c ymm11_c;
sub ymm11_d ymm13_d ymm11_d;
sub ymm11_e ymm13_e ymm11_e;
sub ymm11_f ymm13_f ymm11_f;

ecut and [
eqmod (2*c00)
(ymm4_0*(x**0) + ymm5_0*(x**1))
[7681, x - 2044],
eqmod (2*c01)
(ymm4_0*(x**0) + ymm5_0*(x**1))
[7681, x - 5637]];


(* vpaddw %ymm6,%ymm14,%ymm4                       #! PC = 0x555555558ab4 *)
add ymm4_0 ymm14_0 ymm6_0;
add ymm4_1 ymm14_1 ymm6_1;
add ymm4_2 ymm14_2 ymm6_2;
add ymm4_3 ymm14_3 ymm6_3;
add ymm4_4 ymm14_4 ymm6_4;
add ymm4_5 ymm14_5 ymm6_5;
add ymm4_6 ymm14_6 ymm6_6;
add ymm4_7 ymm14_7 ymm6_7;
add ymm4_8 ymm14_8 ymm6_8;
add ymm4_9 ymm14_9 ymm6_9;
add ymm4_a ymm14_a ymm6_a;
add ymm4_b ymm14_b ymm6_b;
add ymm4_c ymm14_c ymm6_c;
add ymm4_d ymm14_d ymm6_d;
add ymm4_e ymm14_e ymm6_e;
add ymm4_f ymm14_f ymm6_f;
(* vpsubw %ymm6,%ymm14,%ymm6                       #! PC = 0x555555558ab8 *)
sub ymm6_0 ymm14_0 ymm6_0;
sub ymm6_1 ymm14_1 ymm6_1;
sub ymm6_2 ymm14_2 ymm6_2;
sub ymm6_3 ymm14_3 ymm6_3;
sub ymm6_4 ymm14_4 ymm6_4;
sub ymm6_5 ymm14_5 ymm6_5;
sub ymm6_6 ymm14_6 ymm6_6;
sub ymm6_7 ymm14_7 ymm6_7;
sub ymm6_8 ymm14_8 ymm6_8;
sub ymm6_9 ymm14_9 ymm6_9;
sub ymm6_a ymm14_a ymm6_a;
sub ymm6_b ymm14_b ymm6_b;
sub ymm6_c ymm14_c ymm6_c;
sub ymm6_d ymm14_d ymm6_d;
sub ymm6_e ymm14_e ymm6_e;
sub ymm6_f ymm14_f ymm6_f;
(* vpaddw %ymm7,%ymm5,%ymm12                       #! PC = 0x555555558abc *)
add ymm12_0 ymm5_0 ymm7_0;
add ymm12_1 ymm5_1 ymm7_1;
add ymm12_2 ymm5_2 ymm7_2;
add ymm12_3 ymm5_3 ymm7_3;
add ymm12_4 ymm5_4 ymm7_4;
add ymm12_5 ymm5_5 ymm7_5;
add ymm12_6 ymm5_6 ymm7_6;
add ymm12_7 ymm5_7 ymm7_7;
add ymm12_8 ymm5_8 ymm7_8;
add ymm12_9 ymm5_9 ymm7_9;
add ymm12_a ymm5_a ymm7_a;
add ymm12_b ymm5_b ymm7_b;
add ymm12_c ymm5_c ymm7_c;
add ymm12_d ymm5_d ymm7_d;
add ymm12_e ymm5_e ymm7_e;
add ymm12_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x555555558ac0 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm10,%ymm15,%ymm8                      #! PC = 0x555555558ac4 *)
add ymm8_0 ymm15_0 ymm10_0;
add ymm8_1 ymm15_1 ymm10_1;
add ymm8_2 ymm15_2 ymm10_2;
add ymm8_3 ymm15_3 ymm10_3;
add ymm8_4 ymm15_4 ymm10_4;
add ymm8_5 ymm15_5 ymm10_5;
add ymm8_6 ymm15_6 ymm10_6;
add ymm8_7 ymm15_7 ymm10_7;
add ymm8_8 ymm15_8 ymm10_8;
add ymm8_9 ymm15_9 ymm10_9;
add ymm8_a ymm15_a ymm10_a;
add ymm8_b ymm15_b ymm10_b;
add ymm8_c ymm15_c ymm10_c;
add ymm8_d ymm15_d ymm10_d;
add ymm8_e ymm15_e ymm10_e;
add ymm8_f ymm15_f ymm10_f;
(* vpsubw %ymm10,%ymm15,%ymm10                     #! PC = 0x555555558ac9 *)
sub ymm10_0 ymm15_0 ymm10_0;
sub ymm10_1 ymm15_1 ymm10_1;
sub ymm10_2 ymm15_2 ymm10_2;
sub ymm10_3 ymm15_3 ymm10_3;
sub ymm10_4 ymm15_4 ymm10_4;
sub ymm10_5 ymm15_5 ymm10_5;
sub ymm10_6 ymm15_6 ymm10_6;
sub ymm10_7 ymm15_7 ymm10_7;
sub ymm10_8 ymm15_8 ymm10_8;
sub ymm10_9 ymm15_9 ymm10_9;
sub ymm10_a ymm15_a ymm10_a;
sub ymm10_b ymm15_b ymm10_b;
sub ymm10_c ymm15_c ymm10_c;
sub ymm10_d ymm15_d ymm10_d;
sub ymm10_e ymm15_e ymm10_e;
sub ymm10_f ymm15_f ymm10_f;
(* vpaddw %ymm11,%ymm9,%ymm13                      #! PC = 0x555555558ace *)
add ymm13_0 ymm9_0 ymm11_0;
add ymm13_1 ymm9_1 ymm11_1;
add ymm13_2 ymm9_2 ymm11_2;
add ymm13_3 ymm9_3 ymm11_3;
add ymm13_4 ymm9_4 ymm11_4;
add ymm13_5 ymm9_5 ymm11_5;
add ymm13_6 ymm9_6 ymm11_6;
add ymm13_7 ymm9_7 ymm11_7;
add ymm13_8 ymm9_8 ymm11_8;
add ymm13_9 ymm9_9 ymm11_9;
add ymm13_a ymm9_a ymm11_a;
add ymm13_b ymm9_b ymm11_b;
add ymm13_c ymm9_c ymm11_c;
add ymm13_d ymm9_d ymm11_d;
add ymm13_e ymm9_e ymm11_e;
add ymm13_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x555555558ad3 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpslld $0x10,%ymm12,%ymm14                      #! PC = 0x555555558ad8 *)
mov slld_0 0@sint16;
mov slld_1 ymm12_0;
mov slld_2 0@sint16;
mov slld_3 ymm12_2;
mov slld_4 0@sint16;
mov slld_5 ymm12_4;
mov slld_6 0@sint16;
mov slld_7 ymm12_6;
mov slld_8 0@sint16;
mov slld_9 ymm12_8;
mov slld_a 0@sint16;
mov slld_b ymm12_a;
mov slld_c 0@sint16;
mov slld_d ymm12_c;
mov slld_e 0@sint16;
mov slld_f ymm12_e;
mov ymm14_0 slld_0;
mov ymm14_1 slld_1;
mov ymm14_2 slld_2;
mov ymm14_3 slld_3;
mov ymm14_4 slld_4;
mov ymm14_5 slld_5;
mov ymm14_6 slld_6;
mov ymm14_7 slld_7;
mov ymm14_8 slld_8;
mov ymm14_9 slld_9;
mov ymm14_a slld_a;
mov ymm14_b slld_b;
mov ymm14_c slld_c;
mov ymm14_d slld_d;
mov ymm14_e slld_e;
mov ymm14_f slld_f;
(* vpblendw $0xaa,%ymm14,%ymm4,%ymm14              #! PC = 0x555555558ade *)
mov bldw_0 ymm4_0;
mov bldw_1 ymm14_1;
mov bldw_2 ymm4_2;
mov bldw_3 ymm14_3;
mov bldw_4 ymm4_4;
mov bldw_5 ymm14_5;
mov bldw_6 ymm4_6;
mov bldw_7 ymm14_7;
mov bldw_8 ymm4_8;
mov bldw_9 ymm14_9;
mov bldw_a ymm4_a;
mov bldw_b ymm14_b;
mov bldw_c ymm4_c;
mov bldw_d ymm14_d;
mov bldw_e ymm4_e;
mov bldw_f ymm14_f;
mov ymm14_0 bldw_0;
mov ymm14_1 bldw_1;
mov ymm14_2 bldw_2;
mov ymm14_3 bldw_3;
mov ymm14_4 bldw_4;
mov ymm14_5 bldw_5;
mov ymm14_6 bldw_6;
mov ymm14_7 bldw_7;
mov ymm14_8 bldw_8;
mov ymm14_9 bldw_9;
mov ymm14_a bldw_a;
mov ymm14_b bldw_b;
mov ymm14_c bldw_c;
mov ymm14_d bldw_d;
mov ymm14_e bldw_e;
mov ymm14_f bldw_f;
(* vpsrld $0x10,%ymm4,%ymm4                        #! PC = 0x555555558ae4 *)
mov srld_0 ymm4_1;
mov srld_1 0@sint16;
mov srld_2 ymm4_3;
mov srld_3 0@sint16;
mov srld_4 ymm4_5;
mov srld_5 0@sint16;
mov srld_6 ymm4_7;
mov srld_7 0@sint16;
mov srld_8 ymm4_9;
mov srld_9 0@sint16;
mov srld_a ymm4_b;
mov srld_b 0@sint16;
mov srld_c ymm4_d;
mov srld_d 0@sint16;
mov srld_e ymm4_f;
mov srld_f 0@sint16;
mov ymm4_0 srld_0;
mov ymm4_1 srld_1;
mov ymm4_2 srld_2;
mov ymm4_3 srld_3;
mov ymm4_4 srld_4;
mov ymm4_5 srld_5;
mov ymm4_6 srld_6;
mov ymm4_7 srld_7;
mov ymm4_8 srld_8;
mov ymm4_9 srld_9;
mov ymm4_a srld_a;
mov ymm4_b srld_b;
mov ymm4_c srld_c;
mov ymm4_d srld_d;
mov ymm4_e srld_e;
mov ymm4_f srld_f;
(* vpblendw $0xaa,%ymm12,%ymm4,%ymm15              #! PC = 0x555555558ae9 *)
mov bldw_0 ymm4_0;
mov bldw_1 ymm12_1;
mov bldw_2 ymm4_2;
mov bldw_3 ymm12_3;
mov bldw_4 ymm4_4;
mov bldw_5 ymm12_5;
mov bldw_6 ymm4_6;
mov bldw_7 ymm12_7;
mov bldw_8 ymm4_8;
mov bldw_9 ymm12_9;
mov bldw_a ymm4_a;
mov bldw_b ymm12_b;
mov bldw_c ymm4_c;
mov bldw_d ymm12_d;
mov bldw_e ymm4_e;
mov bldw_f ymm12_f;
mov ymm15_0 bldw_0;
mov ymm15_1 bldw_1;
mov ymm15_2 bldw_2;
mov ymm15_3 bldw_3;
mov ymm15_4 bldw_4;
mov ymm15_5 bldw_5;
mov ymm15_6 bldw_6;
mov ymm15_7 bldw_7;
mov ymm15_8 bldw_8;
mov ymm15_9 bldw_9;
mov ymm15_a bldw_a;
mov ymm15_b bldw_b;
mov ymm15_c bldw_c;
mov ymm15_d bldw_d;
mov ymm15_e bldw_e;
mov ymm15_f bldw_f;
(* vpslld $0x10,%ymm7,%ymm5                        #! PC = 0x555555558aef *)
mov slld_0 0@sint16;
mov slld_1 ymm7_0;
mov slld_2 0@sint16;
mov slld_3 ymm7_2;
mov slld_4 0@sint16;
mov slld_5 ymm7_4;
mov slld_6 0@sint16;
mov slld_7 ymm7_6;
mov slld_8 0@sint16;
mov slld_9 ymm7_8;
mov slld_a 0@sint16;
mov slld_b ymm7_a;
mov slld_c 0@sint16;
mov slld_d ymm7_c;
mov slld_e 0@sint16;
mov slld_f ymm7_e;
mov ymm5_0 slld_0;
mov ymm5_1 slld_1;
mov ymm5_2 slld_2;
mov ymm5_3 slld_3;
mov ymm5_4 slld_4;
mov ymm5_5 slld_5;
mov ymm5_6 slld_6;
mov ymm5_7 slld_7;
mov ymm5_8 slld_8;
mov ymm5_9 slld_9;
mov ymm5_a slld_a;
mov ymm5_b slld_b;
mov ymm5_c slld_c;
mov ymm5_d slld_d;
mov ymm5_e slld_e;
mov ymm5_f slld_f;
(* vpblendw $0xaa,%ymm5,%ymm6,%ymm5                #! PC = 0x555555558af4 *)
mov bldw_0 ymm6_0;
mov bldw_1 ymm5_1;
mov bldw_2 ymm6_2;
mov bldw_3 ymm5_3;
mov bldw_4 ymm6_4;
mov bldw_5 ymm5_5;
mov bldw_6 ymm6_6;
mov bldw_7 ymm5_7;
mov bldw_8 ymm6_8;
mov bldw_9 ymm5_9;
mov bldw_a ymm6_a;
mov bldw_b ymm5_b;
mov bldw_c ymm6_c;
mov bldw_d ymm5_d;
mov bldw_e ymm6_e;
mov bldw_f ymm5_f;
mov ymm5_0 bldw_0;
mov ymm5_1 bldw_1;
mov ymm5_2 bldw_2;
mov ymm5_3 bldw_3;
mov ymm5_4 bldw_4;
mov ymm5_5 bldw_5;
mov ymm5_6 bldw_6;
mov ymm5_7 bldw_7;
mov ymm5_8 bldw_8;
mov ymm5_9 bldw_9;
mov ymm5_a bldw_a;
mov ymm5_b bldw_b;
mov ymm5_c bldw_c;
mov ymm5_d bldw_d;
mov ymm5_e bldw_e;
mov ymm5_f bldw_f;
(* vpsrld $0x10,%ymm6,%ymm6                        #! PC = 0x555555558afa *)
mov srld_0 ymm6_1;
mov srld_1 0@sint16;
mov srld_2 ymm6_3;
mov srld_3 0@sint16;
mov srld_4 ymm6_5;
mov srld_5 0@sint16;
mov srld_6 ymm6_7;
mov srld_7 0@sint16;
mov srld_8 ymm6_9;
mov srld_9 0@sint16;
mov srld_a ymm6_b;
mov srld_b 0@sint16;
mov srld_c ymm6_d;
mov srld_d 0@sint16;
mov srld_e ymm6_f;
mov srld_f 0@sint16;
mov ymm6_0 srld_0;
mov ymm6_1 srld_1;
mov ymm6_2 srld_2;
mov ymm6_3 srld_3;
mov ymm6_4 srld_4;
mov ymm6_5 srld_5;
mov ymm6_6 srld_6;
mov ymm6_7 srld_7;
mov ymm6_8 srld_8;
mov ymm6_9 srld_9;
mov ymm6_a srld_a;
mov ymm6_b srld_b;
mov ymm6_c srld_c;
mov ymm6_d srld_d;
mov ymm6_e srld_e;
mov ymm6_f srld_f;
(* vpblendw $0xaa,%ymm7,%ymm6,%ymm9                #! PC = 0x555555558aff *)
mov bldw_0 ymm6_0;
mov bldw_1 ymm7_1;
mov bldw_2 ymm6_2;
mov bldw_3 ymm7_3;
mov bldw_4 ymm6_4;
mov bldw_5 ymm7_5;
mov bldw_6 ymm6_6;
mov bldw_7 ymm7_7;
mov bldw_8 ymm6_8;
mov bldw_9 ymm7_9;
mov bldw_a ymm6_a;
mov bldw_b ymm7_b;
mov bldw_c ymm6_c;
mov bldw_d ymm7_d;
mov bldw_e ymm6_e;
mov bldw_f ymm7_f;
mov ymm9_0 bldw_0;
mov ymm9_1 bldw_1;
mov ymm9_2 bldw_2;
mov ymm9_3 bldw_3;
mov ymm9_4 bldw_4;
mov ymm9_5 bldw_5;
mov ymm9_6 bldw_6;
mov ymm9_7 bldw_7;
mov ymm9_8 bldw_8;
mov ymm9_9 bldw_9;
mov ymm9_a bldw_a;
mov ymm9_b bldw_b;
mov ymm9_c bldw_c;
mov ymm9_d bldw_d;
mov ymm9_e bldw_e;
mov ymm9_f bldw_f;
(* vpslld $0x10,%ymm13,%ymm6                       #! PC = 0x555555558b05 *)
mov slld_0 0@sint16;
mov slld_1 ymm13_0;
mov slld_2 0@sint16;
mov slld_3 ymm13_2;
mov slld_4 0@sint16;
mov slld_5 ymm13_4;
mov slld_6 0@sint16;
mov slld_7 ymm13_6;
mov slld_8 0@sint16;
mov slld_9 ymm13_8;
mov slld_a 0@sint16;
mov slld_b ymm13_a;
mov slld_c 0@sint16;
mov slld_d ymm13_c;
mov slld_e 0@sint16;
mov slld_f ymm13_e;
mov ymm6_0 slld_0;
mov ymm6_1 slld_1;
mov ymm6_2 slld_2;
mov ymm6_3 slld_3;
mov ymm6_4 slld_4;
mov ymm6_5 slld_5;
mov ymm6_6 slld_6;
mov ymm6_7 slld_7;
mov ymm6_8 slld_8;
mov ymm6_9 slld_9;
mov ymm6_a slld_a;
mov ymm6_b slld_b;
mov ymm6_c slld_c;
mov ymm6_d slld_d;
mov ymm6_e slld_e;
mov ymm6_f slld_f;
(* vpblendw $0xaa,%ymm6,%ymm8,%ymm6                #! PC = 0x555555558b0b *)
mov bldw_0 ymm8_0;
mov bldw_1 ymm6_1;
mov bldw_2 ymm8_2;
mov bldw_3 ymm6_3;
mov bldw_4 ymm8_4;
mov bldw_5 ymm6_5;
mov bldw_6 ymm8_6;
mov bldw_7 ymm6_7;
mov bldw_8 ymm8_8;
mov bldw_9 ymm6_9;
mov bldw_a ymm8_a;
mov bldw_b ymm6_b;
mov bldw_c ymm8_c;
mov bldw_d ymm6_d;
mov bldw_e ymm8_e;
mov bldw_f ymm6_f;
mov ymm6_0 bldw_0;
mov ymm6_1 bldw_1;
mov ymm6_2 bldw_2;
mov ymm6_3 bldw_3;
mov ymm6_4 bldw_4;
mov ymm6_5 bldw_5;
mov ymm6_6 bldw_6;
mov ymm6_7 bldw_7;
mov ymm6_8 bldw_8;
mov ymm6_9 bldw_9;
mov ymm6_a bldw_a;
mov ymm6_b bldw_b;
mov ymm6_c bldw_c;
mov ymm6_d bldw_d;
mov ymm6_e bldw_e;
mov ymm6_f bldw_f;
(* vpsrld $0x10,%ymm8,%ymm8                        #! PC = 0x555555558b11 *)
mov srld_0 ymm8_1;
mov srld_1 0@sint16;
mov srld_2 ymm8_3;
mov srld_3 0@sint16;
mov srld_4 ymm8_5;
mov srld_5 0@sint16;
mov srld_6 ymm8_7;
mov srld_7 0@sint16;
mov srld_8 ymm8_9;
mov srld_9 0@sint16;
mov srld_a ymm8_b;
mov srld_b 0@sint16;
mov srld_c ymm8_d;
mov srld_d 0@sint16;
mov srld_e ymm8_f;
mov srld_f 0@sint16;
mov ymm8_0 srld_0;
mov ymm8_1 srld_1;
mov ymm8_2 srld_2;
mov ymm8_3 srld_3;
mov ymm8_4 srld_4;
mov ymm8_5 srld_5;
mov ymm8_6 srld_6;
mov ymm8_7 srld_7;
mov ymm8_8 srld_8;
mov ymm8_9 srld_9;
mov ymm8_a srld_a;
mov ymm8_b srld_b;
mov ymm8_c srld_c;
mov ymm8_d srld_d;
mov ymm8_e srld_e;
mov ymm8_f srld_f;
(* vpblendw $0xaa,%ymm13,%ymm8,%ymm12              #! PC = 0x555555558b17 *)
mov bldw_0 ymm8_0;
mov bldw_1 ymm13_1;
mov bldw_2 ymm8_2;
mov bldw_3 ymm13_3;
mov bldw_4 ymm8_4;
mov bldw_5 ymm13_5;
mov bldw_6 ymm8_6;
mov bldw_7 ymm13_7;
mov bldw_8 ymm8_8;
mov bldw_9 ymm13_9;
mov bldw_a ymm8_a;
mov bldw_b ymm13_b;
mov bldw_c ymm8_c;
mov bldw_d ymm13_d;
mov bldw_e ymm8_e;
mov bldw_f ymm13_f;
mov ymm12_0 bldw_0;
mov ymm12_1 bldw_1;
mov ymm12_2 bldw_2;
mov ymm12_3 bldw_3;
mov ymm12_4 bldw_4;
mov ymm12_5 bldw_5;
mov ymm12_6 bldw_6;
mov ymm12_7 bldw_7;
mov ymm12_8 bldw_8;
mov ymm12_9 bldw_9;
mov ymm12_a bldw_a;
mov ymm12_b bldw_b;
mov ymm12_c bldw_c;
mov ymm12_d bldw_d;
mov ymm12_e bldw_e;
mov ymm12_f bldw_f;
(* vpslld $0x10,%ymm11,%ymm7                       #! PC = 0x555555558b1d *)
mov slld_0 0@sint16;
mov slld_1 ymm11_0;
mov slld_2 0@sint16;
mov slld_3 ymm11_2;
mov slld_4 0@sint16;
mov slld_5 ymm11_4;
mov slld_6 0@sint16;
mov slld_7 ymm11_6;
mov slld_8 0@sint16;
mov slld_9 ymm11_8;
mov slld_a 0@sint16;
mov slld_b ymm11_a;
mov slld_c 0@sint16;
mov slld_d ymm11_c;
mov slld_e 0@sint16;
mov slld_f ymm11_e;
mov ymm7_0 slld_0;
mov ymm7_1 slld_1;
mov ymm7_2 slld_2;
mov ymm7_3 slld_3;
mov ymm7_4 slld_4;
mov ymm7_5 slld_5;
mov ymm7_6 slld_6;
mov ymm7_7 slld_7;
mov ymm7_8 slld_8;
mov ymm7_9 slld_9;
mov ymm7_a slld_a;
mov ymm7_b slld_b;
mov ymm7_c slld_c;
mov ymm7_d slld_d;
mov ymm7_e slld_e;
mov ymm7_f slld_f;
(* vpblendw $0xaa,%ymm7,%ymm10,%ymm7               #! PC = 0x555555558b23 *)
mov bldw_0 ymm10_0;
mov bldw_1 ymm7_1;
mov bldw_2 ymm10_2;
mov bldw_3 ymm7_3;
mov bldw_4 ymm10_4;
mov bldw_5 ymm7_5;
mov bldw_6 ymm10_6;
mov bldw_7 ymm7_7;
mov bldw_8 ymm10_8;
mov bldw_9 ymm7_9;
mov bldw_a ymm10_a;
mov bldw_b ymm7_b;
mov bldw_c ymm10_c;
mov bldw_d ymm7_d;
mov bldw_e ymm10_e;
mov bldw_f ymm7_f;
mov ymm7_0 bldw_0;
mov ymm7_1 bldw_1;
mov ymm7_2 bldw_2;
mov ymm7_3 bldw_3;
mov ymm7_4 bldw_4;
mov ymm7_5 bldw_5;
mov ymm7_6 bldw_6;
mov ymm7_7 bldw_7;
mov ymm7_8 bldw_8;
mov ymm7_9 bldw_9;
mov ymm7_a bldw_a;
mov ymm7_b bldw_b;
mov ymm7_c bldw_c;
mov ymm7_d bldw_d;
mov ymm7_e bldw_e;
mov ymm7_f bldw_f;
(* vpsrld $0x10,%ymm10,%ymm10                      #! PC = 0x555555558b29 *)
mov srld_0 ymm10_1;
mov srld_1 0@sint16;
mov srld_2 ymm10_3;
mov srld_3 0@sint16;
mov srld_4 ymm10_5;
mov srld_5 0@sint16;
mov srld_6 ymm10_7;
mov srld_7 0@sint16;
mov srld_8 ymm10_9;
mov srld_9 0@sint16;
mov srld_a ymm10_b;
mov srld_b 0@sint16;
mov srld_c ymm10_d;
mov srld_d 0@sint16;
mov srld_e ymm10_f;
mov srld_f 0@sint16;
mov ymm10_0 srld_0;
mov ymm10_1 srld_1;
mov ymm10_2 srld_2;
mov ymm10_3 srld_3;
mov ymm10_4 srld_4;
mov ymm10_5 srld_5;
mov ymm10_6 srld_6;
mov ymm10_7 srld_7;
mov ymm10_8 srld_8;
mov ymm10_9 srld_9;
mov ymm10_a srld_a;
mov ymm10_b srld_b;
mov ymm10_c srld_c;
mov ymm10_d srld_d;
mov ymm10_e srld_e;
mov ymm10_f srld_f;
(* vpblendw $0xaa,%ymm11,%ymm10,%ymm11             #! PC = 0x555555558b2f *)
mov bldw_0 ymm10_0;
mov bldw_1 ymm11_1;
mov bldw_2 ymm10_2;
mov bldw_3 ymm11_3;
mov bldw_4 ymm10_4;
mov bldw_5 ymm11_5;
mov bldw_6 ymm10_6;
mov bldw_7 ymm11_7;
mov bldw_8 ymm10_8;
mov bldw_9 ymm11_9;
mov bldw_a ymm10_a;
mov bldw_b ymm11_b;
mov bldw_c ymm10_c;
mov bldw_d ymm11_d;
mov bldw_e ymm10_e;
mov bldw_f ymm11_f;
mov ymm11_0 bldw_0;
mov ymm11_1 bldw_1;
mov ymm11_2 bldw_2;
mov ymm11_3 bldw_3;
mov ymm11_4 bldw_4;
mov ymm11_5 bldw_5;
mov ymm11_6 bldw_6;
mov ymm11_7 bldw_7;
mov ymm11_8 bldw_8;
mov ymm11_9 bldw_9;
mov ymm11_a bldw_a;
mov ymm11_b bldw_b;
mov ymm11_c bldw_c;
mov ymm11_d bldw_d;
mov ymm11_e bldw_e;
mov ymm11_f bldw_f;
(* vmovsldup %ymm5,%ymm4                           #! PC = 0x555555558b35 *)
mov ymm4_0 ymm5_0;
mov ymm4_1 ymm5_1;
mov ymm4_2 ymm5_0;
mov ymm4_3 ymm5_1;
mov ymm4_4 ymm5_4;
mov ymm4_5 ymm5_5;
mov ymm4_6 ymm5_4;
mov ymm4_7 ymm5_5;
mov ymm4_8 ymm5_8;
mov ymm4_9 ymm5_9;
mov ymm4_a ymm5_8;
mov ymm4_b ymm5_9;
mov ymm4_c ymm5_c;
mov ymm4_d ymm5_d;
mov ymm4_e ymm5_c;
mov ymm4_f ymm5_d;
(* vpblendd $0xaa,%ymm4,%ymm14,%ymm4               #! PC = 0x555555558b39 *)
mov bldd_0 ymm14_0;
mov bldd_1 ymm14_1;
mov bldd_2 ymm4_2;
mov bldd_3 ymm4_3;
mov bldd_4 ymm14_4;
mov bldd_5 ymm14_5;
mov bldd_6 ymm4_6;
mov bldd_7 ymm4_7;
mov bldd_8 ymm14_8;
mov bldd_9 ymm14_9;
mov bldd_a ymm4_a;
mov bldd_b ymm4_b;
mov bldd_c ymm14_c;
mov bldd_d ymm14_d;
mov bldd_e ymm4_e;
mov bldd_f ymm4_f;
mov ymm4_0 bldd_0;
mov ymm4_1 bldd_1;
mov ymm4_2 bldd_2;
mov ymm4_3 bldd_3;
mov ymm4_4 bldd_4;
mov ymm4_5 bldd_5;
mov ymm4_6 bldd_6;
mov ymm4_7 bldd_7;
mov ymm4_8 bldd_8;
mov ymm4_9 bldd_9;
mov ymm4_a bldd_a;
mov ymm4_b bldd_b;
mov ymm4_c bldd_c;
mov ymm4_d bldd_d;
mov ymm4_e bldd_e;
mov ymm4_f bldd_f;
(* vpsrlq $0x20,%ymm14,%ymm14                      #! PC = 0x555555558b3f *)
mov srlq_0 ymm14_2;
mov srlq_1 ymm14_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm14_6;
mov srlq_5 ymm14_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm14_a;
mov srlq_9 ymm14_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm14_e;
mov srlq_d ymm14_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm14_0 srlq_0;
mov ymm14_1 srlq_1;
mov ymm14_2 srlq_2;
mov ymm14_3 srlq_3;
mov ymm14_4 srlq_4;
mov ymm14_5 srlq_5;
mov ymm14_6 srlq_6;
mov ymm14_7 srlq_7;
mov ymm14_8 srlq_8;
mov ymm14_9 srlq_9;
mov ymm14_a srlq_a;
mov ymm14_b srlq_b;
mov ymm14_c srlq_c;
mov ymm14_d srlq_d;
mov ymm14_e srlq_e;
mov ymm14_f srlq_f;
(* vpblendd $0xaa,%ymm5,%ymm14,%ymm8               #! PC = 0x555555558b45 *)
mov bldd_0 ymm14_0;
mov bldd_1 ymm14_1;
mov bldd_2 ymm5_2;
mov bldd_3 ymm5_3;
mov bldd_4 ymm14_4;
mov bldd_5 ymm14_5;
mov bldd_6 ymm5_6;
mov bldd_7 ymm5_7;
mov bldd_8 ymm14_8;
mov bldd_9 ymm14_9;
mov bldd_a ymm5_a;
mov bldd_b ymm5_b;
mov bldd_c ymm14_c;
mov bldd_d ymm14_d;
mov bldd_e ymm5_e;
mov bldd_f ymm5_f;
mov ymm8_0 bldd_0;
mov ymm8_1 bldd_1;
mov ymm8_2 bldd_2;
mov ymm8_3 bldd_3;
mov ymm8_4 bldd_4;
mov ymm8_5 bldd_5;
mov ymm8_6 bldd_6;
mov ymm8_7 bldd_7;
mov ymm8_8 bldd_8;
mov ymm8_9 bldd_9;
mov ymm8_a bldd_a;
mov ymm8_b bldd_b;
mov ymm8_c bldd_c;
mov ymm8_d bldd_d;
mov ymm8_e bldd_e;
mov ymm8_f bldd_f;
(* vmovsldup %ymm7,%ymm5                           #! PC = 0x555555558b4b *)
mov ymm5_0 ymm7_0;
mov ymm5_1 ymm7_1;
mov ymm5_2 ymm7_0;
mov ymm5_3 ymm7_1;
mov ymm5_4 ymm7_4;
mov ymm5_5 ymm7_5;
mov ymm5_6 ymm7_4;
mov ymm5_7 ymm7_5;
mov ymm5_8 ymm7_8;
mov ymm5_9 ymm7_9;
mov ymm5_a ymm7_8;
mov ymm5_b ymm7_9;
mov ymm5_c ymm7_c;
mov ymm5_d ymm7_d;
mov ymm5_e ymm7_c;
mov ymm5_f ymm7_d;
(* vpblendd $0xaa,%ymm5,%ymm6,%ymm5                #! PC = 0x555555558b4f *)
mov bldd_0 ymm6_0;
mov bldd_1 ymm6_1;
mov bldd_2 ymm5_2;
mov bldd_3 ymm5_3;
mov bldd_4 ymm6_4;
mov bldd_5 ymm6_5;
mov bldd_6 ymm5_6;
mov bldd_7 ymm5_7;
mov bldd_8 ymm6_8;
mov bldd_9 ymm6_9;
mov bldd_a ymm5_a;
mov bldd_b ymm5_b;
mov bldd_c ymm6_c;
mov bldd_d ymm6_d;
mov bldd_e ymm5_e;
mov bldd_f ymm5_f;
mov ymm5_0 bldd_0;
mov ymm5_1 bldd_1;
mov ymm5_2 bldd_2;
mov ymm5_3 bldd_3;
mov ymm5_4 bldd_4;
mov ymm5_5 bldd_5;
mov ymm5_6 bldd_6;
mov ymm5_7 bldd_7;
mov ymm5_8 bldd_8;
mov ymm5_9 bldd_9;
mov ymm5_a bldd_a;
mov ymm5_b bldd_b;
mov ymm5_c bldd_c;
mov ymm5_d bldd_d;
mov ymm5_e bldd_e;
mov ymm5_f bldd_f;
(* vpsrlq $0x20,%ymm6,%ymm6                        #! PC = 0x555555558b55 *)
mov srlq_0 ymm6_2;
mov srlq_1 ymm6_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm6_6;
mov srlq_5 ymm6_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm6_a;
mov srlq_9 ymm6_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm6_e;
mov srlq_d ymm6_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm6_0 srlq_0;
mov ymm6_1 srlq_1;
mov ymm6_2 srlq_2;
mov ymm6_3 srlq_3;
mov ymm6_4 srlq_4;
mov ymm6_5 srlq_5;
mov ymm6_6 srlq_6;
mov ymm6_7 srlq_7;
mov ymm6_8 srlq_8;
mov ymm6_9 srlq_9;
mov ymm6_a srlq_a;
mov ymm6_b srlq_b;
mov ymm6_c srlq_c;
mov ymm6_d srlq_d;
mov ymm6_e srlq_e;
mov ymm6_f srlq_f;
(* vpblendd $0xaa,%ymm7,%ymm6,%ymm13               #! PC = 0x555555558b5a *)
mov bldd_0 ymm6_0;
mov bldd_1 ymm6_1;
mov bldd_2 ymm7_2;
mov bldd_3 ymm7_3;
mov bldd_4 ymm6_4;
mov bldd_5 ymm6_5;
mov bldd_6 ymm7_6;
mov bldd_7 ymm7_7;
mov bldd_8 ymm6_8;
mov bldd_9 ymm6_9;
mov bldd_a ymm7_a;
mov bldd_b ymm7_b;
mov bldd_c ymm6_c;
mov bldd_d ymm6_d;
mov bldd_e ymm7_e;
mov bldd_f ymm7_f;
mov ymm13_0 bldd_0;
mov ymm13_1 bldd_1;
mov ymm13_2 bldd_2;
mov ymm13_3 bldd_3;
mov ymm13_4 bldd_4;
mov ymm13_5 bldd_5;
mov ymm13_6 bldd_6;
mov ymm13_7 bldd_7;
mov ymm13_8 bldd_8;
mov ymm13_9 bldd_9;
mov ymm13_a bldd_a;
mov ymm13_b bldd_b;
mov ymm13_c bldd_c;
mov ymm13_d bldd_d;
mov ymm13_e bldd_e;
mov ymm13_f bldd_f;
(* vmovsldup %ymm9,%ymm6                           #! PC = 0x555555558b60 *)
mov ymm6_0 ymm9_0;
mov ymm6_1 ymm9_1;
mov ymm6_2 ymm9_0;
mov ymm6_3 ymm9_1;
mov ymm6_4 ymm9_4;
mov ymm6_5 ymm9_5;
mov ymm6_6 ymm9_4;
mov ymm6_7 ymm9_5;
mov ymm6_8 ymm9_8;
mov ymm6_9 ymm9_9;
mov ymm6_a ymm9_8;
mov ymm6_b ymm9_9;
mov ymm6_c ymm9_c;
mov ymm6_d ymm9_d;
mov ymm6_e ymm9_c;
mov ymm6_f ymm9_d;
(* vpblendd $0xaa,%ymm6,%ymm15,%ymm6               #! PC = 0x555555558b65 *)
mov bldd_0 ymm15_0;
mov bldd_1 ymm15_1;
mov bldd_2 ymm6_2;
mov bldd_3 ymm6_3;
mov bldd_4 ymm15_4;
mov bldd_5 ymm15_5;
mov bldd_6 ymm6_6;
mov bldd_7 ymm6_7;
mov bldd_8 ymm15_8;
mov bldd_9 ymm15_9;
mov bldd_a ymm6_a;
mov bldd_b ymm6_b;
mov bldd_c ymm15_c;
mov bldd_d ymm15_d;
mov bldd_e ymm6_e;
mov bldd_f ymm6_f;
mov ymm6_0 bldd_0;
mov ymm6_1 bldd_1;
mov ymm6_2 bldd_2;
mov ymm6_3 bldd_3;
mov ymm6_4 bldd_4;
mov ymm6_5 bldd_5;
mov ymm6_6 bldd_6;
mov ymm6_7 bldd_7;
mov ymm6_8 bldd_8;
mov ymm6_9 bldd_9;
mov ymm6_a bldd_a;
mov ymm6_b bldd_b;
mov ymm6_c bldd_c;
mov ymm6_d bldd_d;
mov ymm6_e bldd_e;
mov ymm6_f bldd_f;
(* vpsrlq $0x20,%ymm15,%ymm15                      #! PC = 0x555555558b6b *)
mov srlq_0 ymm15_2;
mov srlq_1 ymm15_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm15_6;
mov srlq_5 ymm15_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm15_a;
mov srlq_9 ymm15_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm15_e;
mov srlq_d ymm15_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm15_0 srlq_0;
mov ymm15_1 srlq_1;
mov ymm15_2 srlq_2;
mov ymm15_3 srlq_3;
mov ymm15_4 srlq_4;
mov ymm15_5 srlq_5;
mov ymm15_6 srlq_6;
mov ymm15_7 srlq_7;
mov ymm15_8 srlq_8;
mov ymm15_9 srlq_9;
mov ymm15_a srlq_a;
mov ymm15_b srlq_b;
mov ymm15_c srlq_c;
mov ymm15_d srlq_d;
mov ymm15_e srlq_e;
mov ymm15_f srlq_f;
(* vpblendd $0xaa,%ymm9,%ymm15,%ymm10              #! PC = 0x555555558b71 *)
mov bldd_0 ymm15_0;
mov bldd_1 ymm15_1;
mov bldd_2 ymm9_2;
mov bldd_3 ymm9_3;
mov bldd_4 ymm15_4;
mov bldd_5 ymm15_5;
mov bldd_6 ymm9_6;
mov bldd_7 ymm9_7;
mov bldd_8 ymm15_8;
mov bldd_9 ymm15_9;
mov bldd_a ymm9_a;
mov bldd_b ymm9_b;
mov bldd_c ymm15_c;
mov bldd_d ymm15_d;
mov bldd_e ymm9_e;
mov bldd_f ymm9_f;
mov ymm10_0 bldd_0;
mov ymm10_1 bldd_1;
mov ymm10_2 bldd_2;
mov ymm10_3 bldd_3;
mov ymm10_4 bldd_4;
mov ymm10_5 bldd_5;
mov ymm10_6 bldd_6;
mov ymm10_7 bldd_7;
mov ymm10_8 bldd_8;
mov ymm10_9 bldd_9;
mov ymm10_a bldd_a;
mov ymm10_b bldd_b;
mov ymm10_c bldd_c;
mov ymm10_d bldd_d;
mov ymm10_e bldd_e;
mov ymm10_f bldd_f;
(* vmovsldup %ymm11,%ymm7                          #! PC = 0x555555558b77 *)
mov ymm7_0 ymm11_0;
mov ymm7_1 ymm11_1;
mov ymm7_2 ymm11_0;
mov ymm7_3 ymm11_1;
mov ymm7_4 ymm11_4;
mov ymm7_5 ymm11_5;
mov ymm7_6 ymm11_4;
mov ymm7_7 ymm11_5;
mov ymm7_8 ymm11_8;
mov ymm7_9 ymm11_9;
mov ymm7_a ymm11_8;
mov ymm7_b ymm11_9;
mov ymm7_c ymm11_c;
mov ymm7_d ymm11_d;
mov ymm7_e ymm11_c;
mov ymm7_f ymm11_d;
(* vpblendd $0xaa,%ymm7,%ymm12,%ymm7               #! PC = 0x555555558b7c *)
mov bldd_0 ymm12_0;
mov bldd_1 ymm12_1;
mov bldd_2 ymm7_2;
mov bldd_3 ymm7_3;
mov bldd_4 ymm12_4;
mov bldd_5 ymm12_5;
mov bldd_6 ymm7_6;
mov bldd_7 ymm7_7;
mov bldd_8 ymm12_8;
mov bldd_9 ymm12_9;
mov bldd_a ymm7_a;
mov bldd_b ymm7_b;
mov bldd_c ymm12_c;
mov bldd_d ymm12_d;
mov bldd_e ymm7_e;
mov bldd_f ymm7_f;
mov ymm7_0 bldd_0;
mov ymm7_1 bldd_1;
mov ymm7_2 bldd_2;
mov ymm7_3 bldd_3;
mov ymm7_4 bldd_4;
mov ymm7_5 bldd_5;
mov ymm7_6 bldd_6;
mov ymm7_7 bldd_7;
mov ymm7_8 bldd_8;
mov ymm7_9 bldd_9;
mov ymm7_a bldd_a;
mov ymm7_b bldd_b;
mov ymm7_c bldd_c;
mov ymm7_d bldd_d;
mov ymm7_e bldd_e;
mov ymm7_f bldd_f;
(* vpsrlq $0x20,%ymm12,%ymm12                      #! PC = 0x555555558b82 *)
mov srlq_0 ymm12_2;
mov srlq_1 ymm12_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm12_6;
mov srlq_5 ymm12_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm12_a;
mov srlq_9 ymm12_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm12_e;
mov srlq_d ymm12_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm12_0 srlq_0;
mov ymm12_1 srlq_1;
mov ymm12_2 srlq_2;
mov ymm12_3 srlq_3;
mov ymm12_4 srlq_4;
mov ymm12_5 srlq_5;
mov ymm12_6 srlq_6;
mov ymm12_7 srlq_7;
mov ymm12_8 srlq_8;
mov ymm12_9 srlq_9;
mov ymm12_a srlq_a;
mov ymm12_b srlq_b;
mov ymm12_c srlq_c;
mov ymm12_d srlq_d;
mov ymm12_e srlq_e;
mov ymm12_f srlq_f;
(* vpblendd $0xaa,%ymm11,%ymm12,%ymm11             #! PC = 0x555555558b88 *)
mov bldd_0 ymm12_0;
mov bldd_1 ymm12_1;
mov bldd_2 ymm11_2;
mov bldd_3 ymm11_3;
mov bldd_4 ymm12_4;
mov bldd_5 ymm12_5;
mov bldd_6 ymm11_6;
mov bldd_7 ymm11_7;
mov bldd_8 ymm12_8;
mov bldd_9 ymm12_9;
mov bldd_a ymm11_a;
mov bldd_b ymm11_b;
mov bldd_c ymm12_c;
mov bldd_d ymm12_d;
mov bldd_e ymm11_e;
mov bldd_f ymm11_f;
mov ymm11_0 bldd_0;
mov ymm11_1 bldd_1;
mov ymm11_2 bldd_2;
mov ymm11_3 bldd_3;
mov ymm11_4 bldd_4;
mov ymm11_5 bldd_5;
mov ymm11_6 bldd_6;
mov ymm11_7 bldd_7;
mov ymm11_8 bldd_8;
mov ymm11_9 bldd_9;
mov ymm11_a bldd_a;
mov ymm11_b bldd_b;
mov ymm11_c bldd_c;
mov ymm11_d bldd_d;
mov ymm11_e bldd_e;
mov ymm11_f bldd_f;
(* vpmullw 0x80(%rdx),%ymm4,%ymm14                 #! EA = L0x555555560780; Value = 0xfff7fff7fff7fff7; PC = 0x555555558b8e *)
smull mulHymm4_0 mulL_0 L0x555555560780 ymm4_0;
smull mulHymm4_1 mulL_1 L0x555555560782 ymm4_1;
smull mulHymm4_2 mulL_2 L0x555555560784 ymm4_2;
smull mulHymm4_3 mulL_3 L0x555555560786 ymm4_3;
smull mulHymm4_4 mulL_4 L0x555555560788 ymm4_4;
smull mulHymm4_5 mulL_5 L0x55555556078a ymm4_5;
smull mulHymm4_6 mulL_6 L0x55555556078c ymm4_6;
smull mulHymm4_7 mulL_7 L0x55555556078e ymm4_7;
smull mulHymm4_8 mulL_8 L0x555555560790 ymm4_8;
smull mulHymm4_9 mulL_9 L0x555555560792 ymm4_9;
smull mulHymm4_a mulL_a L0x555555560794 ymm4_a;
smull mulHymm4_b mulL_b L0x555555560796 ymm4_b;
smull mulHymm4_c mulL_c L0x555555560798 ymm4_c;
smull mulHymm4_d mulL_d L0x55555556079a ymm4_d;
smull mulHymm4_e mulL_e L0x55555556079c ymm4_e;
smull mulHymm4_f mulL_f L0x55555556079e ymm4_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw 0xa0(%rdx),%ymm4,%ymm4                  #! EA = L0x5555555607a0; Value = 0xf1f7f1f7f1f7f1f7; PC = 0x555555558b96 *)
smull mulH_0 mulLymm4_0 ymm4_0 L0x5555555607a0;
smull mulH_1 mulLymm4_1 ymm4_1 L0x5555555607a2;
smull mulH_2 mulLymm4_2 ymm4_2 L0x5555555607a4;
smull mulH_3 mulLymm4_3 ymm4_3 L0x5555555607a6;
smull mulH_4 mulLymm4_4 ymm4_4 L0x5555555607a8;
smull mulH_5 mulLymm4_5 ymm4_5 L0x5555555607aa;
smull mulH_6 mulLymm4_6 ymm4_6 L0x5555555607ac;
smull mulH_7 mulLymm4_7 ymm4_7 L0x5555555607ae;
smull mulH_8 mulLymm4_8 ymm4_8 L0x5555555607b0;
smull mulH_9 mulLymm4_9 ymm4_9 L0x5555555607b2;
smull mulH_a mulLymm4_a ymm4_a L0x5555555607b4;
smull mulH_b mulLymm4_b ymm4_b L0x5555555607b6;
smull mulH_c mulLymm4_c ymm4_c L0x5555555607b8;
smull mulH_d mulLymm4_d ymm4_d L0x5555555607ba;
smull mulH_e mulLymm4_e ymm4_e L0x5555555607bc;
smull mulH_f mulLymm4_f ymm4_f L0x5555555607be;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558b9e *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm4_0;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm4_1;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm4_2;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm4_3;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm4_4;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm4_5;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm4_6;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm4_7;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm4_8;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm4_9;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm4_a;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm4_b;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm4_c;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm4_d;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm4_e;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm4_f;
assume red_f = mulLymm4_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm4,%ymm4                       #! PC = 0x555555558ba2 *)
sub ymm4_0 ymm4_0 ymm14_0;
sub ymm4_1 ymm4_1 ymm14_1;
sub ymm4_2 ymm4_2 ymm14_2;
sub ymm4_3 ymm4_3 ymm14_3;
sub ymm4_4 ymm4_4 ymm14_4;
sub ymm4_5 ymm4_5 ymm14_5;
sub ymm4_6 ymm4_6 ymm14_6;
sub ymm4_7 ymm4_7 ymm14_7;
sub ymm4_8 ymm4_8 ymm14_8;
sub ymm4_9 ymm4_9 ymm14_9;
sub ymm4_a ymm4_a ymm14_a;
sub ymm4_b ymm4_b ymm14_b;
sub ymm4_c ymm4_c ymm14_c;
sub ymm4_d ymm4_d ymm14_d;
sub ymm4_e ymm4_e ymm14_e;
sub ymm4_f ymm4_f ymm14_f;
(* vpbroadcastq 0x640(%rdx),%ymm14                 #! EA = L0x555555560d40; Value = 0x286e8f3fbfd7fff7; PC = 0x555555558ba7 *)
mov ymm14_0 L0x555555560d40;
mov ymm14_1 L0x555555560d42;
mov ymm14_2 L0x555555560d44;
mov ymm14_3 L0x555555560d46;
mov ymm14_4 L0x555555560d40;
mov ymm14_5 L0x555555560d42;
mov ymm14_6 L0x555555560d44;
mov ymm14_7 L0x555555560d46;
mov ymm14_8 L0x555555560d40;
mov ymm14_9 L0x555555560d42;
mov ymm14_a L0x555555560d44;
mov ymm14_b L0x555555560d46;
mov ymm14_c L0x555555560d40;
mov ymm14_d L0x555555560d42;
mov ymm14_e L0x555555560d44;
mov ymm14_f L0x555555560d46;
(* vpbroadcastq 0x648(%rdx),%ymm15                 #! EA = L0x555555560d48; Value = 0x0c6ef13ff1d7f1f7; PC = 0x555555558bb0 *)
mov ymm15_0 L0x555555560d48;
mov ymm15_1 L0x555555560d4a;
mov ymm15_2 L0x555555560d4c;
mov ymm15_3 L0x555555560d4e;
mov ymm15_4 L0x555555560d48;
mov ymm15_5 L0x555555560d4a;
mov ymm15_6 L0x555555560d4c;
mov ymm15_7 L0x555555560d4e;
mov ymm15_8 L0x555555560d48;
mov ymm15_9 L0x555555560d4a;
mov ymm15_a L0x555555560d4c;
mov ymm15_b L0x555555560d4e;
mov ymm15_c L0x555555560d48;
mov ymm15_d L0x555555560d4a;
mov ymm15_e L0x555555560d4c;
mov ymm15_f L0x555555560d4e;
(* vpmullw %ymm14,%ymm5,%ymm14                     #! PC = 0x555555558bb9 *)
smull mulHymm5_0 mulL_0 ymm14_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm14_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm14_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm14_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm14_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm14_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm14_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm14_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm14_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm14_9 ymm5_9;
smull mulHymm5_a mulL_a ymm14_a ymm5_a;
smull mulHymm5_b mulL_b ymm14_b ymm5_b;
smull mulHymm5_c mulL_c ymm14_c ymm5_c;
smull mulHymm5_d mulL_d ymm14_d ymm5_d;
smull mulHymm5_e mulL_e ymm14_e ymm5_e;
smull mulHymm5_f mulL_f ymm14_f ymm5_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm5,%ymm5                      #! PC = 0x555555558bbe *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm15_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm15_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm15_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm15_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm15_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm15_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm15_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm15_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm15_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm15_9;
smull mulH_a mulLymm5_a ymm5_a ymm15_a;
smull mulH_b mulLymm5_b ymm5_b ymm15_b;
smull mulH_c mulLymm5_c ymm5_c ymm15_c;
smull mulH_d mulLymm5_d ymm5_d ymm15_d;
smull mulH_e mulLymm5_e ymm5_e ymm15_e;
smull mulH_f mulLymm5_f ymm5_f ymm15_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558bc3 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm5_0;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm5_1;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm5_2;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm5_3;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm5_4;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm5_5;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm5_6;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm5_7;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm5_8;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm5_9;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm5_a;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm5_b;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm5_c;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm5_d;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm5_e;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm5_f;
assume red_f = mulLymm5_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm5,%ymm5                       #! PC = 0x555555558bc7 *)
sub ymm5_0 ymm5_0 ymm14_0;
sub ymm5_1 ymm5_1 ymm14_1;
sub ymm5_2 ymm5_2 ymm14_2;
sub ymm5_3 ymm5_3 ymm14_3;
sub ymm5_4 ymm5_4 ymm14_4;
sub ymm5_5 ymm5_5 ymm14_5;
sub ymm5_6 ymm5_6 ymm14_6;
sub ymm5_7 ymm5_7 ymm14_7;
sub ymm5_8 ymm5_8 ymm14_8;
sub ymm5_9 ymm5_9 ymm14_9;
sub ymm5_a ymm5_a ymm14_a;
sub ymm5_b ymm5_b ymm14_b;
sub ymm5_c ymm5_c ymm14_c;
sub ymm5_d ymm5_d ymm14_d;
sub ymm5_e ymm5_e ymm14_e;
sub ymm5_f ymm5_f ymm14_f;
(* vpbroadcastq 0x670(%rdx),%ymm14                 #! EA = L0x555555560d70; Value = 0x1c4cbfd7136efff7; PC = 0x555555558bcc *)
mov ymm14_0 L0x555555560d70;
mov ymm14_1 L0x555555560d72;
mov ymm14_2 L0x555555560d74;
mov ymm14_3 L0x555555560d76;
mov ymm14_4 L0x555555560d70;
mov ymm14_5 L0x555555560d72;
mov ymm14_6 L0x555555560d74;
mov ymm14_7 L0x555555560d76;
mov ymm14_8 L0x555555560d70;
mov ymm14_9 L0x555555560d72;
mov ymm14_a L0x555555560d74;
mov ymm14_b L0x555555560d76;
mov ymm14_c L0x555555560d70;
mov ymm14_d L0x555555560d72;
mov ymm14_e L0x555555560d74;
mov ymm14_f L0x555555560d76;
(* vpbroadcastq 0x678(%rdx),%ymm15                 #! EA = L0x555555560d78; Value = 0x044cf1d7f76ef1f7; PC = 0x555555558bd5 *)
mov ymm15_0 L0x555555560d78;
mov ymm15_1 L0x555555560d7a;
mov ymm15_2 L0x555555560d7c;
mov ymm15_3 L0x555555560d7e;
mov ymm15_4 L0x555555560d78;
mov ymm15_5 L0x555555560d7a;
mov ymm15_6 L0x555555560d7c;
mov ymm15_7 L0x555555560d7e;
mov ymm15_8 L0x555555560d78;
mov ymm15_9 L0x555555560d7a;
mov ymm15_a L0x555555560d7c;
mov ymm15_b L0x555555560d7e;
mov ymm15_c L0x555555560d78;
mov ymm15_d L0x555555560d7a;
mov ymm15_e L0x555555560d7c;
mov ymm15_f L0x555555560d7e;
(* vpmullw %ymm14,%ymm6,%ymm14                     #! PC = 0x555555558bde *)
smull mulHymm6_0 mulL_0 ymm14_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm14_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm14_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm14_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm14_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm14_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm14_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm14_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm14_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm14_9 ymm6_9;
smull mulHymm6_a mulL_a ymm14_a ymm6_a;
smull mulHymm6_b mulL_b ymm14_b ymm6_b;
smull mulHymm6_c mulL_c ymm14_c ymm6_c;
smull mulHymm6_d mulL_d ymm14_d ymm6_d;
smull mulHymm6_e mulL_e ymm14_e ymm6_e;
smull mulHymm6_f mulL_f ymm14_f ymm6_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm6,%ymm6                      #! PC = 0x555555558be3 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm15_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm15_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm15_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm15_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm15_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm15_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm15_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm15_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm15_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm15_9;
smull mulH_a mulLymm6_a ymm6_a ymm15_a;
smull mulH_b mulLymm6_b ymm6_b ymm15_b;
smull mulH_c mulLymm6_c ymm6_c ymm15_c;
smull mulH_d mulLymm6_d ymm6_d ymm15_d;
smull mulH_e mulLymm6_e ymm6_e ymm15_e;
smull mulH_f mulLymm6_f ymm6_f ymm15_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558be8 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm6_0;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm6_1;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm6_2;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm6_3;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm6_4;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm6_5;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm6_6;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm6_7;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm6_8;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm6_9;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm6_a;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm6_b;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm6_c;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm6_d;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm6_e;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm6_f;
assume red_f = mulLymm6_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm6,%ymm6                       #! PC = 0x555555558bec *)
sub ymm6_0 ymm6_0 ymm14_0;
sub ymm6_1 ymm6_1 ymm14_1;
sub ymm6_2 ymm6_2 ymm14_2;
sub ymm6_3 ymm6_3 ymm14_3;
sub ymm6_4 ymm6_4 ymm14_4;
sub ymm6_5 ymm6_5 ymm14_5;
sub ymm6_6 ymm6_6 ymm14_6;
sub ymm6_7 ymm6_7 ymm14_7;
sub ymm6_8 ymm6_8 ymm14_8;
sub ymm6_9 ymm6_9 ymm14_9;
sub ymm6_a ymm6_a ymm14_a;
sub ymm6_b ymm6_b ymm14_b;
sub ymm6_c ymm6_c ymm14_c;
sub ymm6_d ymm6_d ymm14_d;
sub ymm6_e ymm6_e ymm14_e;
sub ymm6_f ymm6_f ymm14_f;
(* vpbroadcastq 0x660(%rdx),%ymm14                 #! EA = L0x555555560d60; Value = 0x3998d7921190fff7; PC = 0x555555558bf1 *)
mov ymm14_0 L0x555555560d60;
mov ymm14_1 L0x555555560d62;
mov ymm14_2 L0x555555560d64;
mov ymm14_3 L0x555555560d66;
mov ymm14_4 L0x555555560d60;
mov ymm14_5 L0x555555560d62;
mov ymm14_6 L0x555555560d64;
mov ymm14_7 L0x555555560d66;
mov ymm14_8 L0x555555560d60;
mov ymm14_9 L0x555555560d62;
mov ymm14_a L0x555555560d64;
mov ymm14_b L0x555555560d66;
mov ymm14_c L0x555555560d60;
mov ymm14_d L0x555555560d62;
mov ymm14_e L0x555555560d64;
mov ymm14_f L0x555555560d66;
(* vpbroadcastq 0x668(%rdx),%ymm15                 #! EA = L0x555555560d68; Value = 0x0998f392f190f1f7; PC = 0x555555558bfa *)
mov ymm15_0 L0x555555560d68;
mov ymm15_1 L0x555555560d6a;
mov ymm15_2 L0x555555560d6c;
mov ymm15_3 L0x555555560d6e;
mov ymm15_4 L0x555555560d68;
mov ymm15_5 L0x555555560d6a;
mov ymm15_6 L0x555555560d6c;
mov ymm15_7 L0x555555560d6e;
mov ymm15_8 L0x555555560d68;
mov ymm15_9 L0x555555560d6a;
mov ymm15_a L0x555555560d6c;
mov ymm15_b L0x555555560d6e;
mov ymm15_c L0x555555560d68;
mov ymm15_d L0x555555560d6a;
mov ymm15_e L0x555555560d6c;
mov ymm15_f L0x555555560d6e;
(* vpmullw %ymm14,%ymm7,%ymm14                     #! PC = 0x555555558c03 *)
smull mulHymm7_0 mulL_0 ymm14_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm14_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm14_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm14_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm14_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm14_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm14_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm14_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm14_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm14_9 ymm7_9;
smull mulHymm7_a mulL_a ymm14_a ymm7_a;
smull mulHymm7_b mulL_b ymm14_b ymm7_b;
smull mulHymm7_c mulL_c ymm14_c ymm7_c;
smull mulHymm7_d mulL_d ymm14_d ymm7_d;
smull mulHymm7_e mulL_e ymm14_e ymm7_e;
smull mulHymm7_f mulL_f ymm14_f ymm7_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm7,%ymm7                      #! PC = 0x555555558c08 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm15_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm15_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm15_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm15_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm15_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm15_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm15_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm15_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm15_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm15_9;
smull mulH_a mulLymm7_a ymm7_a ymm15_a;
smull mulH_b mulLymm7_b ymm7_b ymm15_b;
smull mulH_c mulLymm7_c ymm7_c ymm15_c;
smull mulH_d mulLymm7_d ymm7_d ymm15_d;
smull mulH_e mulLymm7_e ymm7_e ymm15_e;
smull mulH_f mulLymm7_f ymm7_f ymm15_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558c0d *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm7_0;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm7_1;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm7_2;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm7_3;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm7_4;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm7_5;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm7_6;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm7_7;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm7_8;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm7_9;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm7_a;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm7_b;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm7_c;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm7_d;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm7_e;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm7_f;
assume red_f = mulLymm7_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm7,%ymm7                       #! PC = 0x555555558c11 *)
sub ymm7_0 ymm7_0 ymm14_0;
sub ymm7_1 ymm7_1 ymm14_1;
sub ymm7_2 ymm7_2 ymm14_2;
sub ymm7_3 ymm7_3 ymm14_3;
sub ymm7_4 ymm7_4 ymm14_4;
sub ymm7_5 ymm7_5 ymm14_5;
sub ymm7_6 ymm7_6 ymm14_6;
sub ymm7_7 ymm7_7 ymm14_7;
sub ymm7_8 ymm7_8 ymm14_8;
sub ymm7_9 ymm7_9 ymm14_9;
sub ymm7_a ymm7_a ymm14_a;
sub ymm7_b ymm7_b ymm14_b;
sub ymm7_c ymm7_c ymm14_c;
sub ymm7_d ymm7_d ymm14_d;
sub ymm7_e ymm7_e ymm14_e;
sub ymm7_f ymm7_f ymm14_f;
(* vpbroadcastq 0x6b0(%rdx),%ymm14                 #! EA = L0x555555560db0; Value = 0xa7bf136eae7afff7; PC = 0x555555558c16 *)
mov ymm14_0 L0x555555560db0;
mov ymm14_1 L0x555555560db2;
mov ymm14_2 L0x555555560db4;
mov ymm14_3 L0x555555560db6;
mov ymm14_4 L0x555555560db0;
mov ymm14_5 L0x555555560db2;
mov ymm14_6 L0x555555560db4;
mov ymm14_7 L0x555555560db6;
mov ymm14_8 L0x555555560db0;
mov ymm14_9 L0x555555560db2;
mov ymm14_a L0x555555560db4;
mov ymm14_b L0x555555560db6;
mov ymm14_c L0x555555560db0;
mov ymm14_d L0x555555560db2;
mov ymm14_e L0x555555560db4;
mov ymm14_f L0x555555560db6;
(* vpbroadcastq 0x6b8(%rdx),%ymm15                 #! EA = L0x555555560db8; Value = 0x09bff76efa7af1f7; PC = 0x555555558c1f *)
mov ymm15_0 L0x555555560db8;
mov ymm15_1 L0x555555560dba;
mov ymm15_2 L0x555555560dbc;
mov ymm15_3 L0x555555560dbe;
mov ymm15_4 L0x555555560db8;
mov ymm15_5 L0x555555560dba;
mov ymm15_6 L0x555555560dbc;
mov ymm15_7 L0x555555560dbe;
mov ymm15_8 L0x555555560db8;
mov ymm15_9 L0x555555560dba;
mov ymm15_a L0x555555560dbc;
mov ymm15_b L0x555555560dbe;
mov ymm15_c L0x555555560db8;
mov ymm15_d L0x555555560dba;
mov ymm15_e L0x555555560dbc;
mov ymm15_f L0x555555560dbe;
(* vpmullw %ymm14,%ymm8,%ymm14                     #! PC = 0x555555558c28 *)
smull mulHymm8_0 mulL_0 ymm14_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm14_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm14_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm14_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm14_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm14_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm14_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm14_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm14_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm14_9 ymm8_9;
smull mulHymm8_a mulL_a ymm14_a ymm8_a;
smull mulHymm8_b mulL_b ymm14_b ymm8_b;
smull mulHymm8_c mulL_c ymm14_c ymm8_c;
smull mulHymm8_d mulL_d ymm14_d ymm8_d;
smull mulHymm8_e mulL_e ymm14_e ymm8_e;
smull mulHymm8_f mulL_f ymm14_f ymm8_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm8,%ymm8                      #! PC = 0x555555558c2d *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm15_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm15_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm15_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm15_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm15_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm15_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm15_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm15_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm15_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm15_9;
smull mulH_a mulLymm8_a ymm8_a ymm15_a;
smull mulH_b mulLymm8_b ymm8_b ymm15_b;
smull mulH_c mulLymm8_c ymm8_c ymm15_c;
smull mulH_d mulLymm8_d ymm8_d ymm15_d;
smull mulH_e mulLymm8_e ymm8_e ymm15_e;
smull mulH_f mulLymm8_f ymm8_f ymm15_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558c32 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm8_0;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm8_1;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm8_2;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm8_3;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm8_4;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm8_5;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm8_6;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm8_7;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm8_8;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm8_9;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm8_a;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm8_b;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm8_c;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm8_d;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm8_e;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm8_f;
assume red_f = mulLymm8_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm8,%ymm8                       #! PC = 0x555555558c36 *)
sub ymm8_0 ymm8_0 ymm14_0;
sub ymm8_1 ymm8_1 ymm14_1;
sub ymm8_2 ymm8_2 ymm14_2;
sub ymm8_3 ymm8_3 ymm14_3;
sub ymm8_4 ymm8_4 ymm14_4;
sub ymm8_5 ymm8_5 ymm14_5;
sub ymm8_6 ymm8_6 ymm14_6;
sub ymm8_7 ymm8_7 ymm14_7;
sub ymm8_8 ymm8_8 ymm14_8;
sub ymm8_9 ymm8_9 ymm14_9;
sub ymm8_a ymm8_a ymm14_a;
sub ymm8_b ymm8_b ymm14_b;
sub ymm8_c ymm8_c ymm14_c;
sub ymm8_d ymm8_d ymm14_d;
sub ymm8_e ymm8_e ymm14_e;
sub ymm8_f ymm8_f ymm14_f;
(* vpbroadcastq 0x6a0(%rdx),%ymm14                 #! EA = L0x555555560da0; Value = 0xa3363998b8f1fff7; PC = 0x555555558c3b *)
mov ymm14_0 L0x555555560da0;
mov ymm14_1 L0x555555560da2;
mov ymm14_2 L0x555555560da4;
mov ymm14_3 L0x555555560da6;
mov ymm14_4 L0x555555560da0;
mov ymm14_5 L0x555555560da2;
mov ymm14_6 L0x555555560da4;
mov ymm14_7 L0x555555560da6;
mov ymm14_8 L0x555555560da0;
mov ymm14_9 L0x555555560da2;
mov ymm14_a L0x555555560da4;
mov ymm14_b L0x555555560da6;
mov ymm14_c L0x555555560da0;
mov ymm14_d L0x555555560da2;
mov ymm14_e L0x555555560da4;
mov ymm14_f L0x555555560da6;
(* vpbroadcastq 0x6a8(%rdx),%ymm15                 #! EA = L0x555555560da8; Value = 0xf7360998f6f1f1f7; PC = 0x555555558c44 *)
mov ymm15_0 L0x555555560da8;
mov ymm15_1 L0x555555560daa;
mov ymm15_2 L0x555555560dac;
mov ymm15_3 L0x555555560dae;
mov ymm15_4 L0x555555560da8;
mov ymm15_5 L0x555555560daa;
mov ymm15_6 L0x555555560dac;
mov ymm15_7 L0x555555560dae;
mov ymm15_8 L0x555555560da8;
mov ymm15_9 L0x555555560daa;
mov ymm15_a L0x555555560dac;
mov ymm15_b L0x555555560dae;
mov ymm15_c L0x555555560da8;
mov ymm15_d L0x555555560daa;
mov ymm15_e L0x555555560dac;
mov ymm15_f L0x555555560dae;
(* vpmullw %ymm14,%ymm13,%ymm14                    #! PC = 0x555555558c4d *)
smull mulHymm13_0 mulL_0 ymm14_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm14_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm14_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm14_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm14_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm14_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm14_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm14_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm14_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm14_9 ymm13_9;
smull mulHymm13_a mulL_a ymm14_a ymm13_a;
smull mulHymm13_b mulL_b ymm14_b ymm13_b;
smull mulHymm13_c mulL_c ymm14_c ymm13_c;
smull mulHymm13_d mulL_d ymm14_d ymm13_d;
smull mulHymm13_e mulL_e ymm14_e ymm13_e;
smull mulHymm13_f mulL_f ymm14_f ymm13_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm13,%ymm13                    #! PC = 0x555555558c52 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm15_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm15_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm15_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm15_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm15_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm15_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm15_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm15_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm15_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm15_9;
smull mulH_a mulLymm13_a ymm13_a ymm15_a;
smull mulH_b mulLymm13_b ymm13_b ymm15_b;
smull mulH_c mulLymm13_c ymm13_c ymm15_c;
smull mulH_d mulLymm13_d ymm13_d ymm15_d;
smull mulH_e mulLymm13_e ymm13_e ymm15_e;
smull mulH_f mulLymm13_f ymm13_f ymm15_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558c57 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm13,%ymm13                     #! PC = 0x555555558c5b *)
sub ymm13_0 ymm13_0 ymm14_0;
sub ymm13_1 ymm13_1 ymm14_1;
sub ymm13_2 ymm13_2 ymm14_2;
sub ymm13_3 ymm13_3 ymm14_3;
sub ymm13_4 ymm13_4 ymm14_4;
sub ymm13_5 ymm13_5 ymm14_5;
sub ymm13_6 ymm13_6 ymm14_6;
sub ymm13_7 ymm13_7 ymm14_7;
sub ymm13_8 ymm13_8 ymm14_8;
sub ymm13_9 ymm13_9 ymm14_9;
sub ymm13_a ymm13_a ymm14_a;
sub ymm13_b ymm13_b ymm14_b;
sub ymm13_c ymm13_c ymm14_c;
sub ymm13_d ymm13_d ymm14_d;
sub ymm13_e ymm13_e ymm14_e;
sub ymm13_f ymm13_f ymm14_f;
(* vpbroadcastq 0x690(%rdx),%ymm14                 #! EA = L0x555555560d90; Value = 0xb0a51c4ca7bffff7; PC = 0x555555558c60 *)
mov ymm14_0 L0x555555560d90;
mov ymm14_1 L0x555555560d92;
mov ymm14_2 L0x555555560d94;
mov ymm14_3 L0x555555560d96;
mov ymm14_4 L0x555555560d90;
mov ymm14_5 L0x555555560d92;
mov ymm14_6 L0x555555560d94;
mov ymm14_7 L0x555555560d96;
mov ymm14_8 L0x555555560d90;
mov ymm14_9 L0x555555560d92;
mov ymm14_a L0x555555560d94;
mov ymm14_b L0x555555560d96;
mov ymm14_c L0x555555560d90;
mov ymm14_d L0x555555560d92;
mov ymm14_e L0x555555560d94;
mov ymm14_f L0x555555560d96;
(* vpbroadcastq 0x698(%rdx),%ymm15                 #! EA = L0x555555560d98; Value = 0x06a5044c09bff1f7; PC = 0x555555558c69 *)
mov ymm15_0 L0x555555560d98;
mov ymm15_1 L0x555555560d9a;
mov ymm15_2 L0x555555560d9c;
mov ymm15_3 L0x555555560d9e;
mov ymm15_4 L0x555555560d98;
mov ymm15_5 L0x555555560d9a;
mov ymm15_6 L0x555555560d9c;
mov ymm15_7 L0x555555560d9e;
mov ymm15_8 L0x555555560d98;
mov ymm15_9 L0x555555560d9a;
mov ymm15_a L0x555555560d9c;
mov ymm15_b L0x555555560d9e;
mov ymm15_c L0x555555560d98;
mov ymm15_d L0x555555560d9a;
mov ymm15_e L0x555555560d9c;
mov ymm15_f L0x555555560d9e;
(* vpmullw %ymm14,%ymm10,%ymm14                    #! PC = 0x555555558c72 *)
smull mulHymm10_0 mulL_0 ymm14_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm14_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm14_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm14_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm14_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm14_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm14_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm14_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm14_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm14_9 ymm10_9;
smull mulHymm10_a mulL_a ymm14_a ymm10_a;
smull mulHymm10_b mulL_b ymm14_b ymm10_b;
smull mulHymm10_c mulL_c ymm14_c ymm10_c;
smull mulHymm10_d mulL_d ymm14_d ymm10_d;
smull mulHymm10_e mulL_e ymm14_e ymm10_e;
smull mulHymm10_f mulL_f ymm14_f ymm10_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm10,%ymm10                    #! PC = 0x555555558c77 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm15_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm15_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm15_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm15_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm15_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm15_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm15_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm15_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm15_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm15_9;
smull mulH_a mulLymm10_a ymm10_a ymm15_a;
smull mulH_b mulLymm10_b ymm10_b ymm15_b;
smull mulH_c mulLymm10_c ymm10_c ymm15_c;
smull mulH_d mulLymm10_d ymm10_d ymm15_d;
smull mulH_e mulLymm10_e ymm10_e ymm15_e;
smull mulH_f mulLymm10_f ymm10_f ymm15_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558c7c *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm10_0;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm10_1;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm10_2;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm10_3;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm10_4;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm10_5;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm10_6;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm10_7;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm10_8;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm10_9;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm10_a;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm10_b;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm10_c;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm10_d;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm10_e;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm10_f;
assume red_f = mulLymm10_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm10,%ymm10                     #! PC = 0x555555558c80 *)
sub ymm10_0 ymm10_0 ymm14_0;
sub ymm10_1 ymm10_1 ymm14_1;
sub ymm10_2 ymm10_2 ymm14_2;
sub ymm10_3 ymm10_3 ymm14_3;
sub ymm10_4 ymm10_4 ymm14_4;
sub ymm10_5 ymm10_5 ymm14_5;
sub ymm10_6 ymm10_6 ymm14_6;
sub ymm10_7 ymm10_7 ymm14_7;
sub ymm10_8 ymm10_8 ymm14_8;
sub ymm10_9 ymm10_9 ymm14_9;
sub ymm10_a ymm10_a ymm14_a;
sub ymm10_b ymm10_b ymm14_b;
sub ymm10_c ymm10_c ymm14_c;
sub ymm10_d ymm10_d ymm14_d;
sub ymm10_e ymm10_e ymm14_e;
sub ymm10_f ymm10_f ymm14_f;
(* vpbroadcastq 0x680(%rdx),%ymm14                 #! EA = L0x555555560d80; Value = 0xb8f11190d279fff7; PC = 0x555555558c85 *)
mov ymm14_0 L0x555555560d80;
mov ymm14_1 L0x555555560d82;
mov ymm14_2 L0x555555560d84;
mov ymm14_3 L0x555555560d86;
mov ymm14_4 L0x555555560d80;
mov ymm14_5 L0x555555560d82;
mov ymm14_6 L0x555555560d84;
mov ymm14_7 L0x555555560d86;
mov ymm14_8 L0x555555560d80;
mov ymm14_9 L0x555555560d82;
mov ymm14_a L0x555555560d84;
mov ymm14_b L0x555555560d86;
mov ymm14_c L0x555555560d80;
mov ymm14_d L0x555555560d82;
mov ymm14_e L0x555555560d84;
mov ymm14_f L0x555555560d86;
(* vpbroadcastq 0x688(%rdx),%ymm15                 #! EA = L0x555555560d88; Value = 0xf6f1f1900079f1f7; PC = 0x555555558c8e *)
mov ymm15_0 L0x555555560d88;
mov ymm15_1 L0x555555560d8a;
mov ymm15_2 L0x555555560d8c;
mov ymm15_3 L0x555555560d8e;
mov ymm15_4 L0x555555560d88;
mov ymm15_5 L0x555555560d8a;
mov ymm15_6 L0x555555560d8c;
mov ymm15_7 L0x555555560d8e;
mov ymm15_8 L0x555555560d88;
mov ymm15_9 L0x555555560d8a;
mov ymm15_a L0x555555560d8c;
mov ymm15_b L0x555555560d8e;
mov ymm15_c L0x555555560d88;
mov ymm15_d L0x555555560d8a;
mov ymm15_e L0x555555560d8c;
mov ymm15_f L0x555555560d8e;
(* vpmullw %ymm14,%ymm11,%ymm14                    #! PC = 0x555555558c97 *)
smull mulHymm11_0 mulL_0 ymm14_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm14_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm14_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm14_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm14_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm14_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm14_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm14_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm14_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm14_9 ymm11_9;
smull mulHymm11_a mulL_a ymm14_a ymm11_a;
smull mulHymm11_b mulL_b ymm14_b ymm11_b;
smull mulHymm11_c mulL_c ymm14_c ymm11_c;
smull mulHymm11_d mulL_d ymm14_d ymm11_d;
smull mulHymm11_e mulL_e ymm14_e ymm11_e;
smull mulHymm11_f mulL_f ymm14_f ymm11_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm11,%ymm11                    #! PC = 0x555555558c9c *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm15_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm15_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm15_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm15_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm15_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm15_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm15_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm15_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm15_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm15_9;
smull mulH_a mulLymm11_a ymm11_a ymm15_a;
smull mulH_b mulLymm11_b ymm11_b ymm15_b;
smull mulH_c mulLymm11_c ymm11_c ymm15_c;
smull mulH_d mulLymm11_d ymm11_d ymm15_d;
smull mulH_e mulLymm11_e ymm11_e ymm15_e;
smull mulH_f mulLymm11_f ymm11_f ymm15_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555558ca1 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm11_0;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm11_1;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm11_2;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm11_3;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm11_4;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm11_5;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm11_6;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm11_7;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm11_8;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm11_9;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm11_a;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm11_b;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm11_c;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm11_d;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm11_e;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm11_f;
assume red_f = mulLymm11_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm11,%ymm11                     #! PC = 0x555555558ca5 *)
sub ymm11_0 ymm11_0 ymm14_0;
sub ymm11_1 ymm11_1 ymm14_1;
sub ymm11_2 ymm11_2 ymm14_2;
sub ymm11_3 ymm11_3 ymm14_3;
sub ymm11_4 ymm11_4 ymm14_4;
sub ymm11_5 ymm11_5 ymm14_5;
sub ymm11_6 ymm11_6 ymm14_6;
sub ymm11_7 ymm11_7 ymm14_7;
sub ymm11_8 ymm11_8 ymm14_8;
sub ymm11_9 ymm11_9 ymm14_9;
sub ymm11_a ymm11_a ymm14_a;
sub ymm11_b ymm11_b ymm14_b;
sub ymm11_c ymm11_c ymm14_c;
sub ymm11_d ymm11_d ymm14_d;
sub ymm11_e ymm11_e ymm14_e;
sub ymm11_f ymm11_f ymm14_f;
(* vpsubw %ymm6,%ymm7,%ymm12                       #! PC = 0x555555558caa *)
sub ymm12_0 ymm7_0 ymm6_0;
sub ymm12_1 ymm7_1 ymm6_1;
sub ymm12_2 ymm7_2 ymm6_2;
sub ymm12_3 ymm7_3 ymm6_3;
sub ymm12_4 ymm7_4 ymm6_4;
sub ymm12_5 ymm7_5 ymm6_5;
sub ymm12_6 ymm7_6 ymm6_6;
sub ymm12_7 ymm7_7 ymm6_7;
sub ymm12_8 ymm7_8 ymm6_8;
sub ymm12_9 ymm7_9 ymm6_9;
sub ymm12_a ymm7_a ymm6_a;
sub ymm12_b ymm7_b ymm6_b;
sub ymm12_c ymm7_c ymm6_c;
sub ymm12_d ymm7_d ymm6_d;
sub ymm12_e ymm7_e ymm6_e;
sub ymm12_f ymm7_f ymm6_f;
(* vpaddw %ymm7,%ymm6,%ymm6                        #! PC = 0x555555558cae *)
add ymm6_0 ymm6_0 ymm7_0;
add ymm6_1 ymm6_1 ymm7_1;
add ymm6_2 ymm6_2 ymm7_2;
add ymm6_3 ymm6_3 ymm7_3;
add ymm6_4 ymm6_4 ymm7_4;
add ymm6_5 ymm6_5 ymm7_5;
add ymm6_6 ymm6_6 ymm7_6;
add ymm6_7 ymm6_7 ymm7_7;
add ymm6_8 ymm6_8 ymm7_8;
add ymm6_9 ymm6_9 ymm7_9;
add ymm6_a ymm6_a ymm7_a;
add ymm6_b ymm6_b ymm7_b;
add ymm6_c ymm6_c ymm7_c;
add ymm6_d ymm6_d ymm7_d;
add ymm6_e ymm6_e ymm7_e;
add ymm6_f ymm6_f ymm7_f;
(* vpmullw %ymm1,%ymm12,%ymm7                      #! PC = 0x555555558cb2 *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpsubw %ymm8,%ymm13,%ymm9                       #! PC = 0x555555558cb6 *)
sub ymm9_0 ymm13_0 ymm8_0;
sub ymm9_1 ymm13_1 ymm8_1;
sub ymm9_2 ymm13_2 ymm8_2;
sub ymm9_3 ymm13_3 ymm8_3;
sub ymm9_4 ymm13_4 ymm8_4;
sub ymm9_5 ymm13_5 ymm8_5;
sub ymm9_6 ymm13_6 ymm8_6;
sub ymm9_7 ymm13_7 ymm8_7;
sub ymm9_8 ymm13_8 ymm8_8;
sub ymm9_9 ymm13_9 ymm8_9;
sub ymm9_a ymm13_a ymm8_a;
sub ymm9_b ymm13_b ymm8_b;
sub ymm9_c ymm13_c ymm8_c;
sub ymm9_d ymm13_d ymm8_d;
sub ymm9_e ymm13_e ymm8_e;
sub ymm9_f ymm13_f ymm8_f;
(* vpaddw %ymm13,%ymm8,%ymm8                       #! PC = 0x555555558cbb *)
add ymm8_0 ymm8_0 ymm13_0;
add ymm8_1 ymm8_1 ymm13_1;
add ymm8_2 ymm8_2 ymm13_2;
add ymm8_3 ymm8_3 ymm13_3;
add ymm8_4 ymm8_4 ymm13_4;
add ymm8_5 ymm8_5 ymm13_5;
add ymm8_6 ymm8_6 ymm13_6;
add ymm8_7 ymm8_7 ymm13_7;
add ymm8_8 ymm8_8 ymm13_8;
add ymm8_9 ymm8_9 ymm13_9;
add ymm8_a ymm8_a ymm13_a;
add ymm8_b ymm8_b ymm13_b;
add ymm8_c ymm8_c ymm13_c;
add ymm8_d ymm8_d ymm13_d;
add ymm8_e ymm8_e ymm13_e;
add ymm8_f ymm8_f ymm13_f;
(* vpmullw 0x1c0(%rdx),%ymm9,%ymm13                #! EA = L0x5555555608c0; Value = 0x4029402940294029; PC = 0x555555558cc0 *)
smull mulHymm9_0 mulL_0 L0x5555555608c0 ymm9_0;
smull mulHymm9_1 mulL_1 L0x5555555608c2 ymm9_1;
smull mulHymm9_2 mulL_2 L0x5555555608c4 ymm9_2;
smull mulHymm9_3 mulL_3 L0x5555555608c6 ymm9_3;
smull mulHymm9_4 mulL_4 L0x5555555608c8 ymm9_4;
smull mulHymm9_5 mulL_5 L0x5555555608ca ymm9_5;
smull mulHymm9_6 mulL_6 L0x5555555608cc ymm9_6;
smull mulHymm9_7 mulL_7 L0x5555555608ce ymm9_7;
smull mulHymm9_8 mulL_8 L0x5555555608d0 ymm9_8;
smull mulHymm9_9 mulL_9 L0x5555555608d2 ymm9_9;
smull mulHymm9_a mulL_a L0x5555555608d4 ymm9_a;
smull mulHymm9_b mulL_b L0x5555555608d6 ymm9_b;
smull mulHymm9_c mulL_c L0x5555555608d8 ymm9_c;
smull mulHymm9_d mulL_d L0x5555555608da ymm9_d;
smull mulHymm9_e mulL_e L0x5555555608dc ymm9_e;
smull mulHymm9_f mulL_f L0x5555555608de ymm9_f;
cast ymm13_0@sint16 mulL_0;
cast ymm13_1@sint16 mulL_1;
cast ymm13_2@sint16 mulL_2;
cast ymm13_3@sint16 mulL_3;
cast ymm13_4@sint16 mulL_4;
cast ymm13_5@sint16 mulL_5;
cast ymm13_6@sint16 mulL_6;
cast ymm13_7@sint16 mulL_7;
cast ymm13_8@sint16 mulL_8;
cast ymm13_9@sint16 mulL_9;
cast ymm13_a@sint16 mulL_a;
cast ymm13_b@sint16 mulL_b;
cast ymm13_c@sint16 mulL_c;
cast ymm13_d@sint16 mulL_d;
cast ymm13_e@sint16 mulL_e;
cast ymm13_f@sint16 mulL_f;
(* vpsubw %ymm10,%ymm11,%ymm14                     #! PC = 0x555555558cc8 *)
sub ymm14_0 ymm11_0 ymm10_0;
sub ymm14_1 ymm11_1 ymm10_1;
sub ymm14_2 ymm11_2 ymm10_2;
sub ymm14_3 ymm11_3 ymm10_3;
sub ymm14_4 ymm11_4 ymm10_4;
sub ymm14_5 ymm11_5 ymm10_5;
sub ymm14_6 ymm11_6 ymm10_6;
sub ymm14_7 ymm11_7 ymm10_7;
sub ymm14_8 ymm11_8 ymm10_8;
sub ymm14_9 ymm11_9 ymm10_9;
sub ymm14_a ymm11_a ymm10_a;
sub ymm14_b ymm11_b ymm10_b;
sub ymm14_c ymm11_c ymm10_c;
sub ymm14_d ymm11_d ymm10_d;
sub ymm14_e ymm11_e ymm10_e;
sub ymm14_f ymm11_f ymm10_f;
(* vpaddw %ymm11,%ymm10,%ymm10                     #! PC = 0x555555558ccd *)
add ymm10_0 ymm10_0 ymm11_0;
add ymm10_1 ymm10_1 ymm11_1;
add ymm10_2 ymm10_2 ymm11_2;
add ymm10_3 ymm10_3 ymm11_3;
add ymm10_4 ymm10_4 ymm11_4;
add ymm10_5 ymm10_5 ymm11_5;
add ymm10_6 ymm10_6 ymm11_6;
add ymm10_7 ymm10_7 ymm11_7;
add ymm10_8 ymm10_8 ymm11_8;
add ymm10_9 ymm10_9 ymm11_9;
add ymm10_a ymm10_a ymm11_a;
add ymm10_b ymm10_b ymm11_b;
add ymm10_c ymm10_c ymm11_c;
add ymm10_d ymm10_d ymm11_d;
add ymm10_e ymm10_e ymm11_e;
add ymm10_f ymm10_f ymm11_f;
(* vpmullw 0x140(%rdx),%ymm14,%ymm11               #! EA = L0x555555560840; Value = 0xd792d792d792d792; PC = 0x555555558cd2 *)
smull mulHymm14_0 mulL_0 L0x555555560840 ymm14_0;
smull mulHymm14_1 mulL_1 L0x555555560842 ymm14_1;
smull mulHymm14_2 mulL_2 L0x555555560844 ymm14_2;
smull mulHymm14_3 mulL_3 L0x555555560846 ymm14_3;
smull mulHymm14_4 mulL_4 L0x555555560848 ymm14_4;
smull mulHymm14_5 mulL_5 L0x55555556084a ymm14_5;
smull mulHymm14_6 mulL_6 L0x55555556084c ymm14_6;
smull mulHymm14_7 mulL_7 L0x55555556084e ymm14_7;
smull mulHymm14_8 mulL_8 L0x555555560850 ymm14_8;
smull mulHymm14_9 mulL_9 L0x555555560852 ymm14_9;
smull mulHymm14_a mulL_a L0x555555560854 ymm14_a;
smull mulHymm14_b mulL_b L0x555555560856 ymm14_b;
smull mulHymm14_c mulL_c L0x555555560858 ymm14_c;
smull mulHymm14_d mulL_d L0x55555556085a ymm14_d;
smull mulHymm14_e mulL_e L0x55555556085c ymm14_e;
smull mulHymm14_f mulL_f L0x55555556085e ymm14_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x555555558cda *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw 0x1e0(%rdx),%ymm9,%ymm9                 #! EA = L0x5555555608e0; Value = 0x0e290e290e290e29; PC = 0x555555558cde *)
smull mulH_0 mulLymm9_0 ymm9_0 L0x5555555608e0;
smull mulH_1 mulLymm9_1 ymm9_1 L0x5555555608e2;
smull mulH_2 mulLymm9_2 ymm9_2 L0x5555555608e4;
smull mulH_3 mulLymm9_3 ymm9_3 L0x5555555608e6;
smull mulH_4 mulLymm9_4 ymm9_4 L0x5555555608e8;
smull mulH_5 mulLymm9_5 ymm9_5 L0x5555555608ea;
smull mulH_6 mulLymm9_6 ymm9_6 L0x5555555608ec;
smull mulH_7 mulLymm9_7 ymm9_7 L0x5555555608ee;
smull mulH_8 mulLymm9_8 ymm9_8 L0x5555555608f0;
smull mulH_9 mulLymm9_9 ymm9_9 L0x5555555608f2;
smull mulH_a mulLymm9_a ymm9_a L0x5555555608f4;
smull mulH_b mulLymm9_b ymm9_b L0x5555555608f6;
smull mulH_c mulLymm9_c ymm9_c L0x5555555608f8;
smull mulH_d mulLymm9_d ymm9_d L0x5555555608fa;
smull mulH_e mulLymm9_e ymm9_e L0x5555555608fc;
smull mulH_f mulLymm9_f ymm9_f L0x5555555608fe;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw 0x160(%rdx),%ymm14,%ymm14               #! EA = L0x555555560860; Value = 0xf392f392f392f392; PC = 0x555555558ce6 *)
smull mulH_0 mulLymm14_0 ymm14_0 L0x555555560860;
smull mulH_1 mulLymm14_1 ymm14_1 L0x555555560862;
smull mulH_2 mulLymm14_2 ymm14_2 L0x555555560864;
smull mulH_3 mulLymm14_3 ymm14_3 L0x555555560866;
smull mulH_4 mulLymm14_4 ymm14_4 L0x555555560868;
smull mulH_5 mulLymm14_5 ymm14_5 L0x55555556086a;
smull mulH_6 mulLymm14_6 ymm14_6 L0x55555556086c;
smull mulH_7 mulLymm14_7 ymm14_7 L0x55555556086e;
smull mulH_8 mulLymm14_8 ymm14_8 L0x555555560870;
smull mulH_9 mulLymm14_9 ymm14_9 L0x555555560872;
smull mulH_a mulLymm14_a ymm14_a L0x555555560874;
smull mulH_b mulLymm14_b ymm14_b L0x555555560876;
smull mulH_c mulLymm14_c ymm14_c L0x555555560878;
smull mulH_d mulLymm14_d ymm14_d L0x55555556087a;
smull mulH_e mulLymm14_e ymm14_e L0x55555556087c;
smull mulH_f mulLymm14_f ymm14_f L0x55555556087e;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558cee *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm13,%ymm13                     #! PC = 0x555555558cf2 *)
smull mulH_0 red_0 ymm13_0 ymm0_0;
assert true && red_0 = mulLymm9_0;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm13_1 ymm0_1;
assert true && red_1 = mulLymm9_1;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm13_2 ymm0_2;
assert true && red_2 = mulLymm9_2;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm13_3 ymm0_3;
assert true && red_3 = mulLymm9_3;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm13_4 ymm0_4;
assert true && red_4 = mulLymm9_4;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm13_5 ymm0_5;
assert true && red_5 = mulLymm9_5;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm13_6 ymm0_6;
assert true && red_6 = mulLymm9_6;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm13_7 ymm0_7;
assert true && red_7 = mulLymm9_7;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm13_8 ymm0_8;
assert true && red_8 = mulLymm9_8;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm13_9 ymm0_9;
assert true && red_9 = mulLymm9_9;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm13_a ymm0_a;
assert true && red_a = mulLymm9_a;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm13_b ymm0_b;
assert true && red_b = mulLymm9_b;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm13_c ymm0_c;
assert true && red_c = mulLymm9_c;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm13_d ymm0_d;
assert true && red_d = mulLymm9_d;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm13_e ymm0_e;
assert true && red_e = mulLymm9_e;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm13_f ymm0_f;
assert true && red_f = mulLymm9_f;
assume red_f = mulLymm9_f && true;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x555555558cf6 *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpaddw %ymm5,%ymm4,%ymm15                       #! PC = 0x555555558cfa *)
add ymm15_0 ymm4_0 ymm5_0;
add ymm15_1 ymm4_1 ymm5_1;
add ymm15_2 ymm4_2 ymm5_2;
add ymm15_3 ymm4_3 ymm5_3;
add ymm15_4 ymm4_4 ymm5_4;
add ymm15_5 ymm4_5 ymm5_5;
add ymm15_6 ymm4_6 ymm5_6;
add ymm15_7 ymm4_7 ymm5_7;
add ymm15_8 ymm4_8 ymm5_8;
add ymm15_9 ymm4_9 ymm5_9;
add ymm15_a ymm4_a ymm5_a;
add ymm15_b ymm4_b ymm5_b;
add ymm15_c ymm4_c ymm5_c;
add ymm15_d ymm4_d ymm5_d;
add ymm15_e ymm4_e ymm5_e;
add ymm15_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x555555558cfe *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpsubw %ymm7,%ymm12,%ymm7                       #! PC = 0x555555558d02 *)
sub ymm7_0 ymm12_0 ymm7_0;
sub ymm7_1 ymm12_1 ymm7_1;
sub ymm7_2 ymm12_2 ymm7_2;
sub ymm7_3 ymm12_3 ymm7_3;
sub ymm7_4 ymm12_4 ymm7_4;
sub ymm7_5 ymm12_5 ymm7_5;
sub ymm7_6 ymm12_6 ymm7_6;
sub ymm7_7 ymm12_7 ymm7_7;
sub ymm7_8 ymm12_8 ymm7_8;
sub ymm7_9 ymm12_9 ymm7_9;
sub ymm7_a ymm12_a ymm7_a;
sub ymm7_b ymm12_b ymm7_b;
sub ymm7_c ymm12_c ymm7_c;
sub ymm7_d ymm12_d ymm7_d;
sub ymm7_e ymm12_e ymm7_e;
sub ymm7_f ymm12_f ymm7_f;
(* vpsubw %ymm13,%ymm9,%ymm9                       #! PC = 0x555555558d06 *)
sub ymm9_0 ymm9_0 ymm13_0;
sub ymm9_1 ymm9_1 ymm13_1;
sub ymm9_2 ymm9_2 ymm13_2;
sub ymm9_3 ymm9_3 ymm13_3;
sub ymm9_4 ymm9_4 ymm13_4;
sub ymm9_5 ymm9_5 ymm13_5;
sub ymm9_6 ymm9_6 ymm13_6;
sub ymm9_7 ymm9_7 ymm13_7;
sub ymm9_8 ymm9_8 ymm13_8;
sub ymm9_9 ymm9_9 ymm13_9;
sub ymm9_a ymm9_a ymm13_a;
sub ymm9_b ymm9_b ymm13_b;
sub ymm9_c ymm9_c ymm13_c;
sub ymm9_d ymm9_d ymm13_d;
sub ymm9_e ymm9_e ymm13_e;
sub ymm9_f ymm9_f ymm13_f;
(* vpsubw %ymm11,%ymm14,%ymm11                     #! PC = 0x555555558d0b *)
sub ymm11_0 ymm14_0 ymm11_0;
sub ymm11_1 ymm14_1 ymm11_1;
sub ymm11_2 ymm14_2 ymm11_2;
sub ymm11_3 ymm14_3 ymm11_3;
sub ymm11_4 ymm14_4 ymm11_4;
sub ymm11_5 ymm14_5 ymm11_5;
sub ymm11_6 ymm14_6 ymm11_6;
sub ymm11_7 ymm14_7 ymm11_7;
sub ymm11_8 ymm14_8 ymm11_8;
sub ymm11_9 ymm14_9 ymm11_9;
sub ymm11_a ymm14_a ymm11_a;
sub ymm11_b ymm14_b ymm11_b;
sub ymm11_c ymm14_c ymm11_c;
sub ymm11_d ymm14_d ymm11_d;
sub ymm11_e ymm14_e ymm11_e;
sub ymm11_f ymm14_f ymm11_f;
(* vpsubw %ymm8,%ymm10,%ymm12                      #! PC = 0x555555558d10 *)
sub ymm12_0 ymm10_0 ymm8_0;
sub ymm12_1 ymm10_1 ymm8_1;
sub ymm12_2 ymm10_2 ymm8_2;
sub ymm12_3 ymm10_3 ymm8_3;
sub ymm12_4 ymm10_4 ymm8_4;
sub ymm12_5 ymm10_5 ymm8_5;
sub ymm12_6 ymm10_6 ymm8_6;
sub ymm12_7 ymm10_7 ymm8_7;
sub ymm12_8 ymm10_8 ymm8_8;
sub ymm12_9 ymm10_9 ymm8_9;
sub ymm12_a ymm10_a ymm8_a;
sub ymm12_b ymm10_b ymm8_b;
sub ymm12_c ymm10_c ymm8_c;
sub ymm12_d ymm10_d ymm8_d;
sub ymm12_e ymm10_e ymm8_e;
sub ymm12_f ymm10_f ymm8_f;
(* vpaddw %ymm10,%ymm8,%ymm8                       #! PC = 0x555555558d15 *)
add ymm8_0 ymm8_0 ymm10_0;
add ymm8_1 ymm8_1 ymm10_1;
add ymm8_2 ymm8_2 ymm10_2;
add ymm8_3 ymm8_3 ymm10_3;
add ymm8_4 ymm8_4 ymm10_4;
add ymm8_5 ymm8_5 ymm10_5;
add ymm8_6 ymm8_6 ymm10_6;
add ymm8_7 ymm8_7 ymm10_7;
add ymm8_8 ymm8_8 ymm10_8;
add ymm8_9 ymm8_9 ymm10_9;
add ymm8_a ymm8_a ymm10_a;
add ymm8_b ymm8_b ymm10_b;
add ymm8_c ymm8_c ymm10_c;
add ymm8_d ymm8_d ymm10_d;
add ymm8_e ymm8_e ymm10_e;
add ymm8_f ymm8_f ymm10_f;
(* vpmullw %ymm1,%ymm12,%ymm10                     #! PC = 0x555555558d1a *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpsubw %ymm9,%ymm11,%ymm13                      #! PC = 0x555555558d1e *)
sub ymm13_0 ymm11_0 ymm9_0;
sub ymm13_1 ymm11_1 ymm9_1;
sub ymm13_2 ymm11_2 ymm9_2;
sub ymm13_3 ymm11_3 ymm9_3;
sub ymm13_4 ymm11_4 ymm9_4;
sub ymm13_5 ymm11_5 ymm9_5;
sub ymm13_6 ymm11_6 ymm9_6;
sub ymm13_7 ymm11_7 ymm9_7;
sub ymm13_8 ymm11_8 ymm9_8;
sub ymm13_9 ymm11_9 ymm9_9;
sub ymm13_a ymm11_a ymm9_a;
sub ymm13_b ymm11_b ymm9_b;
sub ymm13_c ymm11_c ymm9_c;
sub ymm13_d ymm11_d ymm9_d;
sub ymm13_e ymm11_e ymm9_e;
sub ymm13_f ymm11_f ymm9_f;
(* vpaddw %ymm11,%ymm9,%ymm9                       #! PC = 0x555555558d23 *)
add ymm9_0 ymm9_0 ymm11_0;
add ymm9_1 ymm9_1 ymm11_1;
add ymm9_2 ymm9_2 ymm11_2;
add ymm9_3 ymm9_3 ymm11_3;
add ymm9_4 ymm9_4 ymm11_4;
add ymm9_5 ymm9_5 ymm11_5;
add ymm9_6 ymm9_6 ymm11_6;
add ymm9_7 ymm9_7 ymm11_7;
add ymm9_8 ymm9_8 ymm11_8;
add ymm9_9 ymm9_9 ymm11_9;
add ymm9_a ymm9_a ymm11_a;
add ymm9_b ymm9_b ymm11_b;
add ymm9_c ymm9_c ymm11_c;
add ymm9_d ymm9_d ymm11_d;
add ymm9_e ymm9_e ymm11_e;
add ymm9_f ymm9_f ymm11_f;
(* vpmullw %ymm1,%ymm13,%ymm11                     #! PC = 0x555555558d28 *)
smull mulHymm13_0 mulL_0 ymm1_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm1_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm1_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm1_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm1_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm1_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm1_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm1_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm1_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm1_9 ymm13_9;
smull mulHymm13_a mulL_a ymm1_a ymm13_a;
smull mulHymm13_b mulL_b ymm1_b ymm13_b;
smull mulHymm13_c mulL_c ymm1_c ymm13_c;
smull mulHymm13_d mulL_d ymm1_d ymm13_d;
smull mulHymm13_e mulL_e ymm1_e ymm13_e;
smull mulHymm13_f mulL_f ymm1_f ymm13_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x555555558d2c *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm2,%ymm13,%ymm13                     #! PC = 0x555555558d30 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm2_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm2_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm2_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm2_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm2_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm2_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm2_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm2_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm2_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm2_9;
smull mulH_a mulLymm13_a ymm13_a ymm2_a;
smull mulH_b mulLymm13_b ymm13_b ymm2_b;
smull mulH_c mulLymm13_c ymm13_c ymm2_c;
smull mulH_d mulLymm13_d ymm13_d ymm2_d;
smull mulH_e mulLymm13_e ymm13_e ymm2_e;
smull mulH_f mulLymm13_f ymm13_f ymm2_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x555555558d34 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x555555558d38 *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpaddw %ymm6,%ymm15,%ymm4                       #! PC = 0x555555558d3c *)
add ymm4_0 ymm15_0 ymm6_0;
add ymm4_1 ymm15_1 ymm6_1;
add ymm4_2 ymm15_2 ymm6_2;
add ymm4_3 ymm15_3 ymm6_3;
add ymm4_4 ymm15_4 ymm6_4;
add ymm4_5 ymm15_5 ymm6_5;
add ymm4_6 ymm15_6 ymm6_6;
add ymm4_7 ymm15_7 ymm6_7;
add ymm4_8 ymm15_8 ymm6_8;
add ymm4_9 ymm15_9 ymm6_9;
add ymm4_a ymm15_a ymm6_a;
add ymm4_b ymm15_b ymm6_b;
add ymm4_c ymm15_c ymm6_c;
add ymm4_d ymm15_d ymm6_d;
add ymm4_e ymm15_e ymm6_e;
add ymm4_f ymm15_f ymm6_f;
(* vpsubw %ymm6,%ymm15,%ymm6                       #! PC = 0x555555558d40 *)
sub ymm6_0 ymm15_0 ymm6_0;
sub ymm6_1 ymm15_1 ymm6_1;
sub ymm6_2 ymm15_2 ymm6_2;
sub ymm6_3 ymm15_3 ymm6_3;
sub ymm6_4 ymm15_4 ymm6_4;
sub ymm6_5 ymm15_5 ymm6_5;
sub ymm6_6 ymm15_6 ymm6_6;
sub ymm6_7 ymm15_7 ymm6_7;
sub ymm6_8 ymm15_8 ymm6_8;
sub ymm6_9 ymm15_9 ymm6_9;
sub ymm6_a ymm15_a ymm6_a;
sub ymm6_b ymm15_b ymm6_b;
sub ymm6_c ymm15_c ymm6_c;
sub ymm6_d ymm15_d ymm6_d;
sub ymm6_e ymm15_e ymm6_e;
sub ymm6_f ymm15_f ymm6_f;
(* vpaddw %ymm7,%ymm5,%ymm15                       #! PC = 0x555555558d44 *)
add ymm15_0 ymm5_0 ymm7_0;
add ymm15_1 ymm5_1 ymm7_1;
add ymm15_2 ymm5_2 ymm7_2;
add ymm15_3 ymm5_3 ymm7_3;
add ymm15_4 ymm5_4 ymm7_4;
add ymm15_5 ymm5_5 ymm7_5;
add ymm15_6 ymm5_6 ymm7_6;
add ymm15_7 ymm5_7 ymm7_7;
add ymm15_8 ymm5_8 ymm7_8;
add ymm15_9 ymm5_9 ymm7_9;
add ymm15_a ymm5_a ymm7_a;
add ymm15_b ymm5_b ymm7_b;
add ymm15_c ymm5_c ymm7_c;
add ymm15_d ymm5_d ymm7_d;
add ymm15_e ymm5_e ymm7_e;
add ymm15_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x555555558d48 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpsubw %ymm10,%ymm12,%ymm10                     #! PC = 0x555555558d4c *)
sub ymm10_0 ymm12_0 ymm10_0;
sub ymm10_1 ymm12_1 ymm10_1;
sub ymm10_2 ymm12_2 ymm10_2;
sub ymm10_3 ymm12_3 ymm10_3;
sub ymm10_4 ymm12_4 ymm10_4;
sub ymm10_5 ymm12_5 ymm10_5;
sub ymm10_6 ymm12_6 ymm10_6;
sub ymm10_7 ymm12_7 ymm10_7;
sub ymm10_8 ymm12_8 ymm10_8;
sub ymm10_9 ymm12_9 ymm10_9;
sub ymm10_a ymm12_a ymm10_a;
sub ymm10_b ymm12_b ymm10_b;
sub ymm10_c ymm12_c ymm10_c;
sub ymm10_d ymm12_d ymm10_d;
sub ymm10_e ymm12_e ymm10_e;
sub ymm10_f ymm12_f ymm10_f;
(* vpsubw %ymm11,%ymm13,%ymm11                     #! PC = 0x555555558d51 *)
sub ymm11_0 ymm13_0 ymm11_0;
sub ymm11_1 ymm13_1 ymm11_1;
sub ymm11_2 ymm13_2 ymm11_2;
sub ymm11_3 ymm13_3 ymm11_3;
sub ymm11_4 ymm13_4 ymm11_4;
sub ymm11_5 ymm13_5 ymm11_5;
sub ymm11_6 ymm13_6 ymm11_6;
sub ymm11_7 ymm13_7 ymm11_7;
sub ymm11_8 ymm13_8 ymm11_8;
sub ymm11_9 ymm13_9 ymm11_9;
sub ymm11_a ymm13_a ymm11_a;
sub ymm11_b ymm13_b ymm11_b;
sub ymm11_c ymm13_c ymm11_c;
sub ymm11_d ymm13_d ymm11_d;
sub ymm11_e ymm13_e ymm11_e;
sub ymm11_f ymm13_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm13                       #! EA = L0x555555560780; Value = 0xfff7fff7fff7fff7; PC = 0x555555558d56 *)
mov ymm13_0 L0x555555560780;
mov ymm13_1 L0x555555560782;
mov ymm13_2 L0x555555560784;
mov ymm13_3 L0x555555560786;
mov ymm13_4 L0x555555560788;
mov ymm13_5 L0x55555556078a;
mov ymm13_6 L0x55555556078c;
mov ymm13_7 L0x55555556078e;
mov ymm13_8 L0x555555560790;
mov ymm13_9 L0x555555560792;
mov ymm13_a L0x555555560794;
mov ymm13_b L0x555555560796;
mov ymm13_c L0x555555560798;
mov ymm13_d L0x55555556079a;
mov ymm13_e L0x55555556079c;
mov ymm13_f L0x55555556079e;
(* vmovdqa 0xa0(%rdx),%ymm14                       #! EA = L0x5555555607a0; Value = 0xf1f7f1f7f1f7f1f7; PC = 0x555555558d5e *)
mov ymm14_0 L0x5555555607a0;
mov ymm14_1 L0x5555555607a2;
mov ymm14_2 L0x5555555607a4;
mov ymm14_3 L0x5555555607a6;
mov ymm14_4 L0x5555555607a8;
mov ymm14_5 L0x5555555607aa;
mov ymm14_6 L0x5555555607ac;
mov ymm14_7 L0x5555555607ae;
mov ymm14_8 L0x5555555607b0;
mov ymm14_9 L0x5555555607b2;
mov ymm14_a L0x5555555607b4;
mov ymm14_b L0x5555555607b6;
mov ymm14_c L0x5555555607b8;
mov ymm14_d L0x5555555607ba;
mov ymm14_e L0x5555555607bc;
mov ymm14_f L0x5555555607be;
(* vpmullw %ymm13,%ymm4,%ymm12                     #! PC = 0x555555558d66 *)
smull mulHymm4_0 mulL_0 ymm13_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm13_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm13_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm13_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm13_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm13_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm13_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm13_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm13_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm13_9 ymm4_9;
smull mulHymm4_a mulL_a ymm13_a ymm4_a;
smull mulHymm4_b mulL_b ymm13_b ymm4_b;
smull mulHymm4_c mulL_c ymm13_c ymm4_c;
smull mulHymm4_d mulL_d ymm13_d ymm4_d;
smull mulHymm4_e mulL_e ymm13_e ymm4_e;
smull mulHymm4_f mulL_f ymm13_f ymm4_f;
cast ymm12_0@sint16 mulL_0;
cast ymm12_1@sint16 mulL_1;
cast ymm12_2@sint16 mulL_2;
cast ymm12_3@sint16 mulL_3;
cast ymm12_4@sint16 mulL_4;
cast ymm12_5@sint16 mulL_5;
cast ymm12_6@sint16 mulL_6;
cast ymm12_7@sint16 mulL_7;
cast ymm12_8@sint16 mulL_8;
cast ymm12_9@sint16 mulL_9;
cast ymm12_a@sint16 mulL_a;
cast ymm12_b@sint16 mulL_b;
cast ymm12_c@sint16 mulL_c;
cast ymm12_d@sint16 mulL_d;
cast ymm12_e@sint16 mulL_e;
cast ymm12_f@sint16 mulL_f;
(* vpmulhw %ymm14,%ymm4,%ymm4                      #! PC = 0x555555558d6b *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm14_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm14_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm14_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm14_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm14_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm14_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm14_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm14_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm14_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm14_9;
smull mulH_a mulLymm4_a ymm4_a ymm14_a;
smull mulH_b mulLymm4_b ymm4_b ymm14_b;
smull mulH_c mulLymm4_c ymm4_c ymm14_c;
smull mulH_d mulLymm4_d ymm4_d ymm14_d;
smull mulH_e mulLymm4_e ymm4_e ymm14_e;
smull mulH_f mulLymm4_f ymm4_f ymm14_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm12,%ymm12                     #! PC = 0x555555558d70 *)
smull mulH_0 red_0 ymm12_0 ymm0_0;
assert true && red_0 = mulLymm4_0;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm12_1 ymm0_1;
assert true && red_1 = mulLymm4_1;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm12_2 ymm0_2;
assert true && red_2 = mulLymm4_2;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm12_3 ymm0_3;
assert true && red_3 = mulLymm4_3;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm12_4 ymm0_4;
assert true && red_4 = mulLymm4_4;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm12_5 ymm0_5;
assert true && red_5 = mulLymm4_5;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm12_6 ymm0_6;
assert true && red_6 = mulLymm4_6;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm12_7 ymm0_7;
assert true && red_7 = mulLymm4_7;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm12_8 ymm0_8;
assert true && red_8 = mulLymm4_8;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm12_9 ymm0_9;
assert true && red_9 = mulLymm4_9;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm12_a ymm0_a;
assert true && red_a = mulLymm4_a;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm12_b ymm0_b;
assert true && red_b = mulLymm4_b;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm12_c ymm0_c;
assert true && red_c = mulLymm4_c;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm12_d ymm0_d;
assert true && red_d = mulLymm4_d;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm12_e ymm0_e;
assert true && red_e = mulLymm4_e;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm12_f ymm0_f;
assert true && red_f = mulLymm4_f;
assume red_f = mulLymm4_f && true;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpsubw %ymm12,%ymm4,%ymm4                       #! PC = 0x555555558d74 *)
sub ymm4_0 ymm4_0 ymm12_0;
sub ymm4_1 ymm4_1 ymm12_1;
sub ymm4_2 ymm4_2 ymm12_2;
sub ymm4_3 ymm4_3 ymm12_3;
sub ymm4_4 ymm4_4 ymm12_4;
sub ymm4_5 ymm4_5 ymm12_5;
sub ymm4_6 ymm4_6 ymm12_6;
sub ymm4_7 ymm4_7 ymm12_7;
sub ymm4_8 ymm4_8 ymm12_8;
sub ymm4_9 ymm4_9 ymm12_9;
sub ymm4_a ymm4_a ymm12_a;
sub ymm4_b ymm4_b ymm12_b;
sub ymm4_c ymm4_c ymm12_c;
sub ymm4_d ymm4_d ymm12_d;
sub ymm4_e ymm4_e ymm12_e;
sub ymm4_f ymm4_f ymm12_f;
(* vpaddw %ymm8,%ymm4,%ymm12                       #! PC = 0x555555558d79 *)
add ymm12_0 ymm4_0 ymm8_0;
add ymm12_1 ymm4_1 ymm8_1;
add ymm12_2 ymm4_2 ymm8_2;
add ymm12_3 ymm4_3 ymm8_3;
add ymm12_4 ymm4_4 ymm8_4;
add ymm12_5 ymm4_5 ymm8_5;
add ymm12_6 ymm4_6 ymm8_6;
add ymm12_7 ymm4_7 ymm8_7;
add ymm12_8 ymm4_8 ymm8_8;
add ymm12_9 ymm4_9 ymm8_9;
add ymm12_a ymm4_a ymm8_a;
add ymm12_b ymm4_b ymm8_b;
add ymm12_c ymm4_c ymm8_c;
add ymm12_d ymm4_d ymm8_d;
add ymm12_e ymm4_e ymm8_e;
add ymm12_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x555555558d7e *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm9,%ymm15,%ymm5                       #! PC = 0x555555558d83 *)
add ymm5_0 ymm15_0 ymm9_0;
add ymm5_1 ymm15_1 ymm9_1;
add ymm5_2 ymm15_2 ymm9_2;
add ymm5_3 ymm15_3 ymm9_3;
add ymm5_4 ymm15_4 ymm9_4;
add ymm5_5 ymm15_5 ymm9_5;
add ymm5_6 ymm15_6 ymm9_6;
add ymm5_7 ymm15_7 ymm9_7;
add ymm5_8 ymm15_8 ymm9_8;
add ymm5_9 ymm15_9 ymm9_9;
add ymm5_a ymm15_a ymm9_a;
add ymm5_b ymm15_b ymm9_b;
add ymm5_c ymm15_c ymm9_c;
add ymm5_d ymm15_d ymm9_d;
add ymm5_e ymm15_e ymm9_e;
add ymm5_f ymm15_f ymm9_f;
(* vpsubw %ymm9,%ymm15,%ymm9                       #! PC = 0x555555558d88 *)
sub ymm9_0 ymm15_0 ymm9_0;
sub ymm9_1 ymm15_1 ymm9_1;
sub ymm9_2 ymm15_2 ymm9_2;
sub ymm9_3 ymm15_3 ymm9_3;
sub ymm9_4 ymm15_4 ymm9_4;
sub ymm9_5 ymm15_5 ymm9_5;
sub ymm9_6 ymm15_6 ymm9_6;
sub ymm9_7 ymm15_7 ymm9_7;
sub ymm9_8 ymm15_8 ymm9_8;
sub ymm9_9 ymm15_9 ymm9_9;
sub ymm9_a ymm15_a ymm9_a;
sub ymm9_b ymm15_b ymm9_b;
sub ymm9_c ymm15_c ymm9_c;
sub ymm9_d ymm15_d ymm9_d;
sub ymm9_e ymm15_e ymm9_e;
sub ymm9_f ymm15_f ymm9_f;
(* vpaddw %ymm10,%ymm6,%ymm13                      #! PC = 0x555555558d8d *)
add ymm13_0 ymm6_0 ymm10_0;
add ymm13_1 ymm6_1 ymm10_1;
add ymm13_2 ymm6_2 ymm10_2;
add ymm13_3 ymm6_3 ymm10_3;
add ymm13_4 ymm6_4 ymm10_4;
add ymm13_5 ymm6_5 ymm10_5;
add ymm13_6 ymm6_6 ymm10_6;
add ymm13_7 ymm6_7 ymm10_7;
add ymm13_8 ymm6_8 ymm10_8;
add ymm13_9 ymm6_9 ymm10_9;
add ymm13_a ymm6_a ymm10_a;
add ymm13_b ymm6_b ymm10_b;
add ymm13_c ymm6_c ymm10_c;
add ymm13_d ymm6_d ymm10_d;
add ymm13_e ymm6_e ymm10_e;
add ymm13_f ymm6_f ymm10_f;
(* vpsubw %ymm10,%ymm6,%ymm10                      #! PC = 0x555555558d92 *)
sub ymm10_0 ymm6_0 ymm10_0;
sub ymm10_1 ymm6_1 ymm10_1;
sub ymm10_2 ymm6_2 ymm10_2;
sub ymm10_3 ymm6_3 ymm10_3;
sub ymm10_4 ymm6_4 ymm10_4;
sub ymm10_5 ymm6_5 ymm10_5;
sub ymm10_6 ymm6_6 ymm10_6;
sub ymm10_7 ymm6_7 ymm10_7;
sub ymm10_8 ymm6_8 ymm10_8;
sub ymm10_9 ymm6_9 ymm10_9;
sub ymm10_a ymm6_a ymm10_a;
sub ymm10_b ymm6_b ymm10_b;
sub ymm10_c ymm6_c ymm10_c;
sub ymm10_d ymm6_d ymm10_d;
sub ymm10_e ymm6_e ymm10_e;
sub ymm10_f ymm6_f ymm10_f;
(* vpaddw %ymm11,%ymm7,%ymm14                      #! PC = 0x555555558d97 *)
add ymm14_0 ymm7_0 ymm11_0;
add ymm14_1 ymm7_1 ymm11_1;
add ymm14_2 ymm7_2 ymm11_2;
add ymm14_3 ymm7_3 ymm11_3;
add ymm14_4 ymm7_4 ymm11_4;
add ymm14_5 ymm7_5 ymm11_5;
add ymm14_6 ymm7_6 ymm11_6;
add ymm14_7 ymm7_7 ymm11_7;
add ymm14_8 ymm7_8 ymm11_8;
add ymm14_9 ymm7_9 ymm11_9;
add ymm14_a ymm7_a ymm11_a;
add ymm14_b ymm7_b ymm11_b;
add ymm14_c ymm7_c ymm11_c;
add ymm14_d ymm7_d ymm11_d;
add ymm14_e ymm7_e ymm11_e;
add ymm14_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x555555558d9c *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpermq $0x1b,0x440(%rdx),%ymm7                  #! EA = L0x555555560b40; Value = 0xa9e9de92f8c5fff7; PC = 0x555555558da1 *)
mov ymm7_0 L0x555555560b58;
mov ymm7_1 L0x555555560b5a;
mov ymm7_2 L0x555555560b5c;
mov ymm7_3 L0x555555560b5e;
mov ymm7_4 L0x555555560b50;
mov ymm7_5 L0x555555560b52;
mov ymm7_6 L0x555555560b54;
mov ymm7_7 L0x555555560b56;
mov ymm7_8 L0x555555560b48;
mov ymm7_9 L0x555555560b4a;
mov ymm7_a L0x555555560b4c;
mov ymm7_b L0x555555560b4e;
mov ymm7_c L0x555555560b40;
mov ymm7_d L0x555555560b42;
mov ymm7_e L0x555555560b44;
mov ymm7_f L0x555555560b46;
(* vpermq $0x1b,0x460(%rdx),%ymm15                 #! EA = L0x555555560b60; Value = 0xf7e9fa920ec5f1f7; PC = 0x555555558dab *)
mov ymm15_0 L0x555555560b78;
mov ymm15_1 L0x555555560b7a;
mov ymm15_2 L0x555555560b7c;
mov ymm15_3 L0x555555560b7e;
mov ymm15_4 L0x555555560b70;
mov ymm15_5 L0x555555560b72;
mov ymm15_6 L0x555555560b74;
mov ymm15_7 L0x555555560b76;
mov ymm15_8 L0x555555560b68;
mov ymm15_9 L0x555555560b6a;
mov ymm15_a L0x555555560b6c;
mov ymm15_b L0x555555560b6e;
mov ymm15_c L0x555555560b60;
mov ymm15_d L0x555555560b62;
mov ymm15_e L0x555555560b64;
mov ymm15_f L0x555555560b66;
(* vpmullw %ymm7,%ymm12,%ymm7                      #! PC = 0x555555558db5 *)
smull mulHymm12_0 mulL_0 ymm7_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm7_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm7_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm7_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm7_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm7_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm7_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm7_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm7_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm7_9 ymm12_9;
smull mulHymm12_a mulL_a ymm7_a ymm12_a;
smull mulHymm12_b mulL_b ymm7_b ymm12_b;
smull mulHymm12_c mulL_c ymm7_c ymm12_c;
smull mulHymm12_d mulL_d ymm7_d ymm12_d;
smull mulHymm12_e mulL_e ymm7_e ymm12_e;
smull mulHymm12_f mulL_f ymm7_f ymm12_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm12,%ymm12                    #! PC = 0x555555558db9 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm15_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm15_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm15_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm15_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm15_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm15_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm15_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm15_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm15_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm15_9;
smull mulH_a mulLymm12_a ymm12_a ymm15_a;
smull mulH_b mulLymm12_b ymm12_b ymm15_b;
smull mulH_c mulLymm12_c ymm12_c ymm15_c;
smull mulH_d mulLymm12_d ymm12_d ymm15_d;
smull mulH_e mulLymm12_e ymm12_e ymm15_e;
smull mulH_f mulLymm12_f ymm12_f ymm15_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558dbe *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm12,%ymm12                      #! PC = 0x555555558dc2 *)
sub ymm12_0 ymm12_0 ymm7_0;
sub ymm12_1 ymm12_1 ymm7_1;
sub ymm12_2 ymm12_2 ymm7_2;
sub ymm12_3 ymm12_3 ymm7_3;
sub ymm12_4 ymm12_4 ymm7_4;
sub ymm12_5 ymm12_5 ymm7_5;
sub ymm12_6 ymm12_6 ymm7_6;
sub ymm12_7 ymm12_7 ymm7_7;
sub ymm12_8 ymm12_8 ymm7_8;
sub ymm12_9 ymm12_9 ymm7_9;
sub ymm12_a ymm12_a ymm7_a;
sub ymm12_b ymm12_b ymm7_b;
sub ymm12_c ymm12_c ymm7_c;
sub ymm12_d ymm12_d ymm7_d;
sub ymm12_e ymm12_e ymm7_e;
sub ymm12_f ymm12_f ymm7_f;
(* vpermq $0x1b,0x480(%rdx),%ymm7                  #! EA = L0x555555560b80; Value = 0xedf060a7b4f106bc; PC = 0x555555558dc6 *)
mov ymm7_0 L0x555555560b98;
mov ymm7_1 L0x555555560b9a;
mov ymm7_2 L0x555555560b9c;
mov ymm7_3 L0x555555560b9e;
mov ymm7_4 L0x555555560b90;
mov ymm7_5 L0x555555560b92;
mov ymm7_6 L0x555555560b94;
mov ymm7_7 L0x555555560b96;
mov ymm7_8 L0x555555560b88;
mov ymm7_9 L0x555555560b8a;
mov ymm7_a L0x555555560b8c;
mov ymm7_b L0x555555560b8e;
mov ymm7_c L0x555555560b80;
mov ymm7_d L0x555555560b82;
mov ymm7_e L0x555555560b84;
mov ymm7_f L0x555555560b86;
(* vpermq $0x1b,0x4a0(%rdx),%ymm15                 #! EA = L0x555555560ba0; Value = 0x0df0f2a7f2f10ebc; PC = 0x555555558dd0 *)
mov ymm15_0 L0x555555560bb8;
mov ymm15_1 L0x555555560bba;
mov ymm15_2 L0x555555560bbc;
mov ymm15_3 L0x555555560bbe;
mov ymm15_4 L0x555555560bb0;
mov ymm15_5 L0x555555560bb2;
mov ymm15_6 L0x555555560bb4;
mov ymm15_7 L0x555555560bb6;
mov ymm15_8 L0x555555560ba8;
mov ymm15_9 L0x555555560baa;
mov ymm15_a L0x555555560bac;
mov ymm15_b L0x555555560bae;
mov ymm15_c L0x555555560ba0;
mov ymm15_d L0x555555560ba2;
mov ymm15_e L0x555555560ba4;
mov ymm15_f L0x555555560ba6;
(* vpmullw %ymm7,%ymm5,%ymm7                       #! PC = 0x555555558dda *)
smull mulHymm5_0 mulL_0 ymm7_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm7_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm7_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm7_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm7_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm7_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm7_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm7_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm7_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm7_9 ymm5_9;
smull mulHymm5_a mulL_a ymm7_a ymm5_a;
smull mulHymm5_b mulL_b ymm7_b ymm5_b;
smull mulHymm5_c mulL_c ymm7_c ymm5_c;
smull mulHymm5_d mulL_d ymm7_d ymm5_d;
smull mulHymm5_e mulL_e ymm7_e ymm5_e;
smull mulHymm5_f mulL_f ymm7_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm5,%ymm5                      #! PC = 0x555555558dde *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm15_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm15_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm15_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm15_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm15_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm15_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm15_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm15_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm15_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm15_9;
smull mulH_a mulLymm5_a ymm5_a ymm15_a;
smull mulH_b mulLymm5_b ymm5_b ymm15_b;
smull mulH_c mulLymm5_c ymm5_c ymm15_c;
smull mulH_d mulLymm5_d ymm5_d ymm15_d;
smull mulH_e mulLymm5_e ymm5_e ymm15_e;
smull mulH_f mulLymm5_f ymm5_f ymm15_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558de3 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm5_0;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm5_1;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm5_2;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm5_3;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm5_4;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm5_5;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm5_6;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm5_7;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm5_8;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm5_9;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm5_a;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm5_b;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm5_c;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm5_d;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm5_e;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm5_f;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm5,%ymm5                        #! PC = 0x555555558de7 *)
sub ymm5_0 ymm5_0 ymm7_0;
sub ymm5_1 ymm5_1 ymm7_1;
sub ymm5_2 ymm5_2 ymm7_2;
sub ymm5_3 ymm5_3 ymm7_3;
sub ymm5_4 ymm5_4 ymm7_4;
sub ymm5_5 ymm5_5 ymm7_5;
sub ymm5_6 ymm5_6 ymm7_6;
sub ymm5_7 ymm5_7 ymm7_7;
sub ymm5_8 ymm5_8 ymm7_8;
sub ymm5_9 ymm5_9 ymm7_9;
sub ymm5_a ymm5_a ymm7_a;
sub ymm5_b ymm5_b ymm7_b;
sub ymm5_c ymm5_c ymm7_c;
sub ymm5_d ymm5_d ymm7_d;
sub ymm5_e ymm5_e ymm7_e;
sub ymm5_f ymm5_f ymm7_f;
(* vpermq $0x1b,0x4c0(%rdx),%ymm7                  #! EA = L0x555555560bc0; Value = 0x40febbe0397eb00b; PC = 0x555555558deb *)
mov ymm7_0 L0x555555560bd8;
mov ymm7_1 L0x555555560bda;
mov ymm7_2 L0x555555560bdc;
mov ymm7_3 L0x555555560bde;
mov ymm7_4 L0x555555560bd0;
mov ymm7_5 L0x555555560bd2;
mov ymm7_6 L0x555555560bd4;
mov ymm7_7 L0x555555560bd6;
mov ymm7_8 L0x555555560bc8;
mov ymm7_9 L0x555555560bca;
mov ymm7_a L0x555555560bcc;
mov ymm7_b L0x555555560bce;
mov ymm7_c L0x555555560bc0;
mov ymm7_d L0x555555560bc2;
mov ymm7_e L0x555555560bc4;
mov ymm7_f L0x555555560bc6;
(* vpermq $0x1b,0x4e0(%rdx),%ymm15                 #! EA = L0x555555560be0; Value = 0x04fefbe0fd7efa0b; PC = 0x555555558df5 *)
mov ymm15_0 L0x555555560bf8;
mov ymm15_1 L0x555555560bfa;
mov ymm15_2 L0x555555560bfc;
mov ymm15_3 L0x555555560bfe;
mov ymm15_4 L0x555555560bf0;
mov ymm15_5 L0x555555560bf2;
mov ymm15_6 L0x555555560bf4;
mov ymm15_7 L0x555555560bf6;
mov ymm15_8 L0x555555560be8;
mov ymm15_9 L0x555555560bea;
mov ymm15_a L0x555555560bec;
mov ymm15_b L0x555555560bee;
mov ymm15_c L0x555555560be0;
mov ymm15_d L0x555555560be2;
mov ymm15_e L0x555555560be4;
mov ymm15_f L0x555555560be6;
(* vpmullw %ymm7,%ymm13,%ymm7                      #! PC = 0x555555558dff *)
smull mulHymm13_0 mulL_0 ymm7_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm7_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm7_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm7_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm7_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm7_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm7_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm7_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm7_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm7_9 ymm13_9;
smull mulHymm13_a mulL_a ymm7_a ymm13_a;
smull mulHymm13_b mulL_b ymm7_b ymm13_b;
smull mulHymm13_c mulL_c ymm7_c ymm13_c;
smull mulHymm13_d mulL_d ymm7_d ymm13_d;
smull mulHymm13_e mulL_e ymm7_e ymm13_e;
smull mulHymm13_f mulL_f ymm7_f ymm13_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm13,%ymm13                    #! PC = 0x555555558e03 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm15_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm15_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm15_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm15_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm15_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm15_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm15_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm15_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm15_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm15_9;
smull mulH_a mulLymm13_a ymm13_a ymm15_a;
smull mulH_b mulLymm13_b ymm13_b ymm15_b;
smull mulH_c mulLymm13_c ymm13_c ymm15_c;
smull mulH_d mulLymm13_d ymm13_d ymm15_d;
smull mulH_e mulLymm13_e ymm13_e ymm15_e;
smull mulH_f mulLymm13_f ymm13_f ymm15_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558e08 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm13,%ymm13                      #! PC = 0x555555558e0c *)
sub ymm13_0 ymm13_0 ymm7_0;
sub ymm13_1 ymm13_1 ymm7_1;
sub ymm13_2 ymm13_2 ymm7_2;
sub ymm13_3 ymm13_3 ymm7_3;
sub ymm13_4 ymm13_4 ymm7_4;
sub ymm13_5 ymm13_5 ymm7_5;
sub ymm13_6 ymm13_6 ymm7_6;
sub ymm13_7 ymm13_7 ymm7_7;
sub ymm13_8 ymm13_8 ymm7_8;
sub ymm13_9 ymm13_9 ymm7_9;
sub ymm13_a ymm13_a ymm7_a;
sub ymm13_b ymm13_b ymm7_b;
sub ymm13_c ymm13_c ymm7_c;
sub ymm13_d ymm13_d ymm7_d;
sub ymm13_e ymm13_e ymm7_e;
sub ymm13_f ymm13_f ymm7_f;
(* vpermq $0x1b,0x500(%rdx),%ymm7                  #! EA = L0x555555560c00; Value = 0xb7b6c124a283172a; PC = 0x555555558e10 *)
mov ymm7_0 L0x555555560c18;
mov ymm7_1 L0x555555560c1a;
mov ymm7_2 L0x555555560c1c;
mov ymm7_3 L0x555555560c1e;
mov ymm7_4 L0x555555560c10;
mov ymm7_5 L0x555555560c12;
mov ymm7_6 L0x555555560c14;
mov ymm7_7 L0x555555560c16;
mov ymm7_8 L0x555555560c08;
mov ymm7_9 L0x555555560c0a;
mov ymm7_a L0x555555560c0c;
mov ymm7_b L0x555555560c0e;
mov ymm7_c L0x555555560c00;
mov ymm7_d L0x555555560c02;
mov ymm7_e L0x555555560c04;
mov ymm7_f L0x555555560c06;
(* vpermq $0x1b,0x520(%rdx),%ymm15                 #! EA = L0x555555560c20; Value = 0x0bb6f924fc83032a; PC = 0x555555558e1a *)
mov ymm15_0 L0x555555560c38;
mov ymm15_1 L0x555555560c3a;
mov ymm15_2 L0x555555560c3c;
mov ymm15_3 L0x555555560c3e;
mov ymm15_4 L0x555555560c30;
mov ymm15_5 L0x555555560c32;
mov ymm15_6 L0x555555560c34;
mov ymm15_7 L0x555555560c36;
mov ymm15_8 L0x555555560c28;
mov ymm15_9 L0x555555560c2a;
mov ymm15_a L0x555555560c2c;
mov ymm15_b L0x555555560c2e;
mov ymm15_c L0x555555560c20;
mov ymm15_d L0x555555560c22;
mov ymm15_e L0x555555560c24;
mov ymm15_f L0x555555560c26;
(* vpmullw %ymm7,%ymm14,%ymm7                      #! PC = 0x555555558e24 *)
smull mulHymm14_0 mulL_0 ymm7_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm7_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm7_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm7_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm7_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm7_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm7_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm7_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm7_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm7_9 ymm14_9;
smull mulHymm14_a mulL_a ymm7_a ymm14_a;
smull mulHymm14_b mulL_b ymm7_b ymm14_b;
smull mulHymm14_c mulL_c ymm7_c ymm14_c;
smull mulHymm14_d mulL_d ymm7_d ymm14_d;
smull mulHymm14_e mulL_e ymm7_e ymm14_e;
smull mulHymm14_f mulL_f ymm7_f ymm14_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm14,%ymm14                    #! PC = 0x555555558e28 *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm15_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm15_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm15_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm15_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm15_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm15_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm15_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm15_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm15_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm15_9;
smull mulH_a mulLymm14_a ymm14_a ymm15_a;
smull mulH_b mulLymm14_b ymm14_b ymm15_b;
smull mulH_c mulLymm14_c ymm14_c ymm15_c;
smull mulH_d mulLymm14_d ymm14_d ymm15_d;
smull mulH_e mulLymm14_e ymm14_e ymm15_e;
smull mulH_f mulLymm14_f ymm14_f ymm15_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558e2d *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm14,%ymm14                      #! PC = 0x555555558e31 *)
sub ymm14_0 ymm14_0 ymm7_0;
sub ymm14_1 ymm14_1 ymm7_1;
sub ymm14_2 ymm14_2 ymm7_2;
sub ymm14_3 ymm14_3 ymm7_3;
sub ymm14_4 ymm14_4 ymm7_4;
sub ymm14_5 ymm14_5 ymm7_5;
sub ymm14_6 ymm14_6 ymm7_6;
sub ymm14_7 ymm14_7 ymm7_7;
sub ymm14_8 ymm14_8 ymm7_8;
sub ymm14_9 ymm14_9 ymm7_9;
sub ymm14_a ymm14_a ymm7_a;
sub ymm14_b ymm14_b ymm7_b;
sub ymm14_c ymm14_c ymm7_c;
sub ymm14_d ymm14_d ymm7_d;
sub ymm14_e ymm14_e ymm7_e;
sub ymm14_f ymm14_f ymm7_f;
(* vpermq $0x1b,0x540(%rdx),%ymm7                  #! EA = L0x555555560c40; Value = 0x0ab3996ac48bb8f1; PC = 0x555555558e35 *)
mov ymm7_0 L0x555555560c58;
mov ymm7_1 L0x555555560c5a;
mov ymm7_2 L0x555555560c5c;
mov ymm7_3 L0x555555560c5e;
mov ymm7_4 L0x555555560c50;
mov ymm7_5 L0x555555560c52;
mov ymm7_6 L0x555555560c54;
mov ymm7_7 L0x555555560c56;
mov ymm7_8 L0x555555560c48;
mov ymm7_9 L0x555555560c4a;
mov ymm7_a L0x555555560c4c;
mov ymm7_b L0x555555560c4e;
mov ymm7_c L0x555555560c40;
mov ymm7_d L0x555555560c42;
mov ymm7_e L0x555555560c44;
mov ymm7_f L0x555555560c46;
(* vpermq $0x1b,0x560(%rdx),%ymm15                 #! EA = L0x555555560c60; Value = 0x04b3056a0e8bf6f1; PC = 0x555555558e3f *)
mov ymm15_0 L0x555555560c78;
mov ymm15_1 L0x555555560c7a;
mov ymm15_2 L0x555555560c7c;
mov ymm15_3 L0x555555560c7e;
mov ymm15_4 L0x555555560c70;
mov ymm15_5 L0x555555560c72;
mov ymm15_6 L0x555555560c74;
mov ymm15_7 L0x555555560c76;
mov ymm15_8 L0x555555560c68;
mov ymm15_9 L0x555555560c6a;
mov ymm15_a L0x555555560c6c;
mov ymm15_b L0x555555560c6e;
mov ymm15_c L0x555555560c60;
mov ymm15_d L0x555555560c62;
mov ymm15_e L0x555555560c64;
mov ymm15_f L0x555555560c66;
(* vpmullw %ymm7,%ymm8,%ymm7                       #! PC = 0x555555558e49 *)
smull mulHymm8_0 mulL_0 ymm7_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm7_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm7_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm7_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm7_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm7_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm7_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm7_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm7_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm7_9 ymm8_9;
smull mulHymm8_a mulL_a ymm7_a ymm8_a;
smull mulHymm8_b mulL_b ymm7_b ymm8_b;
smull mulHymm8_c mulL_c ymm7_c ymm8_c;
smull mulHymm8_d mulL_d ymm7_d ymm8_d;
smull mulHymm8_e mulL_e ymm7_e ymm8_e;
smull mulHymm8_f mulL_f ymm7_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm8,%ymm8                      #! PC = 0x555555558e4d *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm15_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm15_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm15_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm15_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm15_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm15_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm15_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm15_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm15_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm15_9;
smull mulH_a mulLymm8_a ymm8_a ymm15_a;
smull mulH_b mulLymm8_b ymm8_b ymm15_b;
smull mulH_c mulLymm8_c ymm8_c ymm15_c;
smull mulH_d mulLymm8_d ymm8_d ymm15_d;
smull mulH_e mulLymm8_e ymm8_e ymm15_e;
smull mulH_f mulLymm8_f ymm8_f ymm15_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558e52 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm8_0;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm8_1;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm8_2;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm8_3;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm8_4;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm8_5;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm8_6;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm8_7;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm8_8;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm8_9;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm8_a;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm8_b;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm8_c;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm8_d;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm8_e;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm8_f;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x555555558e56 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vpermq $0x1b,0x580(%rdx),%ymm7                  #! EA = L0x555555560c80; Value = 0x8ee2f280eab41199; PC = 0x555555558e5a *)
mov ymm7_0 L0x555555560c98;
mov ymm7_1 L0x555555560c9a;
mov ymm7_2 L0x555555560c9c;
mov ymm7_3 L0x555555560c9e;
mov ymm7_4 L0x555555560c90;
mov ymm7_5 L0x555555560c92;
mov ymm7_6 L0x555555560c94;
mov ymm7_7 L0x555555560c96;
mov ymm7_8 L0x555555560c88;
mov ymm7_9 L0x555555560c8a;
mov ymm7_a L0x555555560c8c;
mov ymm7_b L0x555555560c8e;
mov ymm7_c L0x555555560c80;
mov ymm7_d L0x555555560c82;
mov ymm7_e L0x555555560c84;
mov ymm7_f L0x555555560c86;
(* vpermq $0x1b,0x5a0(%rdx),%ymm15                 #! EA = L0x555555560ca0; Value = 0x0ae2f28002b4ff99; PC = 0x555555558e64 *)
mov ymm15_0 L0x555555560cb8;
mov ymm15_1 L0x555555560cba;
mov ymm15_2 L0x555555560cbc;
mov ymm15_3 L0x555555560cbe;
mov ymm15_4 L0x555555560cb0;
mov ymm15_5 L0x555555560cb2;
mov ymm15_6 L0x555555560cb4;
mov ymm15_7 L0x555555560cb6;
mov ymm15_8 L0x555555560ca8;
mov ymm15_9 L0x555555560caa;
mov ymm15_a L0x555555560cac;
mov ymm15_b L0x555555560cae;
mov ymm15_c L0x555555560ca0;
mov ymm15_d L0x555555560ca2;
mov ymm15_e L0x555555560ca4;
mov ymm15_f L0x555555560ca6;
(* vpmullw %ymm7,%ymm9,%ymm7                       #! PC = 0x555555558e6e *)
smull mulHymm9_0 mulL_0 ymm7_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm7_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm7_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm7_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm7_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm7_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm7_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm7_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm7_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm7_9 ymm9_9;
smull mulHymm9_a mulL_a ymm7_a ymm9_a;
smull mulHymm9_b mulL_b ymm7_b ymm9_b;
smull mulHymm9_c mulL_c ymm7_c ymm9_c;
smull mulHymm9_d mulL_d ymm7_d ymm9_d;
smull mulHymm9_e mulL_e ymm7_e ymm9_e;
smull mulHymm9_f mulL_f ymm7_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm9,%ymm9                      #! PC = 0x555555558e72 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm15_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm15_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm15_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm15_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm15_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm15_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm15_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm15_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm15_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm15_9;
smull mulH_a mulLymm9_a ymm9_a ymm15_a;
smull mulH_b mulLymm9_b ymm9_b ymm15_b;
smull mulH_c mulLymm9_c ymm9_c ymm15_c;
smull mulH_d mulLymm9_d ymm9_d ymm15_d;
smull mulH_e mulLymm9_e ymm9_e ymm15_e;
smull mulH_f mulLymm9_f ymm9_f ymm15_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558e77 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm9_0;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm9_1;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm9_2;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm9_3;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm9_4;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm9_5;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm9_6;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm9_7;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm9_8;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm9_9;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm9_a;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm9_b;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm9_c;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm9_d;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm9_e;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm9_f;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x555555558e7b *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpermq $0x1b,0x5c0(%rdx),%ymm7                  #! EA = L0x555555560cc0; Value = 0x41f5a6a5ce0a1d43; PC = 0x555555558e7f *)
mov ymm7_0 L0x555555560cd8;
mov ymm7_1 L0x555555560cda;
mov ymm7_2 L0x555555560cdc;
mov ymm7_3 L0x555555560cde;
mov ymm7_4 L0x555555560cd0;
mov ymm7_5 L0x555555560cd2;
mov ymm7_6 L0x555555560cd4;
mov ymm7_7 L0x555555560cd6;
mov ymm7_8 L0x555555560cc8;
mov ymm7_9 L0x555555560cca;
mov ymm7_a L0x555555560ccc;
mov ymm7_b L0x555555560cce;
mov ymm7_c L0x555555560cc0;
mov ymm7_d L0x555555560cc2;
mov ymm7_e L0x555555560cc4;
mov ymm7_f L0x555555560cc6;
(* vpermq $0x1b,0x5e0(%rdx),%ymm15                 #! EA = L0x555555560ce0; Value = 0xf7f5fca5fa0af743; PC = 0x555555558e89 *)
mov ymm15_0 L0x555555560cf8;
mov ymm15_1 L0x555555560cfa;
mov ymm15_2 L0x555555560cfc;
mov ymm15_3 L0x555555560cfe;
mov ymm15_4 L0x555555560cf0;
mov ymm15_5 L0x555555560cf2;
mov ymm15_6 L0x555555560cf4;
mov ymm15_7 L0x555555560cf6;
mov ymm15_8 L0x555555560ce8;
mov ymm15_9 L0x555555560cea;
mov ymm15_a L0x555555560cec;
mov ymm15_b L0x555555560cee;
mov ymm15_c L0x555555560ce0;
mov ymm15_d L0x555555560ce2;
mov ymm15_e L0x555555560ce4;
mov ymm15_f L0x555555560ce6;
(* vpmullw %ymm7,%ymm10,%ymm7                      #! PC = 0x555555558e93 *)
smull mulHymm10_0 mulL_0 ymm7_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm7_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm7_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm7_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm7_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm7_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm7_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm7_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm7_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm7_9 ymm10_9;
smull mulHymm10_a mulL_a ymm7_a ymm10_a;
smull mulHymm10_b mulL_b ymm7_b ymm10_b;
smull mulHymm10_c mulL_c ymm7_c ymm10_c;
smull mulHymm10_d mulL_d ymm7_d ymm10_d;
smull mulHymm10_e mulL_e ymm7_e ymm10_e;
smull mulHymm10_f mulL_f ymm7_f ymm10_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm10,%ymm10                    #! PC = 0x555555558e97 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm15_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm15_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm15_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm15_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm15_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm15_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm15_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm15_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm15_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm15_9;
smull mulH_a mulLymm10_a ymm10_a ymm15_a;
smull mulH_b mulLymm10_b ymm10_b ymm15_b;
smull mulH_c mulLymm10_c ymm10_c ymm15_c;
smull mulH_d mulLymm10_d ymm10_d ymm15_d;
smull mulH_e mulLymm10_e ymm10_e ymm15_e;
smull mulH_f mulLymm10_f ymm10_f ymm15_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558e9c *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm10_0;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm10_1;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm10_2;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm10_3;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm10_4;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm10_5;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm10_6;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm10_7;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm10_8;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm10_9;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm10_a;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm10_b;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm10_c;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm10_d;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm10_e;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm10_f;
assume red_f = mulLymm10_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm10                      #! PC = 0x555555558ea0 *)
sub ymm10_0 ymm10_0 ymm7_0;
sub ymm10_1 ymm10_1 ymm7_1;
sub ymm10_2 ymm10_2 ymm7_2;
sub ymm10_3 ymm10_3 ymm7_3;
sub ymm10_4 ymm10_4 ymm7_4;
sub ymm10_5 ymm10_5 ymm7_5;
sub ymm10_6 ymm10_6 ymm7_6;
sub ymm10_7 ymm10_7 ymm7_7;
sub ymm10_8 ymm10_8 ymm7_8;
sub ymm10_9 ymm10_9 ymm7_9;
sub ymm10_a ymm10_a ymm7_a;
sub ymm10_b ymm10_b ymm7_b;
sub ymm10_c ymm10_c ymm7_c;
sub ymm10_d ymm10_d ymm7_d;
sub ymm10_e ymm10_e ymm7_e;
sub ymm10_f ymm10_f ymm7_f;
(* vpermq $0x1b,0x600(%rdx),%ymm7                  #! EA = L0x555555560d00; Value = 0xf47881b76bf4e8e7; PC = 0x555555558ea4 *)
mov ymm7_0 L0x555555560d18;
mov ymm7_1 L0x555555560d1a;
mov ymm7_2 L0x555555560d1c;
mov ymm7_3 L0x555555560d1e;
mov ymm7_4 L0x555555560d10;
mov ymm7_5 L0x555555560d12;
mov ymm7_6 L0x555555560d14;
mov ymm7_7 L0x555555560d16;
mov ymm7_8 L0x555555560d08;
mov ymm7_9 L0x555555560d0a;
mov ymm7_a L0x555555560d0c;
mov ymm7_b L0x555555560d0e;
mov ymm7_c L0x555555560d00;
mov ymm7_d L0x555555560d02;
mov ymm7_e L0x555555560d04;
mov ymm7_f L0x555555560d06;
(* vpermq $0x1b,0x620(%rdx),%ymm15                 #! EA = L0x555555560d20; Value = 0x0478f3b703f4fae7; PC = 0x555555558eae *)
mov ymm15_0 L0x555555560d38;
mov ymm15_1 L0x555555560d3a;
mov ymm15_2 L0x555555560d3c;
mov ymm15_3 L0x555555560d3e;
mov ymm15_4 L0x555555560d30;
mov ymm15_5 L0x555555560d32;
mov ymm15_6 L0x555555560d34;
mov ymm15_7 L0x555555560d36;
mov ymm15_8 L0x555555560d28;
mov ymm15_9 L0x555555560d2a;
mov ymm15_a L0x555555560d2c;
mov ymm15_b L0x555555560d2e;
mov ymm15_c L0x555555560d20;
mov ymm15_d L0x555555560d22;
mov ymm15_e L0x555555560d24;
mov ymm15_f L0x555555560d26;
(* vpmullw %ymm7,%ymm11,%ymm7                      #! PC = 0x555555558eb8 *)
smull mulHymm11_0 mulL_0 ymm7_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm7_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm7_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm7_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm7_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm7_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm7_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm7_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm7_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm7_9 ymm11_9;
smull mulHymm11_a mulL_a ymm7_a ymm11_a;
smull mulHymm11_b mulL_b ymm7_b ymm11_b;
smull mulHymm11_c mulL_c ymm7_c ymm11_c;
smull mulHymm11_d mulL_d ymm7_d ymm11_d;
smull mulHymm11_e mulL_e ymm7_e ymm11_e;
smull mulHymm11_f mulL_f ymm7_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm11,%ymm11                    #! PC = 0x555555558ebc *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm15_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm15_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm15_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm15_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm15_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm15_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm15_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm15_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm15_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm15_9;
smull mulH_a mulLymm11_a ymm11_a ymm15_a;
smull mulH_b mulLymm11_b ymm11_b ymm15_b;
smull mulH_c mulLymm11_c ymm11_c ymm15_c;
smull mulH_d mulLymm11_d ymm11_d ymm15_d;
smull mulH_e mulLymm11_e ymm11_e ymm15_e;
smull mulH_f mulLymm11_f ymm11_f ymm15_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555558ec1 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm11_0;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm11_1;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm11_2;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm11_3;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm11_4;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm11_5;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm11_6;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm11_7;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm11_8;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm11_9;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm11_a;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm11_b;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm11_c;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm11_d;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm11_e;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm11_f;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm11,%ymm11                      #! PC = 0x555555558ec5 *)
sub ymm11_0 ymm11_0 ymm7_0;
sub ymm11_1 ymm11_1 ymm7_1;
sub ymm11_2 ymm11_2 ymm7_2;
sub ymm11_3 ymm11_3 ymm7_3;
sub ymm11_4 ymm11_4 ymm7_4;
sub ymm11_5 ymm11_5 ymm7_5;
sub ymm11_6 ymm11_6 ymm7_6;
sub ymm11_7 ymm11_7 ymm7_7;
sub ymm11_8 ymm11_8 ymm7_8;
sub ymm11_9 ymm11_9 ymm7_9;
sub ymm11_a ymm11_a ymm7_a;
sub ymm11_b ymm11_b ymm7_b;
sub ymm11_c ymm11_c ymm7_c;
sub ymm11_d ymm11_d ymm7_d;
sub ymm11_e ymm11_e ymm7_e;
sub ymm11_f ymm11_f ymm7_f;
(* vpunpcklqdq %ymm5,%ymm12,%ymm3                  #! PC = 0x555555558ec9 *)
mov lqdq_0 ymm12_0;
mov lqdq_1 ymm12_1;
mov lqdq_2 ymm12_2;
mov lqdq_3 ymm12_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm12_8;
mov lqdq_9 ymm12_9;
mov lqdq_a ymm12_a;
mov lqdq_b ymm12_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm12,%ymm4                  #! PC = 0x555555558ecd *)
mov hqdq_0 ymm12_4;
mov hqdq_1 ymm12_5;
mov hqdq_2 ymm12_6;
mov hqdq_3 ymm12_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm12_c;
mov hqdq_9 ymm12_d;
mov hqdq_a ymm12_e;
mov hqdq_b ymm12_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm4_0 hqdq_0;
mov ymm4_1 hqdq_1;
mov ymm4_2 hqdq_2;
mov ymm4_3 hqdq_3;
mov ymm4_4 hqdq_4;
mov ymm4_5 hqdq_5;
mov ymm4_6 hqdq_6;
mov ymm4_7 hqdq_7;
mov ymm4_8 hqdq_8;
mov ymm4_9 hqdq_9;
mov ymm4_a hqdq_a;
mov ymm4_b hqdq_b;
mov ymm4_c hqdq_c;
mov ymm4_d hqdq_d;
mov ymm4_e hqdq_e;
mov ymm4_f hqdq_f;
(* vpunpcklqdq %ymm14,%ymm13,%ymm5                 #! PC = 0x555555558ed1 *)
mov lqdq_0 ymm13_0;
mov lqdq_1 ymm13_1;
mov lqdq_2 ymm13_2;
mov lqdq_3 ymm13_3;
mov lqdq_4 ymm14_0;
mov lqdq_5 ymm14_1;
mov lqdq_6 ymm14_2;
mov lqdq_7 ymm14_3;
mov lqdq_8 ymm13_8;
mov lqdq_9 ymm13_9;
mov lqdq_a ymm13_a;
mov lqdq_b ymm13_b;
mov lqdq_c ymm14_8;
mov lqdq_d ymm14_9;
mov lqdq_e ymm14_a;
mov lqdq_f ymm14_b;
mov ymm5_0 lqdq_0;
mov ymm5_1 lqdq_1;
mov ymm5_2 lqdq_2;
mov ymm5_3 lqdq_3;
mov ymm5_4 lqdq_4;
mov ymm5_5 lqdq_5;
mov ymm5_6 lqdq_6;
mov ymm5_7 lqdq_7;
mov ymm5_8 lqdq_8;
mov ymm5_9 lqdq_9;
mov ymm5_a lqdq_a;
mov ymm5_b lqdq_b;
mov ymm5_c lqdq_c;
mov ymm5_d lqdq_d;
mov ymm5_e lqdq_e;
mov ymm5_f lqdq_f;
(* vpunpckhqdq %ymm14,%ymm13,%ymm6                 #! PC = 0x555555558ed6 *)
mov hqdq_0 ymm13_4;
mov hqdq_1 ymm13_5;
mov hqdq_2 ymm13_6;
mov hqdq_3 ymm13_7;
mov hqdq_4 ymm14_4;
mov hqdq_5 ymm14_5;
mov hqdq_6 ymm14_6;
mov hqdq_7 ymm14_7;
mov hqdq_8 ymm13_c;
mov hqdq_9 ymm13_d;
mov hqdq_a ymm13_e;
mov hqdq_b ymm13_f;
mov hqdq_c ymm14_c;
mov hqdq_d ymm14_d;
mov hqdq_e ymm14_e;
mov hqdq_f ymm14_f;
mov ymm6_0 hqdq_0;
mov ymm6_1 hqdq_1;
mov ymm6_2 hqdq_2;
mov ymm6_3 hqdq_3;
mov ymm6_4 hqdq_4;
mov ymm6_5 hqdq_5;
mov ymm6_6 hqdq_6;
mov ymm6_7 hqdq_7;
mov ymm6_8 hqdq_8;
mov ymm6_9 hqdq_9;
mov ymm6_a hqdq_a;
mov ymm6_b hqdq_b;
mov ymm6_c hqdq_c;
mov ymm6_d hqdq_d;
mov ymm6_e hqdq_e;
mov ymm6_f hqdq_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm7                   #! PC = 0x555555558edb *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm7_0 lqdq_0;
mov ymm7_1 lqdq_1;
mov ymm7_2 lqdq_2;
mov ymm7_3 lqdq_3;
mov ymm7_4 lqdq_4;
mov ymm7_5 lqdq_5;
mov ymm7_6 lqdq_6;
mov ymm7_7 lqdq_7;
mov ymm7_8 lqdq_8;
mov ymm7_9 lqdq_9;
mov ymm7_a lqdq_a;
mov ymm7_b lqdq_b;
mov ymm7_c lqdq_c;
mov ymm7_d lqdq_d;
mov ymm7_e lqdq_e;
mov ymm7_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm8                   #! PC = 0x555555558ee0 *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm8_0 hqdq_0;
mov ymm8_1 hqdq_1;
mov ymm8_2 hqdq_2;
mov ymm8_3 hqdq_3;
mov ymm8_4 hqdq_4;
mov ymm8_5 hqdq_5;
mov ymm8_6 hqdq_6;
mov ymm8_7 hqdq_7;
mov ymm8_8 hqdq_8;
mov ymm8_9 hqdq_9;
mov ymm8_a hqdq_a;
mov ymm8_b hqdq_b;
mov ymm8_c hqdq_c;
mov ymm8_d hqdq_d;
mov ymm8_e hqdq_e;
mov ymm8_f hqdq_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm9                 #! PC = 0x555555558ee5 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm9_0 lqdq_0;
mov ymm9_1 lqdq_1;
mov ymm9_2 lqdq_2;
mov ymm9_3 lqdq_3;
mov ymm9_4 lqdq_4;
mov ymm9_5 lqdq_5;
mov ymm9_6 lqdq_6;
mov ymm9_7 lqdq_7;
mov ymm9_8 lqdq_8;
mov ymm9_9 lqdq_9;
mov ymm9_a lqdq_a;
mov ymm9_b lqdq_b;
mov ymm9_c lqdq_c;
mov ymm9_d lqdq_d;
mov ymm9_e lqdq_e;
mov ymm9_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm10                #! PC = 0x555555558eea *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm10_0 hqdq_0;
mov ymm10_1 hqdq_1;
mov ymm10_2 hqdq_2;
mov ymm10_3 hqdq_3;
mov ymm10_4 hqdq_4;
mov ymm10_5 hqdq_5;
mov ymm10_6 hqdq_6;
mov ymm10_7 hqdq_7;
mov ymm10_8 hqdq_8;
mov ymm10_9 hqdq_9;
mov ymm10_a hqdq_a;
mov ymm10_b hqdq_b;
mov ymm10_c hqdq_c;
mov ymm10_d hqdq_d;
mov ymm10_e hqdq_e;
mov ymm10_f hqdq_f;
(* vpermq $0x4e,0x200(%rdx),%ymm2                  #! EA = L0x555555560900; Value = 0x3998399839983998; PC = 0x555555558eef *)
mov ymm2_0 L0x555555560910;
mov ymm2_1 L0x555555560912;
mov ymm2_2 L0x555555560914;
mov ymm2_3 L0x555555560916;
mov ymm2_4 L0x555555560918;
mov ymm2_5 L0x55555556091a;
mov ymm2_6 L0x55555556091c;
mov ymm2_7 L0x55555556091e;
mov ymm2_8 L0x555555560900;
mov ymm2_9 L0x555555560902;
mov ymm2_a L0x555555560904;
mov ymm2_b L0x555555560906;
mov ymm2_c L0x555555560908;
mov ymm2_d L0x55555556090a;
mov ymm2_e L0x55555556090c;
mov ymm2_f L0x55555556090e;
(* vpermq $0x4e,0x220(%rdx),%ymm11                 #! EA = L0x555555560920; Value = 0x0998099809980998; PC = 0x555555558ef9 *)
mov ymm11_0 L0x555555560930;
mov ymm11_1 L0x555555560932;
mov ymm11_2 L0x555555560934;
mov ymm11_3 L0x555555560936;
mov ymm11_4 L0x555555560938;
mov ymm11_5 L0x55555556093a;
mov ymm11_6 L0x55555556093c;
mov ymm11_7 L0x55555556093e;
mov ymm11_8 L0x555555560920;
mov ymm11_9 L0x555555560922;
mov ymm11_a L0x555555560924;
mov ymm11_b L0x555555560926;
mov ymm11_c L0x555555560928;
mov ymm11_d L0x55555556092a;
mov ymm11_e L0x55555556092c;
mov ymm11_f L0x55555556092e;
(* vpsubw %ymm3,%ymm4,%ymm12                       #! PC = 0x555555558f03 *)
sub ymm12_0 ymm4_0 ymm3_0;
sub ymm12_1 ymm4_1 ymm3_1;
sub ymm12_2 ymm4_2 ymm3_2;
sub ymm12_3 ymm4_3 ymm3_3;
sub ymm12_4 ymm4_4 ymm3_4;
sub ymm12_5 ymm4_5 ymm3_5;
sub ymm12_6 ymm4_6 ymm3_6;
sub ymm12_7 ymm4_7 ymm3_7;
sub ymm12_8 ymm4_8 ymm3_8;
sub ymm12_9 ymm4_9 ymm3_9;
sub ymm12_a ymm4_a ymm3_a;
sub ymm12_b ymm4_b ymm3_b;
sub ymm12_c ymm4_c ymm3_c;
sub ymm12_d ymm4_d ymm3_d;
sub ymm12_e ymm4_e ymm3_e;
sub ymm12_f ymm4_f ymm3_f;
(* vpaddw %ymm4,%ymm3,%ymm3                        #! PC = 0x555555558f07 *)
add ymm3_0 ymm3_0 ymm4_0;
add ymm3_1 ymm3_1 ymm4_1;
add ymm3_2 ymm3_2 ymm4_2;
add ymm3_3 ymm3_3 ymm4_3;
add ymm3_4 ymm3_4 ymm4_4;
add ymm3_5 ymm3_5 ymm4_5;
add ymm3_6 ymm3_6 ymm4_6;
add ymm3_7 ymm3_7 ymm4_7;
add ymm3_8 ymm3_8 ymm4_8;
add ymm3_9 ymm3_9 ymm4_9;
add ymm3_a ymm3_a ymm4_a;
add ymm3_b ymm3_b ymm4_b;
add ymm3_c ymm3_c ymm4_c;
add ymm3_d ymm3_d ymm4_d;
add ymm3_e ymm3_e ymm4_e;
add ymm3_f ymm3_f ymm4_f;
(* vpsubw %ymm5,%ymm6,%ymm13                       #! PC = 0x555555558f0b *)
sub ymm13_0 ymm6_0 ymm5_0;
sub ymm13_1 ymm6_1 ymm5_1;
sub ymm13_2 ymm6_2 ymm5_2;
sub ymm13_3 ymm6_3 ymm5_3;
sub ymm13_4 ymm6_4 ymm5_4;
sub ymm13_5 ymm6_5 ymm5_5;
sub ymm13_6 ymm6_6 ymm5_6;
sub ymm13_7 ymm6_7 ymm5_7;
sub ymm13_8 ymm6_8 ymm5_8;
sub ymm13_9 ymm6_9 ymm5_9;
sub ymm13_a ymm6_a ymm5_a;
sub ymm13_b ymm6_b ymm5_b;
sub ymm13_c ymm6_c ymm5_c;
sub ymm13_d ymm6_d ymm5_d;
sub ymm13_e ymm6_e ymm5_e;
sub ymm13_f ymm6_f ymm5_f;
(* vpmullw %ymm2,%ymm12,%ymm4                      #! PC = 0x555555558f0f *)
smull mulHymm12_0 mulL_0 ymm2_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm2_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm2_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm2_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm2_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm2_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm2_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm2_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm2_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm2_9 ymm12_9;
smull mulHymm12_a mulL_a ymm2_a ymm12_a;
smull mulHymm12_b mulL_b ymm2_b ymm12_b;
smull mulHymm12_c mulL_c ymm2_c ymm12_c;
smull mulHymm12_d mulL_d ymm2_d ymm12_d;
smull mulHymm12_e mulL_e ymm2_e ymm12_e;
smull mulHymm12_f mulL_f ymm2_f ymm12_f;
cast ymm4_0@sint16 mulL_0;
cast ymm4_1@sint16 mulL_1;
cast ymm4_2@sint16 mulL_2;
cast ymm4_3@sint16 mulL_3;
cast ymm4_4@sint16 mulL_4;
cast ymm4_5@sint16 mulL_5;
cast ymm4_6@sint16 mulL_6;
cast ymm4_7@sint16 mulL_7;
cast ymm4_8@sint16 mulL_8;
cast ymm4_9@sint16 mulL_9;
cast ymm4_a@sint16 mulL_a;
cast ymm4_b@sint16 mulL_b;
cast ymm4_c@sint16 mulL_c;
cast ymm4_d@sint16 mulL_d;
cast ymm4_e@sint16 mulL_e;
cast ymm4_f@sint16 mulL_f;
(* vpaddw %ymm6,%ymm5,%ymm5                        #! PC = 0x555555558f13 *)
add ymm5_0 ymm5_0 ymm6_0;
add ymm5_1 ymm5_1 ymm6_1;
add ymm5_2 ymm5_2 ymm6_2;
add ymm5_3 ymm5_3 ymm6_3;
add ymm5_4 ymm5_4 ymm6_4;
add ymm5_5 ymm5_5 ymm6_5;
add ymm5_6 ymm5_6 ymm6_6;
add ymm5_7 ymm5_7 ymm6_7;
add ymm5_8 ymm5_8 ymm6_8;
add ymm5_9 ymm5_9 ymm6_9;
add ymm5_a ymm5_a ymm6_a;
add ymm5_b ymm5_b ymm6_b;
add ymm5_c ymm5_c ymm6_c;
add ymm5_d ymm5_d ymm6_d;
add ymm5_e ymm5_e ymm6_e;
add ymm5_f ymm5_f ymm6_f;
(* vpsubw %ymm7,%ymm8,%ymm14                       #! PC = 0x555555558f17 *)
sub ymm14_0 ymm8_0 ymm7_0;
sub ymm14_1 ymm8_1 ymm7_1;
sub ymm14_2 ymm8_2 ymm7_2;
sub ymm14_3 ymm8_3 ymm7_3;
sub ymm14_4 ymm8_4 ymm7_4;
sub ymm14_5 ymm8_5 ymm7_5;
sub ymm14_6 ymm8_6 ymm7_6;
sub ymm14_7 ymm8_7 ymm7_7;
sub ymm14_8 ymm8_8 ymm7_8;
sub ymm14_9 ymm8_9 ymm7_9;
sub ymm14_a ymm8_a ymm7_a;
sub ymm14_b ymm8_b ymm7_b;
sub ymm14_c ymm8_c ymm7_c;
sub ymm14_d ymm8_d ymm7_d;
sub ymm14_e ymm8_e ymm7_e;
sub ymm14_f ymm8_f ymm7_f;
(* vpmullw %ymm2,%ymm13,%ymm6                      #! PC = 0x555555558f1b *)
smull mulHymm13_0 mulL_0 ymm2_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm2_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm2_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm2_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm2_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm2_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm2_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm2_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm2_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm2_9 ymm13_9;
smull mulHymm13_a mulL_a ymm2_a ymm13_a;
smull mulHymm13_b mulL_b ymm2_b ymm13_b;
smull mulHymm13_c mulL_c ymm2_c ymm13_c;
smull mulHymm13_d mulL_d ymm2_d ymm13_d;
smull mulHymm13_e mulL_e ymm2_e ymm13_e;
smull mulHymm13_f mulL_f ymm2_f ymm13_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpaddw %ymm8,%ymm7,%ymm7                        #! PC = 0x555555558f1f *)
add ymm7_0 ymm7_0 ymm8_0;
add ymm7_1 ymm7_1 ymm8_1;
add ymm7_2 ymm7_2 ymm8_2;
add ymm7_3 ymm7_3 ymm8_3;
add ymm7_4 ymm7_4 ymm8_4;
add ymm7_5 ymm7_5 ymm8_5;
add ymm7_6 ymm7_6 ymm8_6;
add ymm7_7 ymm7_7 ymm8_7;
add ymm7_8 ymm7_8 ymm8_8;
add ymm7_9 ymm7_9 ymm8_9;
add ymm7_a ymm7_a ymm8_a;
add ymm7_b ymm7_b ymm8_b;
add ymm7_c ymm7_c ymm8_c;
add ymm7_d ymm7_d ymm8_d;
add ymm7_e ymm7_e ymm8_e;
add ymm7_f ymm7_f ymm8_f;
(* vpsubw %ymm9,%ymm10,%ymm15                      #! PC = 0x555555558f24 *)
sub ymm15_0 ymm10_0 ymm9_0;
sub ymm15_1 ymm10_1 ymm9_1;
sub ymm15_2 ymm10_2 ymm9_2;
sub ymm15_3 ymm10_3 ymm9_3;
sub ymm15_4 ymm10_4 ymm9_4;
sub ymm15_5 ymm10_5 ymm9_5;
sub ymm15_6 ymm10_6 ymm9_6;
sub ymm15_7 ymm10_7 ymm9_7;
sub ymm15_8 ymm10_8 ymm9_8;
sub ymm15_9 ymm10_9 ymm9_9;
sub ymm15_a ymm10_a ymm9_a;
sub ymm15_b ymm10_b ymm9_b;
sub ymm15_c ymm10_c ymm9_c;
sub ymm15_d ymm10_d ymm9_d;
sub ymm15_e ymm10_e ymm9_e;
sub ymm15_f ymm10_f ymm9_f;
(* vpmullw %ymm2,%ymm14,%ymm8                      #! PC = 0x555555558f29 *)
smull mulHymm14_0 mulL_0 ymm2_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm2_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm2_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm2_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm2_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm2_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm2_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm2_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm2_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm2_9 ymm14_9;
smull mulHymm14_a mulL_a ymm2_a ymm14_a;
smull mulHymm14_b mulL_b ymm2_b ymm14_b;
smull mulHymm14_c mulL_c ymm2_c ymm14_c;
smull mulHymm14_d mulL_d ymm2_d ymm14_d;
smull mulHymm14_e mulL_e ymm2_e ymm14_e;
smull mulHymm14_f mulL_f ymm2_f ymm14_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpaddw %ymm10,%ymm9,%ymm9                       #! PC = 0x555555558f2d *)
add ymm9_0 ymm9_0 ymm10_0;
add ymm9_1 ymm9_1 ymm10_1;
add ymm9_2 ymm9_2 ymm10_2;
add ymm9_3 ymm9_3 ymm10_3;
add ymm9_4 ymm9_4 ymm10_4;
add ymm9_5 ymm9_5 ymm10_5;
add ymm9_6 ymm9_6 ymm10_6;
add ymm9_7 ymm9_7 ymm10_7;
add ymm9_8 ymm9_8 ymm10_8;
add ymm9_9 ymm9_9 ymm10_9;
add ymm9_a ymm9_a ymm10_a;
add ymm9_b ymm9_b ymm10_b;
add ymm9_c ymm9_c ymm10_c;
add ymm9_d ymm9_d ymm10_d;
add ymm9_e ymm9_e ymm10_e;
add ymm9_f ymm9_f ymm10_f;
(* vpmullw %ymm2,%ymm15,%ymm10                     #! PC = 0x555555558f32 *)
smull mulHymm15_0 mulL_0 ymm2_0 ymm15_0;
smull mulHymm15_1 mulL_1 ymm2_1 ymm15_1;
smull mulHymm15_2 mulL_2 ymm2_2 ymm15_2;
smull mulHymm15_3 mulL_3 ymm2_3 ymm15_3;
smull mulHymm15_4 mulL_4 ymm2_4 ymm15_4;
smull mulHymm15_5 mulL_5 ymm2_5 ymm15_5;
smull mulHymm15_6 mulL_6 ymm2_6 ymm15_6;
smull mulHymm15_7 mulL_7 ymm2_7 ymm15_7;
smull mulHymm15_8 mulL_8 ymm2_8 ymm15_8;
smull mulHymm15_9 mulL_9 ymm2_9 ymm15_9;
smull mulHymm15_a mulL_a ymm2_a ymm15_a;
smull mulHymm15_b mulL_b ymm2_b ymm15_b;
smull mulHymm15_c mulL_c ymm2_c ymm15_c;
smull mulHymm15_d mulL_d ymm2_d ymm15_d;
smull mulHymm15_e mulL_e ymm2_e ymm15_e;
smull mulHymm15_f mulL_f ymm2_f ymm15_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm11,%ymm12,%ymm12                    #! PC = 0x555555558f36 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm11_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm11_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm11_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm11_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm11_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm11_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm11_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm11_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm11_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm11_9;
smull mulH_a mulLymm12_a ymm12_a ymm11_a;
smull mulH_b mulLymm12_b ymm12_b ymm11_b;
smull mulH_c mulLymm12_c ymm12_c ymm11_c;
smull mulH_d mulLymm12_d ymm12_d ymm11_d;
smull mulH_e mulLymm12_e ymm12_e ymm11_e;
smull mulH_f mulLymm12_f ymm12_f ymm11_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm11,%ymm13,%ymm13                    #! PC = 0x555555558f3b *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm11_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm11_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm11_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm11_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm11_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm11_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm11_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm11_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm11_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm11_9;
smull mulH_a mulLymm13_a ymm13_a ymm11_a;
smull mulH_b mulLymm13_b ymm13_b ymm11_b;
smull mulH_c mulLymm13_c ymm13_c ymm11_c;
smull mulH_d mulLymm13_d ymm13_d ymm11_d;
smull mulH_e mulLymm13_e ymm13_e ymm11_e;
smull mulH_f mulLymm13_f ymm13_f ymm11_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm11,%ymm14,%ymm14                    #! PC = 0x555555558f40 *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm11_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm11_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm11_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm11_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm11_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm11_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm11_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm11_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm11_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm11_9;
smull mulH_a mulLymm14_a ymm14_a ymm11_a;
smull mulH_b mulLymm14_b ymm14_b ymm11_b;
smull mulH_c mulLymm14_c ymm14_c ymm11_c;
smull mulH_d mulLymm14_d ymm14_d ymm11_d;
smull mulH_e mulLymm14_e ymm14_e ymm11_e;
smull mulH_f mulLymm14_f ymm14_f ymm11_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm11,%ymm15,%ymm15                    #! PC = 0x555555558f45 *)
smull mulH_0 mulLymm15_0 ymm15_0 ymm11_0;
smull mulH_1 mulLymm15_1 ymm15_1 ymm11_1;
smull mulH_2 mulLymm15_2 ymm15_2 ymm11_2;
smull mulH_3 mulLymm15_3 ymm15_3 ymm11_3;
smull mulH_4 mulLymm15_4 ymm15_4 ymm11_4;
smull mulH_5 mulLymm15_5 ymm15_5 ymm11_5;
smull mulH_6 mulLymm15_6 ymm15_6 ymm11_6;
smull mulH_7 mulLymm15_7 ymm15_7 ymm11_7;
smull mulH_8 mulLymm15_8 ymm15_8 ymm11_8;
smull mulH_9 mulLymm15_9 ymm15_9 ymm11_9;
smull mulH_a mulLymm15_a ymm15_a ymm11_a;
smull mulH_b mulLymm15_b ymm15_b ymm11_b;
smull mulH_c mulLymm15_c ymm15_c ymm11_c;
smull mulH_d mulLymm15_d ymm15_d ymm11_d;
smull mulH_e mulLymm15_e ymm15_e ymm11_e;
smull mulH_f mulLymm15_f ymm15_f ymm11_f;
mov ymm15_0 mulH_0;
mov ymm15_1 mulH_1;
mov ymm15_2 mulH_2;
mov ymm15_3 mulH_3;
mov ymm15_4 mulH_4;
mov ymm15_5 mulH_5;
mov ymm15_6 mulH_6;
mov ymm15_7 mulH_7;
mov ymm15_8 mulH_8;
mov ymm15_9 mulH_9;
mov ymm15_a mulH_a;
mov ymm15_b mulH_b;
mov ymm15_c mulH_c;
mov ymm15_d mulH_d;
mov ymm15_e mulH_e;
mov ymm15_f mulH_f;
(* vpmulhw %ymm0,%ymm4,%ymm4                       #! PC = 0x555555558f4a *)
smull mulH_0 red_0 ymm4_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm4_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm4_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm4_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm4_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm4_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm4_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm4_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm4_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm4_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm4_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm4_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm4_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm4_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm4_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm4_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x555555558f4e *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x555555558f52 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x555555558f56 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm15_0;
assume red_0 = mulLymm15_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm15_1;
assume red_1 = mulLymm15_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm15_2;
assume red_2 = mulLymm15_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm15_3;
assume red_3 = mulLymm15_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm15_4;
assume red_4 = mulLymm15_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm15_5;
assume red_5 = mulLymm15_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm15_6;
assume red_6 = mulLymm15_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm15_7;
assume red_7 = mulLymm15_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm15_8;
assume red_8 = mulLymm15_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm15_9;
assume red_9 = mulLymm15_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm15_a;
assume red_a = mulLymm15_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm15_b;
assume red_b = mulLymm15_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm15_c;
assume red_c = mulLymm15_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm15_d;
assume red_d = mulLymm15_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm15_e;
assume red_e = mulLymm15_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm15_f;
assume red_f = mulLymm15_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm4,%ymm12,%ymm4                       #! PC = 0x555555558f5a *)
sub ymm4_0 ymm12_0 ymm4_0;
sub ymm4_1 ymm12_1 ymm4_1;
sub ymm4_2 ymm12_2 ymm4_2;
sub ymm4_3 ymm12_3 ymm4_3;
sub ymm4_4 ymm12_4 ymm4_4;
sub ymm4_5 ymm12_5 ymm4_5;
sub ymm4_6 ymm12_6 ymm4_6;
sub ymm4_7 ymm12_7 ymm4_7;
sub ymm4_8 ymm12_8 ymm4_8;
sub ymm4_9 ymm12_9 ymm4_9;
sub ymm4_a ymm12_a ymm4_a;
sub ymm4_b ymm12_b ymm4_b;
sub ymm4_c ymm12_c ymm4_c;
sub ymm4_d ymm12_d ymm4_d;
sub ymm4_e ymm12_e ymm4_e;
sub ymm4_f ymm12_f ymm4_f;
(* vpsubw %ymm6,%ymm13,%ymm6                       #! PC = 0x555555558f5e *)
sub ymm6_0 ymm13_0 ymm6_0;
sub ymm6_1 ymm13_1 ymm6_1;
sub ymm6_2 ymm13_2 ymm6_2;
sub ymm6_3 ymm13_3 ymm6_3;
sub ymm6_4 ymm13_4 ymm6_4;
sub ymm6_5 ymm13_5 ymm6_5;
sub ymm6_6 ymm13_6 ymm6_6;
sub ymm6_7 ymm13_7 ymm6_7;
sub ymm6_8 ymm13_8 ymm6_8;
sub ymm6_9 ymm13_9 ymm6_9;
sub ymm6_a ymm13_a ymm6_a;
sub ymm6_b ymm13_b ymm6_b;
sub ymm6_c ymm13_c ymm6_c;
sub ymm6_d ymm13_d ymm6_d;
sub ymm6_e ymm13_e ymm6_e;
sub ymm6_f ymm13_f ymm6_f;
(* vpsubw %ymm8,%ymm14,%ymm8                       #! PC = 0x555555558f62 *)
sub ymm8_0 ymm14_0 ymm8_0;
sub ymm8_1 ymm14_1 ymm8_1;
sub ymm8_2 ymm14_2 ymm8_2;
sub ymm8_3 ymm14_3 ymm8_3;
sub ymm8_4 ymm14_4 ymm8_4;
sub ymm8_5 ymm14_5 ymm8_5;
sub ymm8_6 ymm14_6 ymm8_6;
sub ymm8_7 ymm14_7 ymm8_7;
sub ymm8_8 ymm14_8 ymm8_8;
sub ymm8_9 ymm14_9 ymm8_9;
sub ymm8_a ymm14_a ymm8_a;
sub ymm8_b ymm14_b ymm8_b;
sub ymm8_c ymm14_c ymm8_c;
sub ymm8_d ymm14_d ymm8_d;
sub ymm8_e ymm14_e ymm8_e;
sub ymm8_f ymm14_f ymm8_f;
(* vpsubw %ymm10,%ymm15,%ymm10                     #! PC = 0x555555558f67 *)
sub ymm10_0 ymm15_0 ymm10_0;
sub ymm10_1 ymm15_1 ymm10_1;
sub ymm10_2 ymm15_2 ymm10_2;
sub ymm10_3 ymm15_3 ymm10_3;
sub ymm10_4 ymm15_4 ymm10_4;
sub ymm10_5 ymm15_5 ymm10_5;
sub ymm10_6 ymm15_6 ymm10_6;
sub ymm10_7 ymm15_7 ymm10_7;
sub ymm10_8 ymm15_8 ymm10_8;
sub ymm10_9 ymm15_9 ymm10_9;
sub ymm10_a ymm15_a ymm10_a;
sub ymm10_b ymm15_b ymm10_b;
sub ymm10_c ymm15_c ymm10_c;
sub ymm10_d ymm15_d ymm10_d;
sub ymm10_e ymm15_e ymm10_e;
sub ymm10_f ymm15_f ymm10_f;
(* vperm2i128 $0x20,%ymm5,%ymm3,%ymm11             #! PC = 0x555555558f6c *)
mov perm_0 ymm3_0;
mov perm_1 ymm3_1;
mov perm_2 ymm3_2;
mov perm_3 ymm3_3;
mov perm_4 ymm3_4;
mov perm_5 ymm3_5;
mov perm_6 ymm3_6;
mov perm_7 ymm3_7;
mov perm_8 ymm5_0;
mov perm_9 ymm5_1;
mov perm_a ymm5_2;
mov perm_b ymm5_3;
mov perm_c ymm5_4;
mov perm_d ymm5_5;
mov perm_e ymm5_6;
mov perm_f ymm5_7;
mov ymm11_0 perm_0;
mov ymm11_1 perm_1;
mov ymm11_2 perm_2;
mov ymm11_3 perm_3;
mov ymm11_4 perm_4;
mov ymm11_5 perm_5;
mov ymm11_6 perm_6;
mov ymm11_7 perm_7;
mov ymm11_8 perm_8;
mov ymm11_9 perm_9;
mov ymm11_a perm_a;
mov ymm11_b perm_b;
mov ymm11_c perm_c;
mov ymm11_d perm_d;
mov ymm11_e perm_e;
mov ymm11_f perm_f;
(* vperm2i128 $0x31,%ymm5,%ymm3,%ymm5              #! PC = 0x555555558f72 *)
mov perm_0 ymm3_8;
mov perm_1 ymm3_9;
mov perm_2 ymm3_a;
mov perm_3 ymm3_b;
mov perm_4 ymm3_c;
mov perm_5 ymm3_d;
mov perm_6 ymm3_e;
mov perm_7 ymm3_f;
mov perm_8 ymm5_8;
mov perm_9 ymm5_9;
mov perm_a ymm5_a;
mov perm_b ymm5_b;
mov perm_c ymm5_c;
mov perm_d ymm5_d;
mov perm_e ymm5_e;
mov perm_f ymm5_f;
mov ymm5_0 perm_0;
mov ymm5_1 perm_1;
mov ymm5_2 perm_2;
mov ymm5_3 perm_3;
mov ymm5_4 perm_4;
mov ymm5_5 perm_5;
mov ymm5_6 perm_6;
mov ymm5_7 perm_7;
mov ymm5_8 perm_8;
mov ymm5_9 perm_9;
mov ymm5_a perm_a;
mov ymm5_b perm_b;
mov ymm5_c perm_c;
mov ymm5_d perm_d;
mov ymm5_e perm_e;
mov ymm5_f perm_f;
(* vperm2i128 $0x20,%ymm9,%ymm7,%ymm3              #! PC = 0x555555558f78 *)
mov perm_0 ymm7_0;
mov perm_1 ymm7_1;
mov perm_2 ymm7_2;
mov perm_3 ymm7_3;
mov perm_4 ymm7_4;
mov perm_5 ymm7_5;
mov perm_6 ymm7_6;
mov perm_7 ymm7_7;
mov perm_8 ymm9_0;
mov perm_9 ymm9_1;
mov perm_a ymm9_2;
mov perm_b ymm9_3;
mov perm_c ymm9_4;
mov perm_d ymm9_5;
mov perm_e ymm9_6;
mov perm_f ymm9_7;
mov ymm3_0 perm_0;
mov ymm3_1 perm_1;
mov ymm3_2 perm_2;
mov ymm3_3 perm_3;
mov ymm3_4 perm_4;
mov ymm3_5 perm_5;
mov ymm3_6 perm_6;
mov ymm3_7 perm_7;
mov ymm3_8 perm_8;
mov ymm3_9 perm_9;
mov ymm3_a perm_a;
mov ymm3_b perm_b;
mov ymm3_c perm_c;
mov ymm3_d perm_d;
mov ymm3_e perm_e;
mov ymm3_f perm_f;
(* vperm2i128 $0x31,%ymm9,%ymm7,%ymm9              #! PC = 0x555555558f7e *)
mov perm_0 ymm7_8;
mov perm_1 ymm7_9;
mov perm_2 ymm7_a;
mov perm_3 ymm7_b;
mov perm_4 ymm7_c;
mov perm_5 ymm7_d;
mov perm_6 ymm7_e;
mov perm_7 ymm7_f;
mov perm_8 ymm9_8;
mov perm_9 ymm9_9;
mov perm_a ymm9_a;
mov perm_b ymm9_b;
mov perm_c ymm9_c;
mov perm_d ymm9_d;
mov perm_e ymm9_e;
mov perm_f ymm9_f;
mov ymm9_0 perm_0;
mov ymm9_1 perm_1;
mov ymm9_2 perm_2;
mov ymm9_3 perm_3;
mov ymm9_4 perm_4;
mov ymm9_5 perm_5;
mov ymm9_6 perm_6;
mov ymm9_7 perm_7;
mov ymm9_8 perm_8;
mov ymm9_9 perm_9;
mov ymm9_a perm_a;
mov ymm9_b perm_b;
mov ymm9_c perm_c;
mov ymm9_d perm_d;
mov ymm9_e perm_e;
mov ymm9_f perm_f;
(* vperm2i128 $0x20,%ymm6,%ymm4,%ymm7              #! PC = 0x555555558f84 *)
mov perm_0 ymm4_0;
mov perm_1 ymm4_1;
mov perm_2 ymm4_2;
mov perm_3 ymm4_3;
mov perm_4 ymm4_4;
mov perm_5 ymm4_5;
mov perm_6 ymm4_6;
mov perm_7 ymm4_7;
mov perm_8 ymm6_0;
mov perm_9 ymm6_1;
mov perm_a ymm6_2;
mov perm_b ymm6_3;
mov perm_c ymm6_4;
mov perm_d ymm6_5;
mov perm_e ymm6_6;
mov perm_f ymm6_7;
mov ymm7_0 perm_0;
mov ymm7_1 perm_1;
mov ymm7_2 perm_2;
mov ymm7_3 perm_3;
mov ymm7_4 perm_4;
mov ymm7_5 perm_5;
mov ymm7_6 perm_6;
mov ymm7_7 perm_7;
mov ymm7_8 perm_8;
mov ymm7_9 perm_9;
mov ymm7_a perm_a;
mov ymm7_b perm_b;
mov ymm7_c perm_c;
mov ymm7_d perm_d;
mov ymm7_e perm_e;
mov ymm7_f perm_f;
(* vperm2i128 $0x31,%ymm6,%ymm4,%ymm6              #! PC = 0x555555558f8a *)
mov perm_0 ymm4_8;
mov perm_1 ymm4_9;
mov perm_2 ymm4_a;
mov perm_3 ymm4_b;
mov perm_4 ymm4_c;
mov perm_5 ymm4_d;
mov perm_6 ymm4_e;
mov perm_7 ymm4_f;
mov perm_8 ymm6_8;
mov perm_9 ymm6_9;
mov perm_a ymm6_a;
mov perm_b ymm6_b;
mov perm_c ymm6_c;
mov perm_d ymm6_d;
mov perm_e ymm6_e;
mov perm_f ymm6_f;
mov ymm6_0 perm_0;
mov ymm6_1 perm_1;
mov ymm6_2 perm_2;
mov ymm6_3 perm_3;
mov ymm6_4 perm_4;
mov ymm6_5 perm_5;
mov ymm6_6 perm_6;
mov ymm6_7 perm_7;
mov ymm6_8 perm_8;
mov ymm6_9 perm_9;
mov ymm6_a perm_a;
mov ymm6_b perm_b;
mov ymm6_c perm_c;
mov ymm6_d perm_d;
mov ymm6_e perm_e;
mov ymm6_f perm_f;
(* vperm2i128 $0x20,%ymm10,%ymm8,%ymm4             #! PC = 0x555555558f90 *)
mov perm_0 ymm8_0;
mov perm_1 ymm8_1;
mov perm_2 ymm8_2;
mov perm_3 ymm8_3;
mov perm_4 ymm8_4;
mov perm_5 ymm8_5;
mov perm_6 ymm8_6;
mov perm_7 ymm8_7;
mov perm_8 ymm10_0;
mov perm_9 ymm10_1;
mov perm_a ymm10_2;
mov perm_b ymm10_3;
mov perm_c ymm10_4;
mov perm_d ymm10_5;
mov perm_e ymm10_6;
mov perm_f ymm10_7;
mov ymm4_0 perm_0;
mov ymm4_1 perm_1;
mov ymm4_2 perm_2;
mov ymm4_3 perm_3;
mov ymm4_4 perm_4;
mov ymm4_5 perm_5;
mov ymm4_6 perm_6;
mov ymm4_7 perm_7;
mov ymm4_8 perm_8;
mov ymm4_9 perm_9;
mov ymm4_a perm_a;
mov ymm4_b perm_b;
mov ymm4_c perm_c;
mov ymm4_d perm_d;
mov ymm4_e perm_e;
mov ymm4_f perm_f;
(* vperm2i128 $0x31,%ymm10,%ymm8,%ymm10            #! PC = 0x555555558f96 *)
mov perm_0 ymm8_8;
mov perm_1 ymm8_9;
mov perm_2 ymm8_a;
mov perm_3 ymm8_b;
mov perm_4 ymm8_c;
mov perm_5 ymm8_d;
mov perm_6 ymm8_e;
mov perm_7 ymm8_f;
mov perm_8 ymm10_8;
mov perm_9 ymm10_9;
mov perm_a ymm10_a;
mov perm_b ymm10_b;
mov perm_c ymm10_c;
mov perm_d ymm10_d;
mov perm_e ymm10_e;
mov perm_f ymm10_f;
mov ymm10_0 perm_0;
mov ymm10_1 perm_1;
mov ymm10_2 perm_2;
mov ymm10_3 perm_3;
mov ymm10_4 perm_4;
mov ymm10_5 perm_5;
mov ymm10_6 perm_6;
mov ymm10_7 perm_7;
mov ymm10_8 perm_8;
mov ymm10_9 perm_9;
mov ymm10_a perm_a;
mov ymm10_b perm_b;
mov ymm10_c perm_c;
mov ymm10_d perm_d;
mov ymm10_e perm_e;
mov ymm10_f perm_f;
(* vmovdqa 0x1c0(%rdx),%ymm2                       #! EA = L0x5555555608c0; Value = 0x4029402940294029; PC = 0x555555558f9c *)
mov ymm2_0 L0x5555555608c0;
mov ymm2_1 L0x5555555608c2;
mov ymm2_2 L0x5555555608c4;
mov ymm2_3 L0x5555555608c6;
mov ymm2_4 L0x5555555608c8;
mov ymm2_5 L0x5555555608ca;
mov ymm2_6 L0x5555555608cc;
mov ymm2_7 L0x5555555608ce;
mov ymm2_8 L0x5555555608d0;
mov ymm2_9 L0x5555555608d2;
mov ymm2_a L0x5555555608d4;
mov ymm2_b L0x5555555608d6;
mov ymm2_c L0x5555555608d8;
mov ymm2_d L0x5555555608da;
mov ymm2_e L0x5555555608dc;
mov ymm2_f L0x5555555608de;
(* vmovdqa 0x1e0(%rdx),%ymm8                       #! EA = L0x5555555608e0; Value = 0x0e290e290e290e29; PC = 0x555555558fa4 *)
mov ymm8_0 L0x5555555608e0;
mov ymm8_1 L0x5555555608e2;
mov ymm8_2 L0x5555555608e4;
mov ymm8_3 L0x5555555608e6;
mov ymm8_4 L0x5555555608e8;
mov ymm8_5 L0x5555555608ea;
mov ymm8_6 L0x5555555608ec;
mov ymm8_7 L0x5555555608ee;
mov ymm8_8 L0x5555555608f0;
mov ymm8_9 L0x5555555608f2;
mov ymm8_a L0x5555555608f4;
mov ymm8_b L0x5555555608f6;
mov ymm8_c L0x5555555608f8;
mov ymm8_d L0x5555555608fa;
mov ymm8_e L0x5555555608fc;
mov ymm8_f L0x5555555608fe;
(* vpsubw %ymm11,%ymm5,%ymm12                      #! PC = 0x555555558fac *)
sub ymm12_0 ymm5_0 ymm11_0;
sub ymm12_1 ymm5_1 ymm11_1;
sub ymm12_2 ymm5_2 ymm11_2;
sub ymm12_3 ymm5_3 ymm11_3;
sub ymm12_4 ymm5_4 ymm11_4;
sub ymm12_5 ymm5_5 ymm11_5;
sub ymm12_6 ymm5_6 ymm11_6;
sub ymm12_7 ymm5_7 ymm11_7;
sub ymm12_8 ymm5_8 ymm11_8;
sub ymm12_9 ymm5_9 ymm11_9;
sub ymm12_a ymm5_a ymm11_a;
sub ymm12_b ymm5_b ymm11_b;
sub ymm12_c ymm5_c ymm11_c;
sub ymm12_d ymm5_d ymm11_d;
sub ymm12_e ymm5_e ymm11_e;
sub ymm12_f ymm5_f ymm11_f;
(* vpaddw %ymm5,%ymm11,%ymm11                      #! PC = 0x555555558fb1 *)
add ymm11_0 ymm11_0 ymm5_0;
add ymm11_1 ymm11_1 ymm5_1;
add ymm11_2 ymm11_2 ymm5_2;
add ymm11_3 ymm11_3 ymm5_3;
add ymm11_4 ymm11_4 ymm5_4;
add ymm11_5 ymm11_5 ymm5_5;
add ymm11_6 ymm11_6 ymm5_6;
add ymm11_7 ymm11_7 ymm5_7;
add ymm11_8 ymm11_8 ymm5_8;
add ymm11_9 ymm11_9 ymm5_9;
add ymm11_a ymm11_a ymm5_a;
add ymm11_b ymm11_b ymm5_b;
add ymm11_c ymm11_c ymm5_c;
add ymm11_d ymm11_d ymm5_d;
add ymm11_e ymm11_e ymm5_e;
add ymm11_f ymm11_f ymm5_f;
(* vpsubw %ymm3,%ymm9,%ymm13                       #! PC = 0x555555558fb5 *)
sub ymm13_0 ymm9_0 ymm3_0;
sub ymm13_1 ymm9_1 ymm3_1;
sub ymm13_2 ymm9_2 ymm3_2;
sub ymm13_3 ymm9_3 ymm3_3;
sub ymm13_4 ymm9_4 ymm3_4;
sub ymm13_5 ymm9_5 ymm3_5;
sub ymm13_6 ymm9_6 ymm3_6;
sub ymm13_7 ymm9_7 ymm3_7;
sub ymm13_8 ymm9_8 ymm3_8;
sub ymm13_9 ymm9_9 ymm3_9;
sub ymm13_a ymm9_a ymm3_a;
sub ymm13_b ymm9_b ymm3_b;
sub ymm13_c ymm9_c ymm3_c;
sub ymm13_d ymm9_d ymm3_d;
sub ymm13_e ymm9_e ymm3_e;
sub ymm13_f ymm9_f ymm3_f;
(* vpmullw %ymm2,%ymm12,%ymm5                      #! PC = 0x555555558fb9 *)
smull mulHymm12_0 mulL_0 ymm2_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm2_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm2_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm2_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm2_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm2_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm2_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm2_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm2_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm2_9 ymm12_9;
smull mulHymm12_a mulL_a ymm2_a ymm12_a;
smull mulHymm12_b mulL_b ymm2_b ymm12_b;
smull mulHymm12_c mulL_c ymm2_c ymm12_c;
smull mulHymm12_d mulL_d ymm2_d ymm12_d;
smull mulHymm12_e mulL_e ymm2_e ymm12_e;
smull mulHymm12_f mulL_f ymm2_f ymm12_f;
cast ymm5_0@sint16 mulL_0;
cast ymm5_1@sint16 mulL_1;
cast ymm5_2@sint16 mulL_2;
cast ymm5_3@sint16 mulL_3;
cast ymm5_4@sint16 mulL_4;
cast ymm5_5@sint16 mulL_5;
cast ymm5_6@sint16 mulL_6;
cast ymm5_7@sint16 mulL_7;
cast ymm5_8@sint16 mulL_8;
cast ymm5_9@sint16 mulL_9;
cast ymm5_a@sint16 mulL_a;
cast ymm5_b@sint16 mulL_b;
cast ymm5_c@sint16 mulL_c;
cast ymm5_d@sint16 mulL_d;
cast ymm5_e@sint16 mulL_e;
cast ymm5_f@sint16 mulL_f;
(* vpaddw %ymm9,%ymm3,%ymm3                        #! PC = 0x555555558fbd *)
add ymm3_0 ymm3_0 ymm9_0;
add ymm3_1 ymm3_1 ymm9_1;
add ymm3_2 ymm3_2 ymm9_2;
add ymm3_3 ymm3_3 ymm9_3;
add ymm3_4 ymm3_4 ymm9_4;
add ymm3_5 ymm3_5 ymm9_5;
add ymm3_6 ymm3_6 ymm9_6;
add ymm3_7 ymm3_7 ymm9_7;
add ymm3_8 ymm3_8 ymm9_8;
add ymm3_9 ymm3_9 ymm9_9;
add ymm3_a ymm3_a ymm9_a;
add ymm3_b ymm3_b ymm9_b;
add ymm3_c ymm3_c ymm9_c;
add ymm3_d ymm3_d ymm9_d;
add ymm3_e ymm3_e ymm9_e;
add ymm3_f ymm3_f ymm9_f;
(* vpsubw %ymm7,%ymm6,%ymm14                       #! PC = 0x555555558fc2 *)
sub ymm14_0 ymm6_0 ymm7_0;
sub ymm14_1 ymm6_1 ymm7_1;
sub ymm14_2 ymm6_2 ymm7_2;
sub ymm14_3 ymm6_3 ymm7_3;
sub ymm14_4 ymm6_4 ymm7_4;
sub ymm14_5 ymm6_5 ymm7_5;
sub ymm14_6 ymm6_6 ymm7_6;
sub ymm14_7 ymm6_7 ymm7_7;
sub ymm14_8 ymm6_8 ymm7_8;
sub ymm14_9 ymm6_9 ymm7_9;
sub ymm14_a ymm6_a ymm7_a;
sub ymm14_b ymm6_b ymm7_b;
sub ymm14_c ymm6_c ymm7_c;
sub ymm14_d ymm6_d ymm7_d;
sub ymm14_e ymm6_e ymm7_e;
sub ymm14_f ymm6_f ymm7_f;
(* vpmullw %ymm2,%ymm13,%ymm9                      #! PC = 0x555555558fc6 *)
smull mulHymm13_0 mulL_0 ymm2_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm2_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm2_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm2_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm2_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm2_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm2_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm2_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm2_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm2_9 ymm13_9;
smull mulHymm13_a mulL_a ymm2_a ymm13_a;
smull mulHymm13_b mulL_b ymm2_b ymm13_b;
smull mulHymm13_c mulL_c ymm2_c ymm13_c;
smull mulHymm13_d mulL_d ymm2_d ymm13_d;
smull mulHymm13_e mulL_e ymm2_e ymm13_e;
smull mulHymm13_f mulL_f ymm2_f ymm13_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpaddw %ymm6,%ymm7,%ymm7                        #! PC = 0x555555558fca *)
add ymm7_0 ymm7_0 ymm6_0;
add ymm7_1 ymm7_1 ymm6_1;
add ymm7_2 ymm7_2 ymm6_2;
add ymm7_3 ymm7_3 ymm6_3;
add ymm7_4 ymm7_4 ymm6_4;
add ymm7_5 ymm7_5 ymm6_5;
add ymm7_6 ymm7_6 ymm6_6;
add ymm7_7 ymm7_7 ymm6_7;
add ymm7_8 ymm7_8 ymm6_8;
add ymm7_9 ymm7_9 ymm6_9;
add ymm7_a ymm7_a ymm6_a;
add ymm7_b ymm7_b ymm6_b;
add ymm7_c ymm7_c ymm6_c;
add ymm7_d ymm7_d ymm6_d;
add ymm7_e ymm7_e ymm6_e;
add ymm7_f ymm7_f ymm6_f;
(* vpsubw %ymm4,%ymm10,%ymm15                      #! PC = 0x555555558fce *)
sub ymm15_0 ymm10_0 ymm4_0;
sub ymm15_1 ymm10_1 ymm4_1;
sub ymm15_2 ymm10_2 ymm4_2;
sub ymm15_3 ymm10_3 ymm4_3;
sub ymm15_4 ymm10_4 ymm4_4;
sub ymm15_5 ymm10_5 ymm4_5;
sub ymm15_6 ymm10_6 ymm4_6;
sub ymm15_7 ymm10_7 ymm4_7;
sub ymm15_8 ymm10_8 ymm4_8;
sub ymm15_9 ymm10_9 ymm4_9;
sub ymm15_a ymm10_a ymm4_a;
sub ymm15_b ymm10_b ymm4_b;
sub ymm15_c ymm10_c ymm4_c;
sub ymm15_d ymm10_d ymm4_d;
sub ymm15_e ymm10_e ymm4_e;
sub ymm15_f ymm10_f ymm4_f;
(* vpmullw %ymm2,%ymm14,%ymm6                      #! PC = 0x555555558fd2 *)
smull mulHymm14_0 mulL_0 ymm2_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm2_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm2_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm2_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm2_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm2_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm2_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm2_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm2_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm2_9 ymm14_9;
smull mulHymm14_a mulL_a ymm2_a ymm14_a;
smull mulHymm14_b mulL_b ymm2_b ymm14_b;
smull mulHymm14_c mulL_c ymm2_c ymm14_c;
smull mulHymm14_d mulL_d ymm2_d ymm14_d;
smull mulHymm14_e mulL_e ymm2_e ymm14_e;
smull mulHymm14_f mulL_f ymm2_f ymm14_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpaddw %ymm10,%ymm4,%ymm4                       #! PC = 0x555555558fd6 *)
add ymm4_0 ymm4_0 ymm10_0;
add ymm4_1 ymm4_1 ymm10_1;
add ymm4_2 ymm4_2 ymm10_2;
add ymm4_3 ymm4_3 ymm10_3;
add ymm4_4 ymm4_4 ymm10_4;
add ymm4_5 ymm4_5 ymm10_5;
add ymm4_6 ymm4_6 ymm10_6;
add ymm4_7 ymm4_7 ymm10_7;
add ymm4_8 ymm4_8 ymm10_8;
add ymm4_9 ymm4_9 ymm10_9;
add ymm4_a ymm4_a ymm10_a;
add ymm4_b ymm4_b ymm10_b;
add ymm4_c ymm4_c ymm10_c;
add ymm4_d ymm4_d ymm10_d;
add ymm4_e ymm4_e ymm10_e;
add ymm4_f ymm4_f ymm10_f;
(* vpmullw %ymm2,%ymm15,%ymm10                     #! PC = 0x555555558fdb *)
smull mulHymm15_0 mulL_0 ymm2_0 ymm15_0;
smull mulHymm15_1 mulL_1 ymm2_1 ymm15_1;
smull mulHymm15_2 mulL_2 ymm2_2 ymm15_2;
smull mulHymm15_3 mulL_3 ymm2_3 ymm15_3;
smull mulHymm15_4 mulL_4 ymm2_4 ymm15_4;
smull mulHymm15_5 mulL_5 ymm2_5 ymm15_5;
smull mulHymm15_6 mulL_6 ymm2_6 ymm15_6;
smull mulHymm15_7 mulL_7 ymm2_7 ymm15_7;
smull mulHymm15_8 mulL_8 ymm2_8 ymm15_8;
smull mulHymm15_9 mulL_9 ymm2_9 ymm15_9;
smull mulHymm15_a mulL_a ymm2_a ymm15_a;
smull mulHymm15_b mulL_b ymm2_b ymm15_b;
smull mulHymm15_c mulL_c ymm2_c ymm15_c;
smull mulHymm15_d mulL_d ymm2_d ymm15_d;
smull mulHymm15_e mulL_e ymm2_e ymm15_e;
smull mulHymm15_f mulL_f ymm2_f ymm15_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm8,%ymm12,%ymm12                     #! PC = 0x555555558fdf *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm8_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm8_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm8_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm8_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm8_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm8_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm8_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm8_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm8_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm8_9;
smull mulH_a mulLymm12_a ymm12_a ymm8_a;
smull mulH_b mulLymm12_b ymm12_b ymm8_b;
smull mulH_c mulLymm12_c ymm12_c ymm8_c;
smull mulH_d mulLymm12_d ymm12_d ymm8_d;
smull mulH_e mulLymm12_e ymm12_e ymm8_e;
smull mulH_f mulLymm12_f ymm12_f ymm8_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm8,%ymm13,%ymm13                     #! PC = 0x555555558fe4 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm8_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm8_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm8_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm8_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm8_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm8_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm8_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm8_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm8_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm8_9;
smull mulH_a mulLymm13_a ymm13_a ymm8_a;
smull mulH_b mulLymm13_b ymm13_b ymm8_b;
smull mulH_c mulLymm13_c ymm13_c ymm8_c;
smull mulH_d mulLymm13_d ymm13_d ymm8_d;
smull mulH_e mulLymm13_e ymm13_e ymm8_e;
smull mulH_f mulLymm13_f ymm13_f ymm8_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm8,%ymm14,%ymm14                     #! PC = 0x555555558fe9 *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm8_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm8_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm8_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm8_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm8_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm8_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm8_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm8_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm8_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm8_9;
smull mulH_a mulLymm14_a ymm14_a ymm8_a;
smull mulH_b mulLymm14_b ymm14_b ymm8_b;
smull mulH_c mulLymm14_c ymm14_c ymm8_c;
smull mulH_d mulLymm14_d ymm14_d ymm8_d;
smull mulH_e mulLymm14_e ymm14_e ymm8_e;
smull mulH_f mulLymm14_f ymm14_f ymm8_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm8,%ymm15,%ymm15                     #! PC = 0x555555558fee *)
smull mulH_0 mulLymm15_0 ymm15_0 ymm8_0;
smull mulH_1 mulLymm15_1 ymm15_1 ymm8_1;
smull mulH_2 mulLymm15_2 ymm15_2 ymm8_2;
smull mulH_3 mulLymm15_3 ymm15_3 ymm8_3;
smull mulH_4 mulLymm15_4 ymm15_4 ymm8_4;
smull mulH_5 mulLymm15_5 ymm15_5 ymm8_5;
smull mulH_6 mulLymm15_6 ymm15_6 ymm8_6;
smull mulH_7 mulLymm15_7 ymm15_7 ymm8_7;
smull mulH_8 mulLymm15_8 ymm15_8 ymm8_8;
smull mulH_9 mulLymm15_9 ymm15_9 ymm8_9;
smull mulH_a mulLymm15_a ymm15_a ymm8_a;
smull mulH_b mulLymm15_b ymm15_b ymm8_b;
smull mulH_c mulLymm15_c ymm15_c ymm8_c;
smull mulH_d mulLymm15_d ymm15_d ymm8_d;
smull mulH_e mulLymm15_e ymm15_e ymm8_e;
smull mulH_f mulLymm15_f ymm15_f ymm8_f;
mov ymm15_0 mulH_0;
mov ymm15_1 mulH_1;
mov ymm15_2 mulH_2;
mov ymm15_3 mulH_3;
mov ymm15_4 mulH_4;
mov ymm15_5 mulH_5;
mov ymm15_6 mulH_6;
mov ymm15_7 mulH_7;
mov ymm15_8 mulH_8;
mov ymm15_9 mulH_9;
mov ymm15_a mulH_a;
mov ymm15_b mulH_b;
mov ymm15_c mulH_c;
mov ymm15_d mulH_d;
mov ymm15_e mulH_e;
mov ymm15_f mulH_f;
(* vpmulhw %ymm0,%ymm5,%ymm5                       #! PC = 0x555555558ff3 *)
smull mulH_0 red_0 ymm5_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm5_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm5_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm5_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm5_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm5_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm5_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm5_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm5_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm5_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm5_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm5_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm5_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm5_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm5_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm5_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x555555558ff7 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x555555558ffb *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x555555558fff *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm15_0;
assume red_0 = mulLymm15_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm15_1;
assume red_1 = mulLymm15_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm15_2;
assume red_2 = mulLymm15_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm15_3;
assume red_3 = mulLymm15_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm15_4;
assume red_4 = mulLymm15_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm15_5;
assume red_5 = mulLymm15_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm15_6;
assume red_6 = mulLymm15_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm15_7;
assume red_7 = mulLymm15_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm15_8;
assume red_8 = mulLymm15_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm15_9;
assume red_9 = mulLymm15_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm15_a;
assume red_a = mulLymm15_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm15_b;
assume red_b = mulLymm15_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm15_c;
assume red_c = mulLymm15_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm15_d;
assume red_d = mulLymm15_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm15_e;
assume red_e = mulLymm15_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm15_f;
assume red_f = mulLymm15_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm12,%ymm5                       #! PC = 0x555555559003 *)
sub ymm5_0 ymm12_0 ymm5_0;
sub ymm5_1 ymm12_1 ymm5_1;
sub ymm5_2 ymm12_2 ymm5_2;
sub ymm5_3 ymm12_3 ymm5_3;
sub ymm5_4 ymm12_4 ymm5_4;
sub ymm5_5 ymm12_5 ymm5_5;
sub ymm5_6 ymm12_6 ymm5_6;
sub ymm5_7 ymm12_7 ymm5_7;
sub ymm5_8 ymm12_8 ymm5_8;
sub ymm5_9 ymm12_9 ymm5_9;
sub ymm5_a ymm12_a ymm5_a;
sub ymm5_b ymm12_b ymm5_b;
sub ymm5_c ymm12_c ymm5_c;
sub ymm5_d ymm12_d ymm5_d;
sub ymm5_e ymm12_e ymm5_e;
sub ymm5_f ymm12_f ymm5_f;
(* vpsubw %ymm9,%ymm13,%ymm9                       #! PC = 0x555555559007 *)
sub ymm9_0 ymm13_0 ymm9_0;
sub ymm9_1 ymm13_1 ymm9_1;
sub ymm9_2 ymm13_2 ymm9_2;
sub ymm9_3 ymm13_3 ymm9_3;
sub ymm9_4 ymm13_4 ymm9_4;
sub ymm9_5 ymm13_5 ymm9_5;
sub ymm9_6 ymm13_6 ymm9_6;
sub ymm9_7 ymm13_7 ymm9_7;
sub ymm9_8 ymm13_8 ymm9_8;
sub ymm9_9 ymm13_9 ymm9_9;
sub ymm9_a ymm13_a ymm9_a;
sub ymm9_b ymm13_b ymm9_b;
sub ymm9_c ymm13_c ymm9_c;
sub ymm9_d ymm13_d ymm9_d;
sub ymm9_e ymm13_e ymm9_e;
sub ymm9_f ymm13_f ymm9_f;
(* vpsubw %ymm6,%ymm14,%ymm6                       #! PC = 0x55555555900c *)
sub ymm6_0 ymm14_0 ymm6_0;
sub ymm6_1 ymm14_1 ymm6_1;
sub ymm6_2 ymm14_2 ymm6_2;
sub ymm6_3 ymm14_3 ymm6_3;
sub ymm6_4 ymm14_4 ymm6_4;
sub ymm6_5 ymm14_5 ymm6_5;
sub ymm6_6 ymm14_6 ymm6_6;
sub ymm6_7 ymm14_7 ymm6_7;
sub ymm6_8 ymm14_8 ymm6_8;
sub ymm6_9 ymm14_9 ymm6_9;
sub ymm6_a ymm14_a ymm6_a;
sub ymm6_b ymm14_b ymm6_b;
sub ymm6_c ymm14_c ymm6_c;
sub ymm6_d ymm14_d ymm6_d;
sub ymm6_e ymm14_e ymm6_e;
sub ymm6_f ymm14_f ymm6_f;
(* vpsubw %ymm10,%ymm15,%ymm10                     #! PC = 0x555555559010 *)
sub ymm10_0 ymm15_0 ymm10_0;
sub ymm10_1 ymm15_1 ymm10_1;
sub ymm10_2 ymm15_2 ymm10_2;
sub ymm10_3 ymm15_3 ymm10_3;
sub ymm10_4 ymm15_4 ymm10_4;
sub ymm10_5 ymm15_5 ymm10_5;
sub ymm10_6 ymm15_6 ymm10_6;
sub ymm10_7 ymm15_7 ymm10_7;
sub ymm10_8 ymm15_8 ymm10_8;
sub ymm10_9 ymm15_9 ymm10_9;
sub ymm10_a ymm15_a ymm10_a;
sub ymm10_b ymm15_b ymm10_b;
sub ymm10_c ymm15_c ymm10_c;
sub ymm10_d ymm15_d ymm10_d;
sub ymm10_e ymm15_e ymm10_e;
sub ymm10_f ymm15_f ymm10_f;
(* vmovdqa 0x80(%rdx),%ymm14                       #! EA = L0x555555560780; Value = 0xfff7fff7fff7fff7; PC = 0x555555559015 *)
mov ymm14_0 L0x555555560780;
mov ymm14_1 L0x555555560782;
mov ymm14_2 L0x555555560784;
mov ymm14_3 L0x555555560786;
mov ymm14_4 L0x555555560788;
mov ymm14_5 L0x55555556078a;
mov ymm14_6 L0x55555556078c;
mov ymm14_7 L0x55555556078e;
mov ymm14_8 L0x555555560790;
mov ymm14_9 L0x555555560792;
mov ymm14_a L0x555555560794;
mov ymm14_b L0x555555560796;
mov ymm14_c L0x555555560798;
mov ymm14_d L0x55555556079a;
mov ymm14_e L0x55555556079c;
mov ymm14_f L0x55555556079e;
(* vmovdqa 0xa0(%rdx),%ymm15                       #! EA = L0x5555555607a0; Value = 0xf1f7f1f7f1f7f1f7; PC = 0x55555555901d *)
mov ymm15_0 L0x5555555607a0;
mov ymm15_1 L0x5555555607a2;
mov ymm15_2 L0x5555555607a4;
mov ymm15_3 L0x5555555607a6;
mov ymm15_4 L0x5555555607a8;
mov ymm15_5 L0x5555555607aa;
mov ymm15_6 L0x5555555607ac;
mov ymm15_7 L0x5555555607ae;
mov ymm15_8 L0x5555555607b0;
mov ymm15_9 L0x5555555607b2;
mov ymm15_a L0x5555555607b4;
mov ymm15_b L0x5555555607b6;
mov ymm15_c L0x5555555607b8;
mov ymm15_d L0x5555555607ba;
mov ymm15_e L0x5555555607bc;
mov ymm15_f L0x5555555607be;
(* vpmullw %ymm14,%ymm11,%ymm13                    #! PC = 0x555555559025 *)
smull mulHymm11_0 mulL_0 ymm14_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm14_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm14_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm14_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm14_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm14_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm14_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm14_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm14_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm14_9 ymm11_9;
smull mulHymm11_a mulL_a ymm14_a ymm11_a;
smull mulHymm11_b mulL_b ymm14_b ymm11_b;
smull mulHymm11_c mulL_c ymm14_c ymm11_c;
smull mulHymm11_d mulL_d ymm14_d ymm11_d;
smull mulHymm11_e mulL_e ymm14_e ymm11_e;
smull mulHymm11_f mulL_f ymm14_f ymm11_f;
cast ymm13_0@sint16 mulL_0;
cast ymm13_1@sint16 mulL_1;
cast ymm13_2@sint16 mulL_2;
cast ymm13_3@sint16 mulL_3;
cast ymm13_4@sint16 mulL_4;
cast ymm13_5@sint16 mulL_5;
cast ymm13_6@sint16 mulL_6;
cast ymm13_7@sint16 mulL_7;
cast ymm13_8@sint16 mulL_8;
cast ymm13_9@sint16 mulL_9;
cast ymm13_a@sint16 mulL_a;
cast ymm13_b@sint16 mulL_b;
cast ymm13_c@sint16 mulL_c;
cast ymm13_d@sint16 mulL_d;
cast ymm13_e@sint16 mulL_e;
cast ymm13_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm11,%ymm11                    #! PC = 0x55555555902a *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm15_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm15_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm15_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm15_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm15_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm15_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm15_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm15_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm15_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm15_9;
smull mulH_a mulLymm11_a ymm11_a ymm15_a;
smull mulH_b mulLymm11_b ymm11_b ymm15_b;
smull mulH_c mulLymm11_c ymm11_c ymm15_c;
smull mulH_d mulLymm11_d ymm11_d ymm15_d;
smull mulH_e mulLymm11_e ymm11_e ymm15_e;
smull mulH_f mulLymm11_f ymm11_f ymm15_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm13,%ymm13                     #! PC = 0x55555555902f *)
smull mulH_0 red_0 ymm13_0 ymm0_0;
assert true && red_0 = mulLymm11_0;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm13_1 ymm0_1;
assert true && red_1 = mulLymm11_1;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm13_2 ymm0_2;
assert true && red_2 = mulLymm11_2;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm13_3 ymm0_3;
assert true && red_3 = mulLymm11_3;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm13_4 ymm0_4;
assert true && red_4 = mulLymm11_4;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm13_5 ymm0_5;
assert true && red_5 = mulLymm11_5;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm13_6 ymm0_6;
assert true && red_6 = mulLymm11_6;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm13_7 ymm0_7;
assert true && red_7 = mulLymm11_7;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm13_8 ymm0_8;
assert true && red_8 = mulLymm11_8;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm13_9 ymm0_9;
assert true && red_9 = mulLymm11_9;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm13_a ymm0_a;
assert true && red_a = mulLymm11_a;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm13_b ymm0_b;
assert true && red_b = mulLymm11_b;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm13_c ymm0_c;
assert true && red_c = mulLymm11_c;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm13_d ymm0_d;
assert true && red_d = mulLymm11_d;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm13_e ymm0_e;
assert true && red_e = mulLymm11_e;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm13_f ymm0_f;
assert true && red_f = mulLymm11_f;
assume red_f = mulLymm11_f && true;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpsubw %ymm13,%ymm11,%ymm11                     #! PC = 0x555555559033 *)
sub ymm11_0 ymm11_0 ymm13_0;
sub ymm11_1 ymm11_1 ymm13_1;
sub ymm11_2 ymm11_2 ymm13_2;
sub ymm11_3 ymm11_3 ymm13_3;
sub ymm11_4 ymm11_4 ymm13_4;
sub ymm11_5 ymm11_5 ymm13_5;
sub ymm11_6 ymm11_6 ymm13_6;
sub ymm11_7 ymm11_7 ymm13_7;
sub ymm11_8 ymm11_8 ymm13_8;
sub ymm11_9 ymm11_9 ymm13_9;
sub ymm11_a ymm11_a ymm13_a;
sub ymm11_b ymm11_b ymm13_b;
sub ymm11_c ymm11_c ymm13_c;
sub ymm11_d ymm11_d ymm13_d;
sub ymm11_e ymm11_e ymm13_e;
sub ymm11_f ymm11_f ymm13_f;
(* vpmullw %ymm14,%ymm3,%ymm13                     #! PC = 0x555555559038 *)
smull mulHymm3_0 mulL_0 ymm14_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm14_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm14_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm14_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm14_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm14_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm14_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm14_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm14_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm14_9 ymm3_9;
smull mulHymm3_a mulL_a ymm14_a ymm3_a;
smull mulHymm3_b mulL_b ymm14_b ymm3_b;
smull mulHymm3_c mulL_c ymm14_c ymm3_c;
smull mulHymm3_d mulL_d ymm14_d ymm3_d;
smull mulHymm3_e mulL_e ymm14_e ymm3_e;
smull mulHymm3_f mulL_f ymm14_f ymm3_f;
cast ymm13_0@sint16 mulL_0;
cast ymm13_1@sint16 mulL_1;
cast ymm13_2@sint16 mulL_2;
cast ymm13_3@sint16 mulL_3;
cast ymm13_4@sint16 mulL_4;
cast ymm13_5@sint16 mulL_5;
cast ymm13_6@sint16 mulL_6;
cast ymm13_7@sint16 mulL_7;
cast ymm13_8@sint16 mulL_8;
cast ymm13_9@sint16 mulL_9;
cast ymm13_a@sint16 mulL_a;
cast ymm13_b@sint16 mulL_b;
cast ymm13_c@sint16 mulL_c;
cast ymm13_d@sint16 mulL_d;
cast ymm13_e@sint16 mulL_e;
cast ymm13_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm3,%ymm3                      #! PC = 0x55555555903d *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm15_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm15_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm15_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm15_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm15_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm15_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm15_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm15_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm15_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm15_9;
smull mulH_a mulLymm3_a ymm3_a ymm15_a;
smull mulH_b mulLymm3_b ymm3_b ymm15_b;
smull mulH_c mulLymm3_c ymm3_c ymm15_c;
smull mulH_d mulLymm3_d ymm3_d ymm15_d;
smull mulH_e mulLymm3_e ymm3_e ymm15_e;
smull mulH_f mulLymm3_f ymm3_f ymm15_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm13,%ymm13                     #! PC = 0x555555559042 *)
smull mulH_0 red_0 ymm13_0 ymm0_0;
assert true && red_0 = mulLymm3_0;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm13_1 ymm0_1;
assert true && red_1 = mulLymm3_1;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm13_2 ymm0_2;
assert true && red_2 = mulLymm3_2;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm13_3 ymm0_3;
assert true && red_3 = mulLymm3_3;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm13_4 ymm0_4;
assert true && red_4 = mulLymm3_4;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm13_5 ymm0_5;
assert true && red_5 = mulLymm3_5;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm13_6 ymm0_6;
assert true && red_6 = mulLymm3_6;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm13_7 ymm0_7;
assert true && red_7 = mulLymm3_7;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm13_8 ymm0_8;
assert true && red_8 = mulLymm3_8;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm13_9 ymm0_9;
assert true && red_9 = mulLymm3_9;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm13_a ymm0_a;
assert true && red_a = mulLymm3_a;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm13_b ymm0_b;
assert true && red_b = mulLymm3_b;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm13_c ymm0_c;
assert true && red_c = mulLymm3_c;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm13_d ymm0_d;
assert true && red_d = mulLymm3_d;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm13_e ymm0_e;
assert true && red_e = mulLymm3_e;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm13_f ymm0_f;
assert true && red_f = mulLymm3_f;
assume red_f = mulLymm3_f && true;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpsubw %ymm13,%ymm3,%ymm3                       #! PC = 0x555555559046 *)
sub ymm3_0 ymm3_0 ymm13_0;
sub ymm3_1 ymm3_1 ymm13_1;
sub ymm3_2 ymm3_2 ymm13_2;
sub ymm3_3 ymm3_3 ymm13_3;
sub ymm3_4 ymm3_4 ymm13_4;
sub ymm3_5 ymm3_5 ymm13_5;
sub ymm3_6 ymm3_6 ymm13_6;
sub ymm3_7 ymm3_7 ymm13_7;
sub ymm3_8 ymm3_8 ymm13_8;
sub ymm3_9 ymm3_9 ymm13_9;
sub ymm3_a ymm3_a ymm13_a;
sub ymm3_b ymm3_b ymm13_b;
sub ymm3_c ymm3_c ymm13_c;
sub ymm3_d ymm3_d ymm13_d;
sub ymm3_e ymm3_e ymm13_e;
sub ymm3_f ymm3_f ymm13_f;
(* vmovdqa %ymm11,(%rdi)                           #! EA = L0x7fffffffbb20; PC = 0x55555555904b *)
mov L0x7fffffffbb20 ymm11_0;
mov L0x7fffffffbb22 ymm11_1;
mov L0x7fffffffbb24 ymm11_2;
mov L0x7fffffffbb26 ymm11_3;
mov L0x7fffffffbb28 ymm11_4;
mov L0x7fffffffbb2a ymm11_5;
mov L0x7fffffffbb2c ymm11_6;
mov L0x7fffffffbb2e ymm11_7;
mov L0x7fffffffbb30 ymm11_8;
mov L0x7fffffffbb32 ymm11_9;
mov L0x7fffffffbb34 ymm11_a;
mov L0x7fffffffbb36 ymm11_b;
mov L0x7fffffffbb38 ymm11_c;
mov L0x7fffffffbb3a ymm11_d;
mov L0x7fffffffbb3c ymm11_e;
mov L0x7fffffffbb3e ymm11_f;
(* vmovdqa %ymm3,0x20(%rdi)                        #! EA = L0x7fffffffbb40; PC = 0x55555555904f *)
mov L0x7fffffffbb40 ymm3_0;
mov L0x7fffffffbb42 ymm3_1;
mov L0x7fffffffbb44 ymm3_2;
mov L0x7fffffffbb46 ymm3_3;
mov L0x7fffffffbb48 ymm3_4;
mov L0x7fffffffbb4a ymm3_5;
mov L0x7fffffffbb4c ymm3_6;
mov L0x7fffffffbb4e ymm3_7;
mov L0x7fffffffbb50 ymm3_8;
mov L0x7fffffffbb52 ymm3_9;
mov L0x7fffffffbb54 ymm3_a;
mov L0x7fffffffbb56 ymm3_b;
mov L0x7fffffffbb58 ymm3_c;
mov L0x7fffffffbb5a ymm3_d;
mov L0x7fffffffbb5c ymm3_e;
mov L0x7fffffffbb5e ymm3_f;
(* vmovdqa %ymm7,0x40(%rdi)                        #! EA = L0x7fffffffbb60; PC = 0x555555559054 *)
mov L0x7fffffffbb60 ymm7_0;
mov L0x7fffffffbb62 ymm7_1;
mov L0x7fffffffbb64 ymm7_2;
mov L0x7fffffffbb66 ymm7_3;
mov L0x7fffffffbb68 ymm7_4;
mov L0x7fffffffbb6a ymm7_5;
mov L0x7fffffffbb6c ymm7_6;
mov L0x7fffffffbb6e ymm7_7;
mov L0x7fffffffbb70 ymm7_8;
mov L0x7fffffffbb72 ymm7_9;
mov L0x7fffffffbb74 ymm7_a;
mov L0x7fffffffbb76 ymm7_b;
mov L0x7fffffffbb78 ymm7_c;
mov L0x7fffffffbb7a ymm7_d;
mov L0x7fffffffbb7c ymm7_e;
mov L0x7fffffffbb7e ymm7_f;
(* vmovdqa %ymm4,0x60(%rdi)                        #! EA = L0x7fffffffbb80; PC = 0x555555559059 *)
mov L0x7fffffffbb80 ymm4_0;
mov L0x7fffffffbb82 ymm4_1;
mov L0x7fffffffbb84 ymm4_2;
mov L0x7fffffffbb86 ymm4_3;
mov L0x7fffffffbb88 ymm4_4;
mov L0x7fffffffbb8a ymm4_5;
mov L0x7fffffffbb8c ymm4_6;
mov L0x7fffffffbb8e ymm4_7;
mov L0x7fffffffbb90 ymm4_8;
mov L0x7fffffffbb92 ymm4_9;
mov L0x7fffffffbb94 ymm4_a;
mov L0x7fffffffbb96 ymm4_b;
mov L0x7fffffffbb98 ymm4_c;
mov L0x7fffffffbb9a ymm4_d;
mov L0x7fffffffbb9c ymm4_e;
mov L0x7fffffffbb9e ymm4_f;
(* vmovdqa %ymm5,0x80(%rdi)                        #! EA = L0x7fffffffbba0; PC = 0x55555555905e *)
mov L0x7fffffffbba0 ymm5_0;
mov L0x7fffffffbba2 ymm5_1;
mov L0x7fffffffbba4 ymm5_2;
mov L0x7fffffffbba6 ymm5_3;
mov L0x7fffffffbba8 ymm5_4;
mov L0x7fffffffbbaa ymm5_5;
mov L0x7fffffffbbac ymm5_6;
mov L0x7fffffffbbae ymm5_7;
mov L0x7fffffffbbb0 ymm5_8;
mov L0x7fffffffbbb2 ymm5_9;
mov L0x7fffffffbbb4 ymm5_a;
mov L0x7fffffffbbb6 ymm5_b;
mov L0x7fffffffbbb8 ymm5_c;
mov L0x7fffffffbbba ymm5_d;
mov L0x7fffffffbbbc ymm5_e;
mov L0x7fffffffbbbe ymm5_f;
(* vmovdqa %ymm9,0xa0(%rdi)                        #! EA = L0x7fffffffbbc0; PC = 0x555555559066 *)
mov L0x7fffffffbbc0 ymm9_0;
mov L0x7fffffffbbc2 ymm9_1;
mov L0x7fffffffbbc4 ymm9_2;
mov L0x7fffffffbbc6 ymm9_3;
mov L0x7fffffffbbc8 ymm9_4;
mov L0x7fffffffbbca ymm9_5;
mov L0x7fffffffbbcc ymm9_6;
mov L0x7fffffffbbce ymm9_7;
mov L0x7fffffffbbd0 ymm9_8;
mov L0x7fffffffbbd2 ymm9_9;
mov L0x7fffffffbbd4 ymm9_a;
mov L0x7fffffffbbd6 ymm9_b;
mov L0x7fffffffbbd8 ymm9_c;
mov L0x7fffffffbbda ymm9_d;
mov L0x7fffffffbbdc ymm9_e;
mov L0x7fffffffbbde ymm9_f;
(* vmovdqa %ymm6,0xc0(%rdi)                        #! EA = L0x7fffffffbbe0; PC = 0x55555555906e *)
mov L0x7fffffffbbe0 ymm6_0;
mov L0x7fffffffbbe2 ymm6_1;
mov L0x7fffffffbbe4 ymm6_2;
mov L0x7fffffffbbe6 ymm6_3;
mov L0x7fffffffbbe8 ymm6_4;
mov L0x7fffffffbbea ymm6_5;
mov L0x7fffffffbbec ymm6_6;
mov L0x7fffffffbbee ymm6_7;
mov L0x7fffffffbbf0 ymm6_8;
mov L0x7fffffffbbf2 ymm6_9;
mov L0x7fffffffbbf4 ymm6_a;
mov L0x7fffffffbbf6 ymm6_b;
mov L0x7fffffffbbf8 ymm6_c;
mov L0x7fffffffbbfa ymm6_d;
mov L0x7fffffffbbfc ymm6_e;
mov L0x7fffffffbbfe ymm6_f;
(* vmovdqa %ymm10,0xe0(%rdi)                       #! EA = L0x7fffffffbc00; PC = 0x555555559076 *)
mov L0x7fffffffbc00 ymm10_0;
mov L0x7fffffffbc02 ymm10_1;
mov L0x7fffffffbc04 ymm10_2;
mov L0x7fffffffbc06 ymm10_3;
mov L0x7fffffffbc08 ymm10_4;
mov L0x7fffffffbc0a ymm10_5;
mov L0x7fffffffbc0c ymm10_6;
mov L0x7fffffffbc0e ymm10_7;
mov L0x7fffffffbc10 ymm10_8;
mov L0x7fffffffbc12 ymm10_9;
mov L0x7fffffffbc14 ymm10_a;
mov L0x7fffffffbc16 ymm10_b;
mov L0x7fffffffbc18 ymm10_c;
mov L0x7fffffffbc1a ymm10_d;
mov L0x7fffffffbc1c ymm10_e;
mov L0x7fffffffbc1e ymm10_f;
(* vmovdqa 0x140(%rsi),%ymm6                       #! EA = L0x7fffffffbc60; Value = 0xfed6f385f4a4f2f0; PC = 0x55555555907e *)
mov ymm6_0 L0x7fffffffbc60;
mov ymm6_1 L0x7fffffffbc62;
mov ymm6_2 L0x7fffffffbc64;
mov ymm6_3 L0x7fffffffbc66;
mov ymm6_4 L0x7fffffffbc68;
mov ymm6_5 L0x7fffffffbc6a;
mov ymm6_6 L0x7fffffffbc6c;
mov ymm6_7 L0x7fffffffbc6e;
mov ymm6_8 L0x7fffffffbc70;
mov ymm6_9 L0x7fffffffbc72;
mov ymm6_a L0x7fffffffbc74;
mov ymm6_b L0x7fffffffbc76;
mov ymm6_c L0x7fffffffbc78;
mov ymm6_d L0x7fffffffbc7a;
mov ymm6_e L0x7fffffffbc7c;
mov ymm6_f L0x7fffffffbc7e;
(* vmovdqa 0x160(%rsi),%ymm7                       #! EA = L0x7fffffffbc80; Value = 0xf9080ca4f830ffa5; PC = 0x555555559086 *)
mov ymm7_0 L0x7fffffffbc80;
mov ymm7_1 L0x7fffffffbc82;
mov ymm7_2 L0x7fffffffbc84;
mov ymm7_3 L0x7fffffffbc86;
mov ymm7_4 L0x7fffffffbc88;
mov ymm7_5 L0x7fffffffbc8a;
mov ymm7_6 L0x7fffffffbc8c;
mov ymm7_7 L0x7fffffffbc8e;
mov ymm7_8 L0x7fffffffbc90;
mov ymm7_9 L0x7fffffffbc92;
mov ymm7_a L0x7fffffffbc94;
mov ymm7_b L0x7fffffffbc96;
mov ymm7_c L0x7fffffffbc98;
mov ymm7_d L0x7fffffffbc9a;
mov ymm7_e L0x7fffffffbc9c;
mov ymm7_f L0x7fffffffbc9e;
(* vmovdqa 0x1c0(%rsi),%ymm10                      #! EA = L0x7fffffffbce0; Value = 0x06350116073e0869; PC = 0x55555555908e *)
mov ymm10_0 L0x7fffffffbce0;
mov ymm10_1 L0x7fffffffbce2;
mov ymm10_2 L0x7fffffffbce4;
mov ymm10_3 L0x7fffffffbce6;
mov ymm10_4 L0x7fffffffbce8;
mov ymm10_5 L0x7fffffffbcea;
mov ymm10_6 L0x7fffffffbcec;
mov ymm10_7 L0x7fffffffbcee;
mov ymm10_8 L0x7fffffffbcf0;
mov ymm10_9 L0x7fffffffbcf2;
mov ymm10_a L0x7fffffffbcf4;
mov ymm10_b L0x7fffffffbcf6;
mov ymm10_c L0x7fffffffbcf8;
mov ymm10_d L0x7fffffffbcfa;
mov ymm10_e L0x7fffffffbcfc;
mov ymm10_f L0x7fffffffbcfe;
(* vmovdqa 0x1e0(%rsi),%ymm11                      #! EA = L0x7fffffffbd00; Value = 0xf783fa3602d30372; PC = 0x555555559096 *)
mov ymm11_0 L0x7fffffffbd00;
mov ymm11_1 L0x7fffffffbd02;
mov ymm11_2 L0x7fffffffbd04;
mov ymm11_3 L0x7fffffffbd06;
mov ymm11_4 L0x7fffffffbd08;
mov ymm11_5 L0x7fffffffbd0a;
mov ymm11_6 L0x7fffffffbd0c;
mov ymm11_7 L0x7fffffffbd0e;
mov ymm11_8 L0x7fffffffbd10;
mov ymm11_9 L0x7fffffffbd12;
mov ymm11_a L0x7fffffffbd14;
mov ymm11_b L0x7fffffffbd16;
mov ymm11_c L0x7fffffffbd18;
mov ymm11_d L0x7fffffffbd1a;
mov ymm11_e L0x7fffffffbd1c;
mov ymm11_f L0x7fffffffbd1e;
(* vmovdqa 0x100(%rdx),%ymm1                       #! EA = L0x555555560800; Value = 0x70c170c170c170c1; PC = 0x55555555909e *)
mov ymm1_0 L0x555555560800;
mov ymm1_1 L0x555555560802;
mov ymm1_2 L0x555555560804;
mov ymm1_3 L0x555555560806;
mov ymm1_4 L0x555555560808;
mov ymm1_5 L0x55555556080a;
mov ymm1_6 L0x55555556080c;
mov ymm1_7 L0x55555556080e;
mov ymm1_8 L0x555555560810;
mov ymm1_9 L0x555555560812;
mov ymm1_a L0x555555560814;
mov ymm1_b L0x555555560816;
mov ymm1_c L0x555555560818;
mov ymm1_d L0x55555556081a;
mov ymm1_e L0x55555556081c;
mov ymm1_f L0x55555556081e;
(* vpsubw %ymm6,%ymm7,%ymm12                       #! PC = 0x5555555590a6 *)
sub ymm12_0 ymm7_0 ymm6_0;
sub ymm12_1 ymm7_1 ymm6_1;
sub ymm12_2 ymm7_2 ymm6_2;
sub ymm12_3 ymm7_3 ymm6_3;
sub ymm12_4 ymm7_4 ymm6_4;
sub ymm12_5 ymm7_5 ymm6_5;
sub ymm12_6 ymm7_6 ymm6_6;
sub ymm12_7 ymm7_7 ymm6_7;
sub ymm12_8 ymm7_8 ymm6_8;
sub ymm12_9 ymm7_9 ymm6_9;
sub ymm12_a ymm7_a ymm6_a;
sub ymm12_b ymm7_b ymm6_b;
sub ymm12_c ymm7_c ymm6_c;
sub ymm12_d ymm7_d ymm6_d;
sub ymm12_e ymm7_e ymm6_e;
sub ymm12_f ymm7_f ymm6_f;
(* vpaddw %ymm7,%ymm6,%ymm6                        #! PC = 0x5555555590aa *)
add ymm6_0 ymm6_0 ymm7_0;
add ymm6_1 ymm6_1 ymm7_1;
add ymm6_2 ymm6_2 ymm7_2;
add ymm6_3 ymm6_3 ymm7_3;
add ymm6_4 ymm6_4 ymm7_4;
add ymm6_5 ymm6_5 ymm7_5;
add ymm6_6 ymm6_6 ymm7_6;
add ymm6_7 ymm6_7 ymm7_7;
add ymm6_8 ymm6_8 ymm7_8;
add ymm6_9 ymm6_9 ymm7_9;
add ymm6_a ymm6_a ymm7_a;
add ymm6_b ymm6_b ymm7_b;
add ymm6_c ymm6_c ymm7_c;
add ymm6_d ymm6_d ymm7_d;
add ymm6_e ymm6_e ymm7_e;
add ymm6_f ymm6_f ymm7_f;
(* vpmullw %ymm1,%ymm12,%ymm7                      #! PC = 0x5555555590ae *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpsubw %ymm10,%ymm11,%ymm13                     #! PC = 0x5555555590b2 *)
sub ymm13_0 ymm11_0 ymm10_0;
sub ymm13_1 ymm11_1 ymm10_1;
sub ymm13_2 ymm11_2 ymm10_2;
sub ymm13_3 ymm11_3 ymm10_3;
sub ymm13_4 ymm11_4 ymm10_4;
sub ymm13_5 ymm11_5 ymm10_5;
sub ymm13_6 ymm11_6 ymm10_6;
sub ymm13_7 ymm11_7 ymm10_7;
sub ymm13_8 ymm11_8 ymm10_8;
sub ymm13_9 ymm11_9 ymm10_9;
sub ymm13_a ymm11_a ymm10_a;
sub ymm13_b ymm11_b ymm10_b;
sub ymm13_c ymm11_c ymm10_c;
sub ymm13_d ymm11_d ymm10_d;
sub ymm13_e ymm11_e ymm10_e;
sub ymm13_f ymm11_f ymm10_f;
(* vpaddw %ymm11,%ymm10,%ymm10                     #! PC = 0x5555555590b7 *)
add ymm10_0 ymm10_0 ymm11_0;
add ymm10_1 ymm10_1 ymm11_1;
add ymm10_2 ymm10_2 ymm11_2;
add ymm10_3 ymm10_3 ymm11_3;
add ymm10_4 ymm10_4 ymm11_4;
add ymm10_5 ymm10_5 ymm11_5;
add ymm10_6 ymm10_6 ymm11_6;
add ymm10_7 ymm10_7 ymm11_7;
add ymm10_8 ymm10_8 ymm11_8;
add ymm10_9 ymm10_9 ymm11_9;
add ymm10_a ymm10_a ymm11_a;
add ymm10_b ymm10_b ymm11_b;
add ymm10_c ymm10_c ymm11_c;
add ymm10_d ymm10_d ymm11_d;
add ymm10_e ymm10_e ymm11_e;
add ymm10_f ymm10_f ymm11_f;
(* vpmullw %ymm1,%ymm13,%ymm11                     #! PC = 0x5555555590bc *)
smull mulHymm13_0 mulL_0 ymm1_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm1_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm1_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm1_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm1_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm1_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm1_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm1_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm1_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm1_9 ymm13_9;
smull mulHymm13_a mulL_a ymm1_a ymm13_a;
smull mulHymm13_b mulL_b ymm1_b ymm13_b;
smull mulHymm13_c mulL_c ymm1_c ymm13_c;
smull mulHymm13_d mulL_d ymm1_d ymm13_d;
smull mulHymm13_e mulL_e ymm1_e ymm13_e;
smull mulHymm13_f mulL_f ymm1_f ymm13_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vmovdqa 0x100(%rsi),%ymm4                       #! EA = L0x7fffffffbc20; Value = 0x06b2f9c5f299f83f; PC = 0x5555555590c0 *)
mov ymm4_0 L0x7fffffffbc20;
mov ymm4_1 L0x7fffffffbc22;
mov ymm4_2 L0x7fffffffbc24;
mov ymm4_3 L0x7fffffffbc26;
mov ymm4_4 L0x7fffffffbc28;
mov ymm4_5 L0x7fffffffbc2a;
mov ymm4_6 L0x7fffffffbc2c;
mov ymm4_7 L0x7fffffffbc2e;
mov ymm4_8 L0x7fffffffbc30;
mov ymm4_9 L0x7fffffffbc32;
mov ymm4_a L0x7fffffffbc34;
mov ymm4_b L0x7fffffffbc36;
mov ymm4_c L0x7fffffffbc38;
mov ymm4_d L0x7fffffffbc3a;
mov ymm4_e L0x7fffffffbc3c;
mov ymm4_f L0x7fffffffbc3e;
(* vmovdqa 0x120(%rsi),%ymm5                       #! EA = L0x7fffffffbc40; Value = 0x06bf0551fbaf04b5; PC = 0x5555555590c8 *)
mov ymm5_0 L0x7fffffffbc40;
mov ymm5_1 L0x7fffffffbc42;
mov ymm5_2 L0x7fffffffbc44;
mov ymm5_3 L0x7fffffffbc46;
mov ymm5_4 L0x7fffffffbc48;
mov ymm5_5 L0x7fffffffbc4a;
mov ymm5_6 L0x7fffffffbc4c;
mov ymm5_7 L0x7fffffffbc4e;
mov ymm5_8 L0x7fffffffbc50;
mov ymm5_9 L0x7fffffffbc52;
mov ymm5_a L0x7fffffffbc54;
mov ymm5_b L0x7fffffffbc56;
mov ymm5_c L0x7fffffffbc58;
mov ymm5_d L0x7fffffffbc5a;
mov ymm5_e L0x7fffffffbc5c;
mov ymm5_f L0x7fffffffbc5e;
(* vmovdqa 0x180(%rsi),%ymm8                       #! EA = L0x7fffffffbca0; Value = 0xfd570a5808b50b7b; PC = 0x5555555590d0 *)
mov ymm8_0 L0x7fffffffbca0;
mov ymm8_1 L0x7fffffffbca2;
mov ymm8_2 L0x7fffffffbca4;
mov ymm8_3 L0x7fffffffbca6;
mov ymm8_4 L0x7fffffffbca8;
mov ymm8_5 L0x7fffffffbcaa;
mov ymm8_6 L0x7fffffffbcac;
mov ymm8_7 L0x7fffffffbcae;
mov ymm8_8 L0x7fffffffbcb0;
mov ymm8_9 L0x7fffffffbcb2;
mov ymm8_a L0x7fffffffbcb4;
mov ymm8_b L0x7fffffffbcb6;
mov ymm8_c L0x7fffffffbcb8;
mov ymm8_d L0x7fffffffbcba;
mov ymm8_e L0x7fffffffbcbc;
mov ymm8_f L0x7fffffffbcbe;
(* vmovdqa 0x1a0(%rsi),%ymm9                       #! EA = L0x7fffffffbcc0; Value = 0xf830ffbbf81afeae; PC = 0x5555555590d8 *)
mov ymm9_0 L0x7fffffffbcc0;
mov ymm9_1 L0x7fffffffbcc2;
mov ymm9_2 L0x7fffffffbcc4;
mov ymm9_3 L0x7fffffffbcc6;
mov ymm9_4 L0x7fffffffbcc8;
mov ymm9_5 L0x7fffffffbcca;
mov ymm9_6 L0x7fffffffbccc;
mov ymm9_7 L0x7fffffffbcce;
mov ymm9_8 L0x7fffffffbcd0;
mov ymm9_9 L0x7fffffffbcd2;
mov ymm9_a L0x7fffffffbcd4;
mov ymm9_b L0x7fffffffbcd6;
mov ymm9_c L0x7fffffffbcd8;
mov ymm9_d L0x7fffffffbcda;
mov ymm9_e L0x7fffffffbcdc;
mov ymm9_f L0x7fffffffbcde;
(* vmovdqa 0x120(%rdx),%ymm2                       #! EA = L0x555555560820; Value = 0x0ec10ec10ec10ec1; PC = 0x5555555590e0 *)
mov ymm2_0 L0x555555560820;
mov ymm2_1 L0x555555560822;
mov ymm2_2 L0x555555560824;
mov ymm2_3 L0x555555560826;
mov ymm2_4 L0x555555560828;
mov ymm2_5 L0x55555556082a;
mov ymm2_6 L0x55555556082c;
mov ymm2_7 L0x55555556082e;
mov ymm2_8 L0x555555560830;
mov ymm2_9 L0x555555560832;
mov ymm2_a L0x555555560834;
mov ymm2_b L0x555555560836;
mov ymm2_c L0x555555560838;
mov ymm2_d L0x55555556083a;
mov ymm2_e L0x55555556083c;
mov ymm2_f L0x55555556083e;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x5555555590e8 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm2,%ymm13,%ymm13                     #! PC = 0x5555555590ec *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm2_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm2_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm2_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm2_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm2_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm2_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm2_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm2_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm2_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm2_9;
smull mulH_a mulLymm13_a ymm13_a ymm2_a;
smull mulH_b mulLymm13_b ymm13_b ymm2_b;
smull mulH_c mulLymm13_c ymm13_c ymm2_c;
smull mulH_d mulLymm13_d ymm13_d ymm2_d;
smull mulH_e mulLymm13_e ymm13_e ymm2_e;
smull mulH_f mulLymm13_f ymm13_f ymm2_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x5555555590f0 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x5555555590f4 *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpaddw %ymm5,%ymm4,%ymm14                       #! PC = 0x5555555590f8 *)
add ymm14_0 ymm4_0 ymm5_0;
add ymm14_1 ymm4_1 ymm5_1;
add ymm14_2 ymm4_2 ymm5_2;
add ymm14_3 ymm4_3 ymm5_3;
add ymm14_4 ymm4_4 ymm5_4;
add ymm14_5 ymm4_5 ymm5_5;
add ymm14_6 ymm4_6 ymm5_6;
add ymm14_7 ymm4_7 ymm5_7;
add ymm14_8 ymm4_8 ymm5_8;
add ymm14_9 ymm4_9 ymm5_9;
add ymm14_a ymm4_a ymm5_a;
add ymm14_b ymm4_b ymm5_b;
add ymm14_c ymm4_c ymm5_c;
add ymm14_d ymm4_d ymm5_d;
add ymm14_e ymm4_e ymm5_e;
add ymm14_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x5555555590fc *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpaddw %ymm9,%ymm8,%ymm15                       #! PC = 0x555555559100 *)
add ymm15_0 ymm8_0 ymm9_0;
add ymm15_1 ymm8_1 ymm9_1;
add ymm15_2 ymm8_2 ymm9_2;
add ymm15_3 ymm8_3 ymm9_3;
add ymm15_4 ymm8_4 ymm9_4;
add ymm15_5 ymm8_5 ymm9_5;
add ymm15_6 ymm8_6 ymm9_6;
add ymm15_7 ymm8_7 ymm9_7;
add ymm15_8 ymm8_8 ymm9_8;
add ymm15_9 ymm8_9 ymm9_9;
add ymm15_a ymm8_a ymm9_a;
add ymm15_b ymm8_b ymm9_b;
add ymm15_c ymm8_c ymm9_c;
add ymm15_d ymm8_d ymm9_d;
add ymm15_e ymm8_e ymm9_e;
add ymm15_f ymm8_f ymm9_f;
(* vpsubw %ymm9,%ymm8,%ymm9                        #! PC = 0x555555559105 *)
sub ymm9_0 ymm8_0 ymm9_0;
sub ymm9_1 ymm8_1 ymm9_1;
sub ymm9_2 ymm8_2 ymm9_2;
sub ymm9_3 ymm8_3 ymm9_3;
sub ymm9_4 ymm8_4 ymm9_4;
sub ymm9_5 ymm8_5 ymm9_5;
sub ymm9_6 ymm8_6 ymm9_6;
sub ymm9_7 ymm8_7 ymm9_7;
sub ymm9_8 ymm8_8 ymm9_8;
sub ymm9_9 ymm8_9 ymm9_9;
sub ymm9_a ymm8_a ymm9_a;
sub ymm9_b ymm8_b ymm9_b;
sub ymm9_c ymm8_c ymm9_c;
sub ymm9_d ymm8_d ymm9_d;
sub ymm9_e ymm8_e ymm9_e;
sub ymm9_f ymm8_f ymm9_f;
(* vpsubw %ymm7,%ymm12,%ymm7                       #! PC = 0x55555555910a *)
sub ymm7_0 ymm12_0 ymm7_0;
sub ymm7_1 ymm12_1 ymm7_1;
sub ymm7_2 ymm12_2 ymm7_2;
sub ymm7_3 ymm12_3 ymm7_3;
sub ymm7_4 ymm12_4 ymm7_4;
sub ymm7_5 ymm12_5 ymm7_5;
sub ymm7_6 ymm12_6 ymm7_6;
sub ymm7_7 ymm12_7 ymm7_7;
sub ymm7_8 ymm12_8 ymm7_8;
sub ymm7_9 ymm12_9 ymm7_9;
sub ymm7_a ymm12_a ymm7_a;
sub ymm7_b ymm12_b ymm7_b;
sub ymm7_c ymm12_c ymm7_c;
sub ymm7_d ymm12_d ymm7_d;
sub ymm7_e ymm12_e ymm7_e;
sub ymm7_f ymm12_f ymm7_f;
(* vpsubw %ymm11,%ymm13,%ymm11                     #! PC = 0x55555555910e *)
sub ymm11_0 ymm13_0 ymm11_0;
sub ymm11_1 ymm13_1 ymm11_1;
sub ymm11_2 ymm13_2 ymm11_2;
sub ymm11_3 ymm13_3 ymm11_3;
sub ymm11_4 ymm13_4 ymm11_4;
sub ymm11_5 ymm13_5 ymm11_5;
sub ymm11_6 ymm13_6 ymm11_6;
sub ymm11_7 ymm13_7 ymm11_7;
sub ymm11_8 ymm13_8 ymm11_8;
sub ymm11_9 ymm13_9 ymm11_9;
sub ymm11_a ymm13_a ymm11_a;
sub ymm11_b ymm13_b ymm11_b;
sub ymm11_c ymm13_c ymm11_c;
sub ymm11_d ymm13_d ymm11_d;
sub ymm11_e ymm13_e ymm11_e;
sub ymm11_f ymm13_f ymm11_f;
(* vpaddw %ymm6,%ymm14,%ymm4                       #! PC = 0x555555559113 *)
add ymm4_0 ymm14_0 ymm6_0;
add ymm4_1 ymm14_1 ymm6_1;
add ymm4_2 ymm14_2 ymm6_2;
add ymm4_3 ymm14_3 ymm6_3;
add ymm4_4 ymm14_4 ymm6_4;
add ymm4_5 ymm14_5 ymm6_5;
add ymm4_6 ymm14_6 ymm6_6;
add ymm4_7 ymm14_7 ymm6_7;
add ymm4_8 ymm14_8 ymm6_8;
add ymm4_9 ymm14_9 ymm6_9;
add ymm4_a ymm14_a ymm6_a;
add ymm4_b ymm14_b ymm6_b;
add ymm4_c ymm14_c ymm6_c;
add ymm4_d ymm14_d ymm6_d;
add ymm4_e ymm14_e ymm6_e;
add ymm4_f ymm14_f ymm6_f;
(* vpsubw %ymm6,%ymm14,%ymm6                       #! PC = 0x555555559117 *)
sub ymm6_0 ymm14_0 ymm6_0;
sub ymm6_1 ymm14_1 ymm6_1;
sub ymm6_2 ymm14_2 ymm6_2;
sub ymm6_3 ymm14_3 ymm6_3;
sub ymm6_4 ymm14_4 ymm6_4;
sub ymm6_5 ymm14_5 ymm6_5;
sub ymm6_6 ymm14_6 ymm6_6;
sub ymm6_7 ymm14_7 ymm6_7;
sub ymm6_8 ymm14_8 ymm6_8;
sub ymm6_9 ymm14_9 ymm6_9;
sub ymm6_a ymm14_a ymm6_a;
sub ymm6_b ymm14_b ymm6_b;
sub ymm6_c ymm14_c ymm6_c;
sub ymm6_d ymm14_d ymm6_d;
sub ymm6_e ymm14_e ymm6_e;
sub ymm6_f ymm14_f ymm6_f;
(* vpaddw %ymm7,%ymm5,%ymm12                       #! PC = 0x55555555911b *)
add ymm12_0 ymm5_0 ymm7_0;
add ymm12_1 ymm5_1 ymm7_1;
add ymm12_2 ymm5_2 ymm7_2;
add ymm12_3 ymm5_3 ymm7_3;
add ymm12_4 ymm5_4 ymm7_4;
add ymm12_5 ymm5_5 ymm7_5;
add ymm12_6 ymm5_6 ymm7_6;
add ymm12_7 ymm5_7 ymm7_7;
add ymm12_8 ymm5_8 ymm7_8;
add ymm12_9 ymm5_9 ymm7_9;
add ymm12_a ymm5_a ymm7_a;
add ymm12_b ymm5_b ymm7_b;
add ymm12_c ymm5_c ymm7_c;
add ymm12_d ymm5_d ymm7_d;
add ymm12_e ymm5_e ymm7_e;
add ymm12_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x55555555911f *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpaddw %ymm10,%ymm15,%ymm8                      #! PC = 0x555555559123 *)
add ymm8_0 ymm15_0 ymm10_0;
add ymm8_1 ymm15_1 ymm10_1;
add ymm8_2 ymm15_2 ymm10_2;
add ymm8_3 ymm15_3 ymm10_3;
add ymm8_4 ymm15_4 ymm10_4;
add ymm8_5 ymm15_5 ymm10_5;
add ymm8_6 ymm15_6 ymm10_6;
add ymm8_7 ymm15_7 ymm10_7;
add ymm8_8 ymm15_8 ymm10_8;
add ymm8_9 ymm15_9 ymm10_9;
add ymm8_a ymm15_a ymm10_a;
add ymm8_b ymm15_b ymm10_b;
add ymm8_c ymm15_c ymm10_c;
add ymm8_d ymm15_d ymm10_d;
add ymm8_e ymm15_e ymm10_e;
add ymm8_f ymm15_f ymm10_f;
(* vpsubw %ymm10,%ymm15,%ymm10                     #! PC = 0x555555559128 *)
sub ymm10_0 ymm15_0 ymm10_0;
sub ymm10_1 ymm15_1 ymm10_1;
sub ymm10_2 ymm15_2 ymm10_2;
sub ymm10_3 ymm15_3 ymm10_3;
sub ymm10_4 ymm15_4 ymm10_4;
sub ymm10_5 ymm15_5 ymm10_5;
sub ymm10_6 ymm15_6 ymm10_6;
sub ymm10_7 ymm15_7 ymm10_7;
sub ymm10_8 ymm15_8 ymm10_8;
sub ymm10_9 ymm15_9 ymm10_9;
sub ymm10_a ymm15_a ymm10_a;
sub ymm10_b ymm15_b ymm10_b;
sub ymm10_c ymm15_c ymm10_c;
sub ymm10_d ymm15_d ymm10_d;
sub ymm10_e ymm15_e ymm10_e;
sub ymm10_f ymm15_f ymm10_f;
(* vpaddw %ymm11,%ymm9,%ymm13                      #! PC = 0x55555555912d *)
add ymm13_0 ymm9_0 ymm11_0;
add ymm13_1 ymm9_1 ymm11_1;
add ymm13_2 ymm9_2 ymm11_2;
add ymm13_3 ymm9_3 ymm11_3;
add ymm13_4 ymm9_4 ymm11_4;
add ymm13_5 ymm9_5 ymm11_5;
add ymm13_6 ymm9_6 ymm11_6;
add ymm13_7 ymm9_7 ymm11_7;
add ymm13_8 ymm9_8 ymm11_8;
add ymm13_9 ymm9_9 ymm11_9;
add ymm13_a ymm9_a ymm11_a;
add ymm13_b ymm9_b ymm11_b;
add ymm13_c ymm9_c ymm11_c;
add ymm13_d ymm9_d ymm11_d;
add ymm13_e ymm9_e ymm11_e;
add ymm13_f ymm9_f ymm11_f;
(* vpsubw %ymm11,%ymm9,%ymm11                      #! PC = 0x555555559132 *)
sub ymm11_0 ymm9_0 ymm11_0;
sub ymm11_1 ymm9_1 ymm11_1;
sub ymm11_2 ymm9_2 ymm11_2;
sub ymm11_3 ymm9_3 ymm11_3;
sub ymm11_4 ymm9_4 ymm11_4;
sub ymm11_5 ymm9_5 ymm11_5;
sub ymm11_6 ymm9_6 ymm11_6;
sub ymm11_7 ymm9_7 ymm11_7;
sub ymm11_8 ymm9_8 ymm11_8;
sub ymm11_9 ymm9_9 ymm11_9;
sub ymm11_a ymm9_a ymm11_a;
sub ymm11_b ymm9_b ymm11_b;
sub ymm11_c ymm9_c ymm11_c;
sub ymm11_d ymm9_d ymm11_d;
sub ymm11_e ymm9_e ymm11_e;
sub ymm11_f ymm9_f ymm11_f;
(* vpslld $0x10,%ymm12,%ymm14                      #! PC = 0x555555559137 *)
mov slld_0 0@sint16;
mov slld_1 ymm12_0;
mov slld_2 0@sint16;
mov slld_3 ymm12_2;
mov slld_4 0@sint16;
mov slld_5 ymm12_4;
mov slld_6 0@sint16;
mov slld_7 ymm12_6;
mov slld_8 0@sint16;
mov slld_9 ymm12_8;
mov slld_a 0@sint16;
mov slld_b ymm12_a;
mov slld_c 0@sint16;
mov slld_d ymm12_c;
mov slld_e 0@sint16;
mov slld_f ymm12_e;
mov ymm14_0 slld_0;
mov ymm14_1 slld_1;
mov ymm14_2 slld_2;
mov ymm14_3 slld_3;
mov ymm14_4 slld_4;
mov ymm14_5 slld_5;
mov ymm14_6 slld_6;
mov ymm14_7 slld_7;
mov ymm14_8 slld_8;
mov ymm14_9 slld_9;
mov ymm14_a slld_a;
mov ymm14_b slld_b;
mov ymm14_c slld_c;
mov ymm14_d slld_d;
mov ymm14_e slld_e;
mov ymm14_f slld_f;
(* vpblendw $0xaa,%ymm14,%ymm4,%ymm14              #! PC = 0x55555555913d *)
mov bldw_0 ymm4_0;
mov bldw_1 ymm14_1;
mov bldw_2 ymm4_2;
mov bldw_3 ymm14_3;
mov bldw_4 ymm4_4;
mov bldw_5 ymm14_5;
mov bldw_6 ymm4_6;
mov bldw_7 ymm14_7;
mov bldw_8 ymm4_8;
mov bldw_9 ymm14_9;
mov bldw_a ymm4_a;
mov bldw_b ymm14_b;
mov bldw_c ymm4_c;
mov bldw_d ymm14_d;
mov bldw_e ymm4_e;
mov bldw_f ymm14_f;
mov ymm14_0 bldw_0;
mov ymm14_1 bldw_1;
mov ymm14_2 bldw_2;
mov ymm14_3 bldw_3;
mov ymm14_4 bldw_4;
mov ymm14_5 bldw_5;
mov ymm14_6 bldw_6;
mov ymm14_7 bldw_7;
mov ymm14_8 bldw_8;
mov ymm14_9 bldw_9;
mov ymm14_a bldw_a;
mov ymm14_b bldw_b;
mov ymm14_c bldw_c;
mov ymm14_d bldw_d;
mov ymm14_e bldw_e;
mov ymm14_f bldw_f;
(* vpsrld $0x10,%ymm4,%ymm4                        #! PC = 0x555555559143 *)
mov srld_0 ymm4_1;
mov srld_1 0@sint16;
mov srld_2 ymm4_3;
mov srld_3 0@sint16;
mov srld_4 ymm4_5;
mov srld_5 0@sint16;
mov srld_6 ymm4_7;
mov srld_7 0@sint16;
mov srld_8 ymm4_9;
mov srld_9 0@sint16;
mov srld_a ymm4_b;
mov srld_b 0@sint16;
mov srld_c ymm4_d;
mov srld_d 0@sint16;
mov srld_e ymm4_f;
mov srld_f 0@sint16;
mov ymm4_0 srld_0;
mov ymm4_1 srld_1;
mov ymm4_2 srld_2;
mov ymm4_3 srld_3;
mov ymm4_4 srld_4;
mov ymm4_5 srld_5;
mov ymm4_6 srld_6;
mov ymm4_7 srld_7;
mov ymm4_8 srld_8;
mov ymm4_9 srld_9;
mov ymm4_a srld_a;
mov ymm4_b srld_b;
mov ymm4_c srld_c;
mov ymm4_d srld_d;
mov ymm4_e srld_e;
mov ymm4_f srld_f;
(* vpblendw $0xaa,%ymm12,%ymm4,%ymm15              #! PC = 0x555555559148 *)
mov bldw_0 ymm4_0;
mov bldw_1 ymm12_1;
mov bldw_2 ymm4_2;
mov bldw_3 ymm12_3;
mov bldw_4 ymm4_4;
mov bldw_5 ymm12_5;
mov bldw_6 ymm4_6;
mov bldw_7 ymm12_7;
mov bldw_8 ymm4_8;
mov bldw_9 ymm12_9;
mov bldw_a ymm4_a;
mov bldw_b ymm12_b;
mov bldw_c ymm4_c;
mov bldw_d ymm12_d;
mov bldw_e ymm4_e;
mov bldw_f ymm12_f;
mov ymm15_0 bldw_0;
mov ymm15_1 bldw_1;
mov ymm15_2 bldw_2;
mov ymm15_3 bldw_3;
mov ymm15_4 bldw_4;
mov ymm15_5 bldw_5;
mov ymm15_6 bldw_6;
mov ymm15_7 bldw_7;
mov ymm15_8 bldw_8;
mov ymm15_9 bldw_9;
mov ymm15_a bldw_a;
mov ymm15_b bldw_b;
mov ymm15_c bldw_c;
mov ymm15_d bldw_d;
mov ymm15_e bldw_e;
mov ymm15_f bldw_f;
(* vpslld $0x10,%ymm7,%ymm5                        #! PC = 0x55555555914e *)
mov slld_0 0@sint16;
mov slld_1 ymm7_0;
mov slld_2 0@sint16;
mov slld_3 ymm7_2;
mov slld_4 0@sint16;
mov slld_5 ymm7_4;
mov slld_6 0@sint16;
mov slld_7 ymm7_6;
mov slld_8 0@sint16;
mov slld_9 ymm7_8;
mov slld_a 0@sint16;
mov slld_b ymm7_a;
mov slld_c 0@sint16;
mov slld_d ymm7_c;
mov slld_e 0@sint16;
mov slld_f ymm7_e;
mov ymm5_0 slld_0;
mov ymm5_1 slld_1;
mov ymm5_2 slld_2;
mov ymm5_3 slld_3;
mov ymm5_4 slld_4;
mov ymm5_5 slld_5;
mov ymm5_6 slld_6;
mov ymm5_7 slld_7;
mov ymm5_8 slld_8;
mov ymm5_9 slld_9;
mov ymm5_a slld_a;
mov ymm5_b slld_b;
mov ymm5_c slld_c;
mov ymm5_d slld_d;
mov ymm5_e slld_e;
mov ymm5_f slld_f;
(* vpblendw $0xaa,%ymm5,%ymm6,%ymm5                #! PC = 0x555555559153 *)
mov bldw_0 ymm6_0;
mov bldw_1 ymm5_1;
mov bldw_2 ymm6_2;
mov bldw_3 ymm5_3;
mov bldw_4 ymm6_4;
mov bldw_5 ymm5_5;
mov bldw_6 ymm6_6;
mov bldw_7 ymm5_7;
mov bldw_8 ymm6_8;
mov bldw_9 ymm5_9;
mov bldw_a ymm6_a;
mov bldw_b ymm5_b;
mov bldw_c ymm6_c;
mov bldw_d ymm5_d;
mov bldw_e ymm6_e;
mov bldw_f ymm5_f;
mov ymm5_0 bldw_0;
mov ymm5_1 bldw_1;
mov ymm5_2 bldw_2;
mov ymm5_3 bldw_3;
mov ymm5_4 bldw_4;
mov ymm5_5 bldw_5;
mov ymm5_6 bldw_6;
mov ymm5_7 bldw_7;
mov ymm5_8 bldw_8;
mov ymm5_9 bldw_9;
mov ymm5_a bldw_a;
mov ymm5_b bldw_b;
mov ymm5_c bldw_c;
mov ymm5_d bldw_d;
mov ymm5_e bldw_e;
mov ymm5_f bldw_f;
(* vpsrld $0x10,%ymm6,%ymm6                        #! PC = 0x555555559159 *)
mov srld_0 ymm6_1;
mov srld_1 0@sint16;
mov srld_2 ymm6_3;
mov srld_3 0@sint16;
mov srld_4 ymm6_5;
mov srld_5 0@sint16;
mov srld_6 ymm6_7;
mov srld_7 0@sint16;
mov srld_8 ymm6_9;
mov srld_9 0@sint16;
mov srld_a ymm6_b;
mov srld_b 0@sint16;
mov srld_c ymm6_d;
mov srld_d 0@sint16;
mov srld_e ymm6_f;
mov srld_f 0@sint16;
mov ymm6_0 srld_0;
mov ymm6_1 srld_1;
mov ymm6_2 srld_2;
mov ymm6_3 srld_3;
mov ymm6_4 srld_4;
mov ymm6_5 srld_5;
mov ymm6_6 srld_6;
mov ymm6_7 srld_7;
mov ymm6_8 srld_8;
mov ymm6_9 srld_9;
mov ymm6_a srld_a;
mov ymm6_b srld_b;
mov ymm6_c srld_c;
mov ymm6_d srld_d;
mov ymm6_e srld_e;
mov ymm6_f srld_f;
(* vpblendw $0xaa,%ymm7,%ymm6,%ymm9                #! PC = 0x55555555915e *)
mov bldw_0 ymm6_0;
mov bldw_1 ymm7_1;
mov bldw_2 ymm6_2;
mov bldw_3 ymm7_3;
mov bldw_4 ymm6_4;
mov bldw_5 ymm7_5;
mov bldw_6 ymm6_6;
mov bldw_7 ymm7_7;
mov bldw_8 ymm6_8;
mov bldw_9 ymm7_9;
mov bldw_a ymm6_a;
mov bldw_b ymm7_b;
mov bldw_c ymm6_c;
mov bldw_d ymm7_d;
mov bldw_e ymm6_e;
mov bldw_f ymm7_f;
mov ymm9_0 bldw_0;
mov ymm9_1 bldw_1;
mov ymm9_2 bldw_2;
mov ymm9_3 bldw_3;
mov ymm9_4 bldw_4;
mov ymm9_5 bldw_5;
mov ymm9_6 bldw_6;
mov ymm9_7 bldw_7;
mov ymm9_8 bldw_8;
mov ymm9_9 bldw_9;
mov ymm9_a bldw_a;
mov ymm9_b bldw_b;
mov ymm9_c bldw_c;
mov ymm9_d bldw_d;
mov ymm9_e bldw_e;
mov ymm9_f bldw_f;
(* vpslld $0x10,%ymm13,%ymm6                       #! PC = 0x555555559164 *)
mov slld_0 0@sint16;
mov slld_1 ymm13_0;
mov slld_2 0@sint16;
mov slld_3 ymm13_2;
mov slld_4 0@sint16;
mov slld_5 ymm13_4;
mov slld_6 0@sint16;
mov slld_7 ymm13_6;
mov slld_8 0@sint16;
mov slld_9 ymm13_8;
mov slld_a 0@sint16;
mov slld_b ymm13_a;
mov slld_c 0@sint16;
mov slld_d ymm13_c;
mov slld_e 0@sint16;
mov slld_f ymm13_e;
mov ymm6_0 slld_0;
mov ymm6_1 slld_1;
mov ymm6_2 slld_2;
mov ymm6_3 slld_3;
mov ymm6_4 slld_4;
mov ymm6_5 slld_5;
mov ymm6_6 slld_6;
mov ymm6_7 slld_7;
mov ymm6_8 slld_8;
mov ymm6_9 slld_9;
mov ymm6_a slld_a;
mov ymm6_b slld_b;
mov ymm6_c slld_c;
mov ymm6_d slld_d;
mov ymm6_e slld_e;
mov ymm6_f slld_f;
(* vpblendw $0xaa,%ymm6,%ymm8,%ymm6                #! PC = 0x55555555916a *)
mov bldw_0 ymm8_0;
mov bldw_1 ymm6_1;
mov bldw_2 ymm8_2;
mov bldw_3 ymm6_3;
mov bldw_4 ymm8_4;
mov bldw_5 ymm6_5;
mov bldw_6 ymm8_6;
mov bldw_7 ymm6_7;
mov bldw_8 ymm8_8;
mov bldw_9 ymm6_9;
mov bldw_a ymm8_a;
mov bldw_b ymm6_b;
mov bldw_c ymm8_c;
mov bldw_d ymm6_d;
mov bldw_e ymm8_e;
mov bldw_f ymm6_f;
mov ymm6_0 bldw_0;
mov ymm6_1 bldw_1;
mov ymm6_2 bldw_2;
mov ymm6_3 bldw_3;
mov ymm6_4 bldw_4;
mov ymm6_5 bldw_5;
mov ymm6_6 bldw_6;
mov ymm6_7 bldw_7;
mov ymm6_8 bldw_8;
mov ymm6_9 bldw_9;
mov ymm6_a bldw_a;
mov ymm6_b bldw_b;
mov ymm6_c bldw_c;
mov ymm6_d bldw_d;
mov ymm6_e bldw_e;
mov ymm6_f bldw_f;
(* vpsrld $0x10,%ymm8,%ymm8                        #! PC = 0x555555559170 *)
mov srld_0 ymm8_1;
mov srld_1 0@sint16;
mov srld_2 ymm8_3;
mov srld_3 0@sint16;
mov srld_4 ymm8_5;
mov srld_5 0@sint16;
mov srld_6 ymm8_7;
mov srld_7 0@sint16;
mov srld_8 ymm8_9;
mov srld_9 0@sint16;
mov srld_a ymm8_b;
mov srld_b 0@sint16;
mov srld_c ymm8_d;
mov srld_d 0@sint16;
mov srld_e ymm8_f;
mov srld_f 0@sint16;
mov ymm8_0 srld_0;
mov ymm8_1 srld_1;
mov ymm8_2 srld_2;
mov ymm8_3 srld_3;
mov ymm8_4 srld_4;
mov ymm8_5 srld_5;
mov ymm8_6 srld_6;
mov ymm8_7 srld_7;
mov ymm8_8 srld_8;
mov ymm8_9 srld_9;
mov ymm8_a srld_a;
mov ymm8_b srld_b;
mov ymm8_c srld_c;
mov ymm8_d srld_d;
mov ymm8_e srld_e;
mov ymm8_f srld_f;
(* vpblendw $0xaa,%ymm13,%ymm8,%ymm12              #! PC = 0x555555559176 *)
mov bldw_0 ymm8_0;
mov bldw_1 ymm13_1;
mov bldw_2 ymm8_2;
mov bldw_3 ymm13_3;
mov bldw_4 ymm8_4;
mov bldw_5 ymm13_5;
mov bldw_6 ymm8_6;
mov bldw_7 ymm13_7;
mov bldw_8 ymm8_8;
mov bldw_9 ymm13_9;
mov bldw_a ymm8_a;
mov bldw_b ymm13_b;
mov bldw_c ymm8_c;
mov bldw_d ymm13_d;
mov bldw_e ymm8_e;
mov bldw_f ymm13_f;
mov ymm12_0 bldw_0;
mov ymm12_1 bldw_1;
mov ymm12_2 bldw_2;
mov ymm12_3 bldw_3;
mov ymm12_4 bldw_4;
mov ymm12_5 bldw_5;
mov ymm12_6 bldw_6;
mov ymm12_7 bldw_7;
mov ymm12_8 bldw_8;
mov ymm12_9 bldw_9;
mov ymm12_a bldw_a;
mov ymm12_b bldw_b;
mov ymm12_c bldw_c;
mov ymm12_d bldw_d;
mov ymm12_e bldw_e;
mov ymm12_f bldw_f;
(* vpslld $0x10,%ymm11,%ymm7                       #! PC = 0x55555555917c *)
mov slld_0 0@sint16;
mov slld_1 ymm11_0;
mov slld_2 0@sint16;
mov slld_3 ymm11_2;
mov slld_4 0@sint16;
mov slld_5 ymm11_4;
mov slld_6 0@sint16;
mov slld_7 ymm11_6;
mov slld_8 0@sint16;
mov slld_9 ymm11_8;
mov slld_a 0@sint16;
mov slld_b ymm11_a;
mov slld_c 0@sint16;
mov slld_d ymm11_c;
mov slld_e 0@sint16;
mov slld_f ymm11_e;
mov ymm7_0 slld_0;
mov ymm7_1 slld_1;
mov ymm7_2 slld_2;
mov ymm7_3 slld_3;
mov ymm7_4 slld_4;
mov ymm7_5 slld_5;
mov ymm7_6 slld_6;
mov ymm7_7 slld_7;
mov ymm7_8 slld_8;
mov ymm7_9 slld_9;
mov ymm7_a slld_a;
mov ymm7_b slld_b;
mov ymm7_c slld_c;
mov ymm7_d slld_d;
mov ymm7_e slld_e;
mov ymm7_f slld_f;
(* vpblendw $0xaa,%ymm7,%ymm10,%ymm7               #! PC = 0x555555559182 *)
mov bldw_0 ymm10_0;
mov bldw_1 ymm7_1;
mov bldw_2 ymm10_2;
mov bldw_3 ymm7_3;
mov bldw_4 ymm10_4;
mov bldw_5 ymm7_5;
mov bldw_6 ymm10_6;
mov bldw_7 ymm7_7;
mov bldw_8 ymm10_8;
mov bldw_9 ymm7_9;
mov bldw_a ymm10_a;
mov bldw_b ymm7_b;
mov bldw_c ymm10_c;
mov bldw_d ymm7_d;
mov bldw_e ymm10_e;
mov bldw_f ymm7_f;
mov ymm7_0 bldw_0;
mov ymm7_1 bldw_1;
mov ymm7_2 bldw_2;
mov ymm7_3 bldw_3;
mov ymm7_4 bldw_4;
mov ymm7_5 bldw_5;
mov ymm7_6 bldw_6;
mov ymm7_7 bldw_7;
mov ymm7_8 bldw_8;
mov ymm7_9 bldw_9;
mov ymm7_a bldw_a;
mov ymm7_b bldw_b;
mov ymm7_c bldw_c;
mov ymm7_d bldw_d;
mov ymm7_e bldw_e;
mov ymm7_f bldw_f;
(* vpsrld $0x10,%ymm10,%ymm10                      #! PC = 0x555555559188 *)
mov srld_0 ymm10_1;
mov srld_1 0@sint16;
mov srld_2 ymm10_3;
mov srld_3 0@sint16;
mov srld_4 ymm10_5;
mov srld_5 0@sint16;
mov srld_6 ymm10_7;
mov srld_7 0@sint16;
mov srld_8 ymm10_9;
mov srld_9 0@sint16;
mov srld_a ymm10_b;
mov srld_b 0@sint16;
mov srld_c ymm10_d;
mov srld_d 0@sint16;
mov srld_e ymm10_f;
mov srld_f 0@sint16;
mov ymm10_0 srld_0;
mov ymm10_1 srld_1;
mov ymm10_2 srld_2;
mov ymm10_3 srld_3;
mov ymm10_4 srld_4;
mov ymm10_5 srld_5;
mov ymm10_6 srld_6;
mov ymm10_7 srld_7;
mov ymm10_8 srld_8;
mov ymm10_9 srld_9;
mov ymm10_a srld_a;
mov ymm10_b srld_b;
mov ymm10_c srld_c;
mov ymm10_d srld_d;
mov ymm10_e srld_e;
mov ymm10_f srld_f;
(* vpblendw $0xaa,%ymm11,%ymm10,%ymm11             #! PC = 0x55555555918e *)
mov bldw_0 ymm10_0;
mov bldw_1 ymm11_1;
mov bldw_2 ymm10_2;
mov bldw_3 ymm11_3;
mov bldw_4 ymm10_4;
mov bldw_5 ymm11_5;
mov bldw_6 ymm10_6;
mov bldw_7 ymm11_7;
mov bldw_8 ymm10_8;
mov bldw_9 ymm11_9;
mov bldw_a ymm10_a;
mov bldw_b ymm11_b;
mov bldw_c ymm10_c;
mov bldw_d ymm11_d;
mov bldw_e ymm10_e;
mov bldw_f ymm11_f;
mov ymm11_0 bldw_0;
mov ymm11_1 bldw_1;
mov ymm11_2 bldw_2;
mov ymm11_3 bldw_3;
mov ymm11_4 bldw_4;
mov ymm11_5 bldw_5;
mov ymm11_6 bldw_6;
mov ymm11_7 bldw_7;
mov ymm11_8 bldw_8;
mov ymm11_9 bldw_9;
mov ymm11_a bldw_a;
mov ymm11_b bldw_b;
mov ymm11_c bldw_c;
mov ymm11_d bldw_d;
mov ymm11_e bldw_e;
mov ymm11_f bldw_f;
(* vmovsldup %ymm5,%ymm4                           #! PC = 0x555555559194 *)
mov ymm4_0 ymm5_0;
mov ymm4_1 ymm5_1;
mov ymm4_2 ymm5_0;
mov ymm4_3 ymm5_1;
mov ymm4_4 ymm5_4;
mov ymm4_5 ymm5_5;
mov ymm4_6 ymm5_4;
mov ymm4_7 ymm5_5;
mov ymm4_8 ymm5_8;
mov ymm4_9 ymm5_9;
mov ymm4_a ymm5_8;
mov ymm4_b ymm5_9;
mov ymm4_c ymm5_c;
mov ymm4_d ymm5_d;
mov ymm4_e ymm5_c;
mov ymm4_f ymm5_d;
(* vpblendd $0xaa,%ymm4,%ymm14,%ymm4               #! PC = 0x555555559198 *)
mov bldd_0 ymm14_0;
mov bldd_1 ymm14_1;
mov bldd_2 ymm4_2;
mov bldd_3 ymm4_3;
mov bldd_4 ymm14_4;
mov bldd_5 ymm14_5;
mov bldd_6 ymm4_6;
mov bldd_7 ymm4_7;
mov bldd_8 ymm14_8;
mov bldd_9 ymm14_9;
mov bldd_a ymm4_a;
mov bldd_b ymm4_b;
mov bldd_c ymm14_c;
mov bldd_d ymm14_d;
mov bldd_e ymm4_e;
mov bldd_f ymm4_f;
mov ymm4_0 bldd_0;
mov ymm4_1 bldd_1;
mov ymm4_2 bldd_2;
mov ymm4_3 bldd_3;
mov ymm4_4 bldd_4;
mov ymm4_5 bldd_5;
mov ymm4_6 bldd_6;
mov ymm4_7 bldd_7;
mov ymm4_8 bldd_8;
mov ymm4_9 bldd_9;
mov ymm4_a bldd_a;
mov ymm4_b bldd_b;
mov ymm4_c bldd_c;
mov ymm4_d bldd_d;
mov ymm4_e bldd_e;
mov ymm4_f bldd_f;
(* vpsrlq $0x20,%ymm14,%ymm14                      #! PC = 0x55555555919e *)
mov srlq_0 ymm14_2;
mov srlq_1 ymm14_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm14_6;
mov srlq_5 ymm14_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm14_a;
mov srlq_9 ymm14_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm14_e;
mov srlq_d ymm14_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm14_0 srlq_0;
mov ymm14_1 srlq_1;
mov ymm14_2 srlq_2;
mov ymm14_3 srlq_3;
mov ymm14_4 srlq_4;
mov ymm14_5 srlq_5;
mov ymm14_6 srlq_6;
mov ymm14_7 srlq_7;
mov ymm14_8 srlq_8;
mov ymm14_9 srlq_9;
mov ymm14_a srlq_a;
mov ymm14_b srlq_b;
mov ymm14_c srlq_c;
mov ymm14_d srlq_d;
mov ymm14_e srlq_e;
mov ymm14_f srlq_f;
(* vpblendd $0xaa,%ymm5,%ymm14,%ymm8               #! PC = 0x5555555591a4 *)
mov bldd_0 ymm14_0;
mov bldd_1 ymm14_1;
mov bldd_2 ymm5_2;
mov bldd_3 ymm5_3;
mov bldd_4 ymm14_4;
mov bldd_5 ymm14_5;
mov bldd_6 ymm5_6;
mov bldd_7 ymm5_7;
mov bldd_8 ymm14_8;
mov bldd_9 ymm14_9;
mov bldd_a ymm5_a;
mov bldd_b ymm5_b;
mov bldd_c ymm14_c;
mov bldd_d ymm14_d;
mov bldd_e ymm5_e;
mov bldd_f ymm5_f;
mov ymm8_0 bldd_0;
mov ymm8_1 bldd_1;
mov ymm8_2 bldd_2;
mov ymm8_3 bldd_3;
mov ymm8_4 bldd_4;
mov ymm8_5 bldd_5;
mov ymm8_6 bldd_6;
mov ymm8_7 bldd_7;
mov ymm8_8 bldd_8;
mov ymm8_9 bldd_9;
mov ymm8_a bldd_a;
mov ymm8_b bldd_b;
mov ymm8_c bldd_c;
mov ymm8_d bldd_d;
mov ymm8_e bldd_e;
mov ymm8_f bldd_f;
(* vmovsldup %ymm7,%ymm5                           #! PC = 0x5555555591aa *)
mov ymm5_0 ymm7_0;
mov ymm5_1 ymm7_1;
mov ymm5_2 ymm7_0;
mov ymm5_3 ymm7_1;
mov ymm5_4 ymm7_4;
mov ymm5_5 ymm7_5;
mov ymm5_6 ymm7_4;
mov ymm5_7 ymm7_5;
mov ymm5_8 ymm7_8;
mov ymm5_9 ymm7_9;
mov ymm5_a ymm7_8;
mov ymm5_b ymm7_9;
mov ymm5_c ymm7_c;
mov ymm5_d ymm7_d;
mov ymm5_e ymm7_c;
mov ymm5_f ymm7_d;
(* vpblendd $0xaa,%ymm5,%ymm6,%ymm5                #! PC = 0x5555555591ae *)
mov bldd_0 ymm6_0;
mov bldd_1 ymm6_1;
mov bldd_2 ymm5_2;
mov bldd_3 ymm5_3;
mov bldd_4 ymm6_4;
mov bldd_5 ymm6_5;
mov bldd_6 ymm5_6;
mov bldd_7 ymm5_7;
mov bldd_8 ymm6_8;
mov bldd_9 ymm6_9;
mov bldd_a ymm5_a;
mov bldd_b ymm5_b;
mov bldd_c ymm6_c;
mov bldd_d ymm6_d;
mov bldd_e ymm5_e;
mov bldd_f ymm5_f;
mov ymm5_0 bldd_0;
mov ymm5_1 bldd_1;
mov ymm5_2 bldd_2;
mov ymm5_3 bldd_3;
mov ymm5_4 bldd_4;
mov ymm5_5 bldd_5;
mov ymm5_6 bldd_6;
mov ymm5_7 bldd_7;
mov ymm5_8 bldd_8;
mov ymm5_9 bldd_9;
mov ymm5_a bldd_a;
mov ymm5_b bldd_b;
mov ymm5_c bldd_c;
mov ymm5_d bldd_d;
mov ymm5_e bldd_e;
mov ymm5_f bldd_f;
(* vpsrlq $0x20,%ymm6,%ymm6                        #! PC = 0x5555555591b4 *)
mov srlq_0 ymm6_2;
mov srlq_1 ymm6_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm6_6;
mov srlq_5 ymm6_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm6_a;
mov srlq_9 ymm6_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm6_e;
mov srlq_d ymm6_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm6_0 srlq_0;
mov ymm6_1 srlq_1;
mov ymm6_2 srlq_2;
mov ymm6_3 srlq_3;
mov ymm6_4 srlq_4;
mov ymm6_5 srlq_5;
mov ymm6_6 srlq_6;
mov ymm6_7 srlq_7;
mov ymm6_8 srlq_8;
mov ymm6_9 srlq_9;
mov ymm6_a srlq_a;
mov ymm6_b srlq_b;
mov ymm6_c srlq_c;
mov ymm6_d srlq_d;
mov ymm6_e srlq_e;
mov ymm6_f srlq_f;
(* vpblendd $0xaa,%ymm7,%ymm6,%ymm13               #! PC = 0x5555555591b9 *)
mov bldd_0 ymm6_0;
mov bldd_1 ymm6_1;
mov bldd_2 ymm7_2;
mov bldd_3 ymm7_3;
mov bldd_4 ymm6_4;
mov bldd_5 ymm6_5;
mov bldd_6 ymm7_6;
mov bldd_7 ymm7_7;
mov bldd_8 ymm6_8;
mov bldd_9 ymm6_9;
mov bldd_a ymm7_a;
mov bldd_b ymm7_b;
mov bldd_c ymm6_c;
mov bldd_d ymm6_d;
mov bldd_e ymm7_e;
mov bldd_f ymm7_f;
mov ymm13_0 bldd_0;
mov ymm13_1 bldd_1;
mov ymm13_2 bldd_2;
mov ymm13_3 bldd_3;
mov ymm13_4 bldd_4;
mov ymm13_5 bldd_5;
mov ymm13_6 bldd_6;
mov ymm13_7 bldd_7;
mov ymm13_8 bldd_8;
mov ymm13_9 bldd_9;
mov ymm13_a bldd_a;
mov ymm13_b bldd_b;
mov ymm13_c bldd_c;
mov ymm13_d bldd_d;
mov ymm13_e bldd_e;
mov ymm13_f bldd_f;
(* vmovsldup %ymm9,%ymm6                           #! PC = 0x5555555591bf *)
mov ymm6_0 ymm9_0;
mov ymm6_1 ymm9_1;
mov ymm6_2 ymm9_0;
mov ymm6_3 ymm9_1;
mov ymm6_4 ymm9_4;
mov ymm6_5 ymm9_5;
mov ymm6_6 ymm9_4;
mov ymm6_7 ymm9_5;
mov ymm6_8 ymm9_8;
mov ymm6_9 ymm9_9;
mov ymm6_a ymm9_8;
mov ymm6_b ymm9_9;
mov ymm6_c ymm9_c;
mov ymm6_d ymm9_d;
mov ymm6_e ymm9_c;
mov ymm6_f ymm9_d;
(* vpblendd $0xaa,%ymm6,%ymm15,%ymm6               #! PC = 0x5555555591c4 *)
mov bldd_0 ymm15_0;
mov bldd_1 ymm15_1;
mov bldd_2 ymm6_2;
mov bldd_3 ymm6_3;
mov bldd_4 ymm15_4;
mov bldd_5 ymm15_5;
mov bldd_6 ymm6_6;
mov bldd_7 ymm6_7;
mov bldd_8 ymm15_8;
mov bldd_9 ymm15_9;
mov bldd_a ymm6_a;
mov bldd_b ymm6_b;
mov bldd_c ymm15_c;
mov bldd_d ymm15_d;
mov bldd_e ymm6_e;
mov bldd_f ymm6_f;
mov ymm6_0 bldd_0;
mov ymm6_1 bldd_1;
mov ymm6_2 bldd_2;
mov ymm6_3 bldd_3;
mov ymm6_4 bldd_4;
mov ymm6_5 bldd_5;
mov ymm6_6 bldd_6;
mov ymm6_7 bldd_7;
mov ymm6_8 bldd_8;
mov ymm6_9 bldd_9;
mov ymm6_a bldd_a;
mov ymm6_b bldd_b;
mov ymm6_c bldd_c;
mov ymm6_d bldd_d;
mov ymm6_e bldd_e;
mov ymm6_f bldd_f;
(* vpsrlq $0x20,%ymm15,%ymm15                      #! PC = 0x5555555591ca *)
mov srlq_0 ymm15_2;
mov srlq_1 ymm15_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm15_6;
mov srlq_5 ymm15_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm15_a;
mov srlq_9 ymm15_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm15_e;
mov srlq_d ymm15_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm15_0 srlq_0;
mov ymm15_1 srlq_1;
mov ymm15_2 srlq_2;
mov ymm15_3 srlq_3;
mov ymm15_4 srlq_4;
mov ymm15_5 srlq_5;
mov ymm15_6 srlq_6;
mov ymm15_7 srlq_7;
mov ymm15_8 srlq_8;
mov ymm15_9 srlq_9;
mov ymm15_a srlq_a;
mov ymm15_b srlq_b;
mov ymm15_c srlq_c;
mov ymm15_d srlq_d;
mov ymm15_e srlq_e;
mov ymm15_f srlq_f;
(* vpblendd $0xaa,%ymm9,%ymm15,%ymm10              #! PC = 0x5555555591d0 *)
mov bldd_0 ymm15_0;
mov bldd_1 ymm15_1;
mov bldd_2 ymm9_2;
mov bldd_3 ymm9_3;
mov bldd_4 ymm15_4;
mov bldd_5 ymm15_5;
mov bldd_6 ymm9_6;
mov bldd_7 ymm9_7;
mov bldd_8 ymm15_8;
mov bldd_9 ymm15_9;
mov bldd_a ymm9_a;
mov bldd_b ymm9_b;
mov bldd_c ymm15_c;
mov bldd_d ymm15_d;
mov bldd_e ymm9_e;
mov bldd_f ymm9_f;
mov ymm10_0 bldd_0;
mov ymm10_1 bldd_1;
mov ymm10_2 bldd_2;
mov ymm10_3 bldd_3;
mov ymm10_4 bldd_4;
mov ymm10_5 bldd_5;
mov ymm10_6 bldd_6;
mov ymm10_7 bldd_7;
mov ymm10_8 bldd_8;
mov ymm10_9 bldd_9;
mov ymm10_a bldd_a;
mov ymm10_b bldd_b;
mov ymm10_c bldd_c;
mov ymm10_d bldd_d;
mov ymm10_e bldd_e;
mov ymm10_f bldd_f;
(* vmovsldup %ymm11,%ymm7                          #! PC = 0x5555555591d6 *)
mov ymm7_0 ymm11_0;
mov ymm7_1 ymm11_1;
mov ymm7_2 ymm11_0;
mov ymm7_3 ymm11_1;
mov ymm7_4 ymm11_4;
mov ymm7_5 ymm11_5;
mov ymm7_6 ymm11_4;
mov ymm7_7 ymm11_5;
mov ymm7_8 ymm11_8;
mov ymm7_9 ymm11_9;
mov ymm7_a ymm11_8;
mov ymm7_b ymm11_9;
mov ymm7_c ymm11_c;
mov ymm7_d ymm11_d;
mov ymm7_e ymm11_c;
mov ymm7_f ymm11_d;
(* vpblendd $0xaa,%ymm7,%ymm12,%ymm7               #! PC = 0x5555555591db *)
mov bldd_0 ymm12_0;
mov bldd_1 ymm12_1;
mov bldd_2 ymm7_2;
mov bldd_3 ymm7_3;
mov bldd_4 ymm12_4;
mov bldd_5 ymm12_5;
mov bldd_6 ymm7_6;
mov bldd_7 ymm7_7;
mov bldd_8 ymm12_8;
mov bldd_9 ymm12_9;
mov bldd_a ymm7_a;
mov bldd_b ymm7_b;
mov bldd_c ymm12_c;
mov bldd_d ymm12_d;
mov bldd_e ymm7_e;
mov bldd_f ymm7_f;
mov ymm7_0 bldd_0;
mov ymm7_1 bldd_1;
mov ymm7_2 bldd_2;
mov ymm7_3 bldd_3;
mov ymm7_4 bldd_4;
mov ymm7_5 bldd_5;
mov ymm7_6 bldd_6;
mov ymm7_7 bldd_7;
mov ymm7_8 bldd_8;
mov ymm7_9 bldd_9;
mov ymm7_a bldd_a;
mov ymm7_b bldd_b;
mov ymm7_c bldd_c;
mov ymm7_d bldd_d;
mov ymm7_e bldd_e;
mov ymm7_f bldd_f;
(* vpsrlq $0x20,%ymm12,%ymm12                      #! PC = 0x5555555591e1 *)
mov srlq_0 ymm12_2;
mov srlq_1 ymm12_3;
mov srlq_2 0@sint16;
mov srlq_3 0@sint16;
mov srlq_4 ymm12_6;
mov srlq_5 ymm12_7;
mov srlq_6 0@sint16;
mov srlq_7 0@sint16;
mov srlq_8 ymm12_a;
mov srlq_9 ymm12_b;
mov srlq_a 0@sint16;
mov srlq_b 0@sint16;
mov srlq_c ymm12_e;
mov srlq_d ymm12_f;
mov srlq_e 0@sint16;
mov srlq_f 0@sint16;
mov ymm12_0 srlq_0;
mov ymm12_1 srlq_1;
mov ymm12_2 srlq_2;
mov ymm12_3 srlq_3;
mov ymm12_4 srlq_4;
mov ymm12_5 srlq_5;
mov ymm12_6 srlq_6;
mov ymm12_7 srlq_7;
mov ymm12_8 srlq_8;
mov ymm12_9 srlq_9;
mov ymm12_a srlq_a;
mov ymm12_b srlq_b;
mov ymm12_c srlq_c;
mov ymm12_d srlq_d;
mov ymm12_e srlq_e;
mov ymm12_f srlq_f;
(* vpblendd $0xaa,%ymm11,%ymm12,%ymm11             #! PC = 0x5555555591e7 *)
mov bldd_0 ymm12_0;
mov bldd_1 ymm12_1;
mov bldd_2 ymm11_2;
mov bldd_3 ymm11_3;
mov bldd_4 ymm12_4;
mov bldd_5 ymm12_5;
mov bldd_6 ymm11_6;
mov bldd_7 ymm11_7;
mov bldd_8 ymm12_8;
mov bldd_9 ymm12_9;
mov bldd_a ymm11_a;
mov bldd_b ymm11_b;
mov bldd_c ymm12_c;
mov bldd_d ymm12_d;
mov bldd_e ymm11_e;
mov bldd_f ymm11_f;
mov ymm11_0 bldd_0;
mov ymm11_1 bldd_1;
mov ymm11_2 bldd_2;
mov ymm11_3 bldd_3;
mov ymm11_4 bldd_4;
mov ymm11_5 bldd_5;
mov ymm11_6 bldd_6;
mov ymm11_7 bldd_7;
mov ymm11_8 bldd_8;
mov ymm11_9 bldd_9;
mov ymm11_a bldd_a;
mov ymm11_b bldd_b;
mov ymm11_c bldd_c;
mov ymm11_d bldd_d;
mov ymm11_e bldd_e;
mov ymm11_f bldd_f;
(* vpmullw 0x80(%rdx),%ymm4,%ymm14                 #! EA = L0x555555560780; Value = 0xfff7fff7fff7fff7; PC = 0x5555555591ed *)
smull mulHymm4_0 mulL_0 L0x555555560780 ymm4_0;
smull mulHymm4_1 mulL_1 L0x555555560782 ymm4_1;
smull mulHymm4_2 mulL_2 L0x555555560784 ymm4_2;
smull mulHymm4_3 mulL_3 L0x555555560786 ymm4_3;
smull mulHymm4_4 mulL_4 L0x555555560788 ymm4_4;
smull mulHymm4_5 mulL_5 L0x55555556078a ymm4_5;
smull mulHymm4_6 mulL_6 L0x55555556078c ymm4_6;
smull mulHymm4_7 mulL_7 L0x55555556078e ymm4_7;
smull mulHymm4_8 mulL_8 L0x555555560790 ymm4_8;
smull mulHymm4_9 mulL_9 L0x555555560792 ymm4_9;
smull mulHymm4_a mulL_a L0x555555560794 ymm4_a;
smull mulHymm4_b mulL_b L0x555555560796 ymm4_b;
smull mulHymm4_c mulL_c L0x555555560798 ymm4_c;
smull mulHymm4_d mulL_d L0x55555556079a ymm4_d;
smull mulHymm4_e mulL_e L0x55555556079c ymm4_e;
smull mulHymm4_f mulL_f L0x55555556079e ymm4_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw 0xa0(%rdx),%ymm4,%ymm4                  #! EA = L0x5555555607a0; Value = 0xf1f7f1f7f1f7f1f7; PC = 0x5555555591f5 *)
smull mulH_0 mulLymm4_0 ymm4_0 L0x5555555607a0;
smull mulH_1 mulLymm4_1 ymm4_1 L0x5555555607a2;
smull mulH_2 mulLymm4_2 ymm4_2 L0x5555555607a4;
smull mulH_3 mulLymm4_3 ymm4_3 L0x5555555607a6;
smull mulH_4 mulLymm4_4 ymm4_4 L0x5555555607a8;
smull mulH_5 mulLymm4_5 ymm4_5 L0x5555555607aa;
smull mulH_6 mulLymm4_6 ymm4_6 L0x5555555607ac;
smull mulH_7 mulLymm4_7 ymm4_7 L0x5555555607ae;
smull mulH_8 mulLymm4_8 ymm4_8 L0x5555555607b0;
smull mulH_9 mulLymm4_9 ymm4_9 L0x5555555607b2;
smull mulH_a mulLymm4_a ymm4_a L0x5555555607b4;
smull mulH_b mulLymm4_b ymm4_b L0x5555555607b6;
smull mulH_c mulLymm4_c ymm4_c L0x5555555607b8;
smull mulH_d mulLymm4_d ymm4_d L0x5555555607ba;
smull mulH_e mulLymm4_e ymm4_e L0x5555555607bc;
smull mulH_f mulLymm4_f ymm4_f L0x5555555607be;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x5555555591fd *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm4_0;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm4_1;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm4_2;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm4_3;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm4_4;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm4_5;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm4_6;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm4_7;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm4_8;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm4_9;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm4_a;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm4_b;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm4_c;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm4_d;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm4_e;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm4_f;
assume red_f = mulLymm4_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm4,%ymm4                       #! PC = 0x555555559201 *)
sub ymm4_0 ymm4_0 ymm14_0;
sub ymm4_1 ymm4_1 ymm14_1;
sub ymm4_2 ymm4_2 ymm14_2;
sub ymm4_3 ymm4_3 ymm14_3;
sub ymm4_4 ymm4_4 ymm14_4;
sub ymm4_5 ymm4_5 ymm14_5;
sub ymm4_6 ymm4_6 ymm14_6;
sub ymm4_7 ymm4_7 ymm14_7;
sub ymm4_8 ymm4_8 ymm14_8;
sub ymm4_9 ymm4_9 ymm14_9;
sub ymm4_a ymm4_a ymm14_a;
sub ymm4_b ymm4_b ymm14_b;
sub ymm4_c ymm4_c ymm14_c;
sub ymm4_d ymm4_d ymm14_d;
sub ymm4_e ymm4_e ymm14_e;
sub ymm4_f ymm4_f ymm14_f;
(* vpbroadcastq 0x640(%rdx),%ymm14                 #! EA = L0x555555560d40; Value = 0x286e8f3fbfd7fff7; PC = 0x555555559206 *)
mov ymm14_0 L0x555555560d40;
mov ymm14_1 L0x555555560d42;
mov ymm14_2 L0x555555560d44;
mov ymm14_3 L0x555555560d46;
mov ymm14_4 L0x555555560d40;
mov ymm14_5 L0x555555560d42;
mov ymm14_6 L0x555555560d44;
mov ymm14_7 L0x555555560d46;
mov ymm14_8 L0x555555560d40;
mov ymm14_9 L0x555555560d42;
mov ymm14_a L0x555555560d44;
mov ymm14_b L0x555555560d46;
mov ymm14_c L0x555555560d40;
mov ymm14_d L0x555555560d42;
mov ymm14_e L0x555555560d44;
mov ymm14_f L0x555555560d46;
(* vpbroadcastq 0x648(%rdx),%ymm15                 #! EA = L0x555555560d48; Value = 0x0c6ef13ff1d7f1f7; PC = 0x55555555920f *)
mov ymm15_0 L0x555555560d48;
mov ymm15_1 L0x555555560d4a;
mov ymm15_2 L0x555555560d4c;
mov ymm15_3 L0x555555560d4e;
mov ymm15_4 L0x555555560d48;
mov ymm15_5 L0x555555560d4a;
mov ymm15_6 L0x555555560d4c;
mov ymm15_7 L0x555555560d4e;
mov ymm15_8 L0x555555560d48;
mov ymm15_9 L0x555555560d4a;
mov ymm15_a L0x555555560d4c;
mov ymm15_b L0x555555560d4e;
mov ymm15_c L0x555555560d48;
mov ymm15_d L0x555555560d4a;
mov ymm15_e L0x555555560d4c;
mov ymm15_f L0x555555560d4e;
(* vpmullw %ymm14,%ymm5,%ymm14                     #! PC = 0x555555559218 *)
smull mulHymm5_0 mulL_0 ymm14_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm14_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm14_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm14_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm14_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm14_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm14_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm14_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm14_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm14_9 ymm5_9;
smull mulHymm5_a mulL_a ymm14_a ymm5_a;
smull mulHymm5_b mulL_b ymm14_b ymm5_b;
smull mulHymm5_c mulL_c ymm14_c ymm5_c;
smull mulHymm5_d mulL_d ymm14_d ymm5_d;
smull mulHymm5_e mulL_e ymm14_e ymm5_e;
smull mulHymm5_f mulL_f ymm14_f ymm5_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm5,%ymm5                      #! PC = 0x55555555921d *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm15_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm15_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm15_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm15_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm15_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm15_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm15_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm15_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm15_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm15_9;
smull mulH_a mulLymm5_a ymm5_a ymm15_a;
smull mulH_b mulLymm5_b ymm5_b ymm15_b;
smull mulH_c mulLymm5_c ymm5_c ymm15_c;
smull mulH_d mulLymm5_d ymm5_d ymm15_d;
smull mulH_e mulLymm5_e ymm5_e ymm15_e;
smull mulH_f mulLymm5_f ymm5_f ymm15_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555559222 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm5_0;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm5_1;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm5_2;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm5_3;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm5_4;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm5_5;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm5_6;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm5_7;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm5_8;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm5_9;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm5_a;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm5_b;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm5_c;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm5_d;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm5_e;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm5_f;
assume red_f = mulLymm5_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm5,%ymm5                       #! PC = 0x555555559226 *)
sub ymm5_0 ymm5_0 ymm14_0;
sub ymm5_1 ymm5_1 ymm14_1;
sub ymm5_2 ymm5_2 ymm14_2;
sub ymm5_3 ymm5_3 ymm14_3;
sub ymm5_4 ymm5_4 ymm14_4;
sub ymm5_5 ymm5_5 ymm14_5;
sub ymm5_6 ymm5_6 ymm14_6;
sub ymm5_7 ymm5_7 ymm14_7;
sub ymm5_8 ymm5_8 ymm14_8;
sub ymm5_9 ymm5_9 ymm14_9;
sub ymm5_a ymm5_a ymm14_a;
sub ymm5_b ymm5_b ymm14_b;
sub ymm5_c ymm5_c ymm14_c;
sub ymm5_d ymm5_d ymm14_d;
sub ymm5_e ymm5_e ymm14_e;
sub ymm5_f ymm5_f ymm14_f;
(* vpbroadcastq 0x670(%rdx),%ymm14                 #! EA = L0x555555560d70; Value = 0x1c4cbfd7136efff7; PC = 0x55555555922b *)
mov ymm14_0 L0x555555560d70;
mov ymm14_1 L0x555555560d72;
mov ymm14_2 L0x555555560d74;
mov ymm14_3 L0x555555560d76;
mov ymm14_4 L0x555555560d70;
mov ymm14_5 L0x555555560d72;
mov ymm14_6 L0x555555560d74;
mov ymm14_7 L0x555555560d76;
mov ymm14_8 L0x555555560d70;
mov ymm14_9 L0x555555560d72;
mov ymm14_a L0x555555560d74;
mov ymm14_b L0x555555560d76;
mov ymm14_c L0x555555560d70;
mov ymm14_d L0x555555560d72;
mov ymm14_e L0x555555560d74;
mov ymm14_f L0x555555560d76;
(* vpbroadcastq 0x678(%rdx),%ymm15                 #! EA = L0x555555560d78; Value = 0x044cf1d7f76ef1f7; PC = 0x555555559234 *)
mov ymm15_0 L0x555555560d78;
mov ymm15_1 L0x555555560d7a;
mov ymm15_2 L0x555555560d7c;
mov ymm15_3 L0x555555560d7e;
mov ymm15_4 L0x555555560d78;
mov ymm15_5 L0x555555560d7a;
mov ymm15_6 L0x555555560d7c;
mov ymm15_7 L0x555555560d7e;
mov ymm15_8 L0x555555560d78;
mov ymm15_9 L0x555555560d7a;
mov ymm15_a L0x555555560d7c;
mov ymm15_b L0x555555560d7e;
mov ymm15_c L0x555555560d78;
mov ymm15_d L0x555555560d7a;
mov ymm15_e L0x555555560d7c;
mov ymm15_f L0x555555560d7e;
(* vpmullw %ymm14,%ymm6,%ymm14                     #! PC = 0x55555555923d *)
smull mulHymm6_0 mulL_0 ymm14_0 ymm6_0;
smull mulHymm6_1 mulL_1 ymm14_1 ymm6_1;
smull mulHymm6_2 mulL_2 ymm14_2 ymm6_2;
smull mulHymm6_3 mulL_3 ymm14_3 ymm6_3;
smull mulHymm6_4 mulL_4 ymm14_4 ymm6_4;
smull mulHymm6_5 mulL_5 ymm14_5 ymm6_5;
smull mulHymm6_6 mulL_6 ymm14_6 ymm6_6;
smull mulHymm6_7 mulL_7 ymm14_7 ymm6_7;
smull mulHymm6_8 mulL_8 ymm14_8 ymm6_8;
smull mulHymm6_9 mulL_9 ymm14_9 ymm6_9;
smull mulHymm6_a mulL_a ymm14_a ymm6_a;
smull mulHymm6_b mulL_b ymm14_b ymm6_b;
smull mulHymm6_c mulL_c ymm14_c ymm6_c;
smull mulHymm6_d mulL_d ymm14_d ymm6_d;
smull mulHymm6_e mulL_e ymm14_e ymm6_e;
smull mulHymm6_f mulL_f ymm14_f ymm6_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm6,%ymm6                      #! PC = 0x555555559242 *)
smull mulH_0 mulLymm6_0 ymm6_0 ymm15_0;
smull mulH_1 mulLymm6_1 ymm6_1 ymm15_1;
smull mulH_2 mulLymm6_2 ymm6_2 ymm15_2;
smull mulH_3 mulLymm6_3 ymm6_3 ymm15_3;
smull mulH_4 mulLymm6_4 ymm6_4 ymm15_4;
smull mulH_5 mulLymm6_5 ymm6_5 ymm15_5;
smull mulH_6 mulLymm6_6 ymm6_6 ymm15_6;
smull mulH_7 mulLymm6_7 ymm6_7 ymm15_7;
smull mulH_8 mulLymm6_8 ymm6_8 ymm15_8;
smull mulH_9 mulLymm6_9 ymm6_9 ymm15_9;
smull mulH_a mulLymm6_a ymm6_a ymm15_a;
smull mulH_b mulLymm6_b ymm6_b ymm15_b;
smull mulH_c mulLymm6_c ymm6_c ymm15_c;
smull mulH_d mulLymm6_d ymm6_d ymm15_d;
smull mulH_e mulLymm6_e ymm6_e ymm15_e;
smull mulH_f mulLymm6_f ymm6_f ymm15_f;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555559247 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm6_0;
assume red_0 = mulLymm6_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm6_1;
assume red_1 = mulLymm6_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm6_2;
assume red_2 = mulLymm6_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm6_3;
assume red_3 = mulLymm6_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm6_4;
assume red_4 = mulLymm6_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm6_5;
assume red_5 = mulLymm6_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm6_6;
assume red_6 = mulLymm6_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm6_7;
assume red_7 = mulLymm6_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm6_8;
assume red_8 = mulLymm6_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm6_9;
assume red_9 = mulLymm6_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm6_a;
assume red_a = mulLymm6_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm6_b;
assume red_b = mulLymm6_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm6_c;
assume red_c = mulLymm6_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm6_d;
assume red_d = mulLymm6_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm6_e;
assume red_e = mulLymm6_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm6_f;
assume red_f = mulLymm6_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm6,%ymm6                       #! PC = 0x55555555924b *)
sub ymm6_0 ymm6_0 ymm14_0;
sub ymm6_1 ymm6_1 ymm14_1;
sub ymm6_2 ymm6_2 ymm14_2;
sub ymm6_3 ymm6_3 ymm14_3;
sub ymm6_4 ymm6_4 ymm14_4;
sub ymm6_5 ymm6_5 ymm14_5;
sub ymm6_6 ymm6_6 ymm14_6;
sub ymm6_7 ymm6_7 ymm14_7;
sub ymm6_8 ymm6_8 ymm14_8;
sub ymm6_9 ymm6_9 ymm14_9;
sub ymm6_a ymm6_a ymm14_a;
sub ymm6_b ymm6_b ymm14_b;
sub ymm6_c ymm6_c ymm14_c;
sub ymm6_d ymm6_d ymm14_d;
sub ymm6_e ymm6_e ymm14_e;
sub ymm6_f ymm6_f ymm14_f;
(* vpbroadcastq 0x660(%rdx),%ymm14                 #! EA = L0x555555560d60; Value = 0x3998d7921190fff7; PC = 0x555555559250 *)
mov ymm14_0 L0x555555560d60;
mov ymm14_1 L0x555555560d62;
mov ymm14_2 L0x555555560d64;
mov ymm14_3 L0x555555560d66;
mov ymm14_4 L0x555555560d60;
mov ymm14_5 L0x555555560d62;
mov ymm14_6 L0x555555560d64;
mov ymm14_7 L0x555555560d66;
mov ymm14_8 L0x555555560d60;
mov ymm14_9 L0x555555560d62;
mov ymm14_a L0x555555560d64;
mov ymm14_b L0x555555560d66;
mov ymm14_c L0x555555560d60;
mov ymm14_d L0x555555560d62;
mov ymm14_e L0x555555560d64;
mov ymm14_f L0x555555560d66;
(* vpbroadcastq 0x668(%rdx),%ymm15                 #! EA = L0x555555560d68; Value = 0x0998f392f190f1f7; PC = 0x555555559259 *)
mov ymm15_0 L0x555555560d68;
mov ymm15_1 L0x555555560d6a;
mov ymm15_2 L0x555555560d6c;
mov ymm15_3 L0x555555560d6e;
mov ymm15_4 L0x555555560d68;
mov ymm15_5 L0x555555560d6a;
mov ymm15_6 L0x555555560d6c;
mov ymm15_7 L0x555555560d6e;
mov ymm15_8 L0x555555560d68;
mov ymm15_9 L0x555555560d6a;
mov ymm15_a L0x555555560d6c;
mov ymm15_b L0x555555560d6e;
mov ymm15_c L0x555555560d68;
mov ymm15_d L0x555555560d6a;
mov ymm15_e L0x555555560d6c;
mov ymm15_f L0x555555560d6e;
(* vpmullw %ymm14,%ymm7,%ymm14                     #! PC = 0x555555559262 *)
smull mulHymm7_0 mulL_0 ymm14_0 ymm7_0;
smull mulHymm7_1 mulL_1 ymm14_1 ymm7_1;
smull mulHymm7_2 mulL_2 ymm14_2 ymm7_2;
smull mulHymm7_3 mulL_3 ymm14_3 ymm7_3;
smull mulHymm7_4 mulL_4 ymm14_4 ymm7_4;
smull mulHymm7_5 mulL_5 ymm14_5 ymm7_5;
smull mulHymm7_6 mulL_6 ymm14_6 ymm7_6;
smull mulHymm7_7 mulL_7 ymm14_7 ymm7_7;
smull mulHymm7_8 mulL_8 ymm14_8 ymm7_8;
smull mulHymm7_9 mulL_9 ymm14_9 ymm7_9;
smull mulHymm7_a mulL_a ymm14_a ymm7_a;
smull mulHymm7_b mulL_b ymm14_b ymm7_b;
smull mulHymm7_c mulL_c ymm14_c ymm7_c;
smull mulHymm7_d mulL_d ymm14_d ymm7_d;
smull mulHymm7_e mulL_e ymm14_e ymm7_e;
smull mulHymm7_f mulL_f ymm14_f ymm7_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm7,%ymm7                      #! PC = 0x555555559267 *)
smull mulH_0 mulLymm7_0 ymm7_0 ymm15_0;
smull mulH_1 mulLymm7_1 ymm7_1 ymm15_1;
smull mulH_2 mulLymm7_2 ymm7_2 ymm15_2;
smull mulH_3 mulLymm7_3 ymm7_3 ymm15_3;
smull mulH_4 mulLymm7_4 ymm7_4 ymm15_4;
smull mulH_5 mulLymm7_5 ymm7_5 ymm15_5;
smull mulH_6 mulLymm7_6 ymm7_6 ymm15_6;
smull mulH_7 mulLymm7_7 ymm7_7 ymm15_7;
smull mulH_8 mulLymm7_8 ymm7_8 ymm15_8;
smull mulH_9 mulLymm7_9 ymm7_9 ymm15_9;
smull mulH_a mulLymm7_a ymm7_a ymm15_a;
smull mulH_b mulLymm7_b ymm7_b ymm15_b;
smull mulH_c mulLymm7_c ymm7_c ymm15_c;
smull mulH_d mulLymm7_d ymm7_d ymm15_d;
smull mulH_e mulLymm7_e ymm7_e ymm15_e;
smull mulH_f mulLymm7_f ymm7_f ymm15_f;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x55555555926c *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm7_0;
assume red_0 = mulLymm7_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm7_1;
assume red_1 = mulLymm7_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm7_2;
assume red_2 = mulLymm7_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm7_3;
assume red_3 = mulLymm7_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm7_4;
assume red_4 = mulLymm7_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm7_5;
assume red_5 = mulLymm7_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm7_6;
assume red_6 = mulLymm7_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm7_7;
assume red_7 = mulLymm7_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm7_8;
assume red_8 = mulLymm7_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm7_9;
assume red_9 = mulLymm7_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm7_a;
assume red_a = mulLymm7_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm7_b;
assume red_b = mulLymm7_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm7_c;
assume red_c = mulLymm7_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm7_d;
assume red_d = mulLymm7_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm7_e;
assume red_e = mulLymm7_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm7_f;
assume red_f = mulLymm7_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm7,%ymm7                       #! PC = 0x555555559270 *)
sub ymm7_0 ymm7_0 ymm14_0;
sub ymm7_1 ymm7_1 ymm14_1;
sub ymm7_2 ymm7_2 ymm14_2;
sub ymm7_3 ymm7_3 ymm14_3;
sub ymm7_4 ymm7_4 ymm14_4;
sub ymm7_5 ymm7_5 ymm14_5;
sub ymm7_6 ymm7_6 ymm14_6;
sub ymm7_7 ymm7_7 ymm14_7;
sub ymm7_8 ymm7_8 ymm14_8;
sub ymm7_9 ymm7_9 ymm14_9;
sub ymm7_a ymm7_a ymm14_a;
sub ymm7_b ymm7_b ymm14_b;
sub ymm7_c ymm7_c ymm14_c;
sub ymm7_d ymm7_d ymm14_d;
sub ymm7_e ymm7_e ymm14_e;
sub ymm7_f ymm7_f ymm14_f;
(* vpbroadcastq 0x6b0(%rdx),%ymm14                 #! EA = L0x555555560db0; Value = 0xa7bf136eae7afff7; PC = 0x555555559275 *)
mov ymm14_0 L0x555555560db0;
mov ymm14_1 L0x555555560db2;
mov ymm14_2 L0x555555560db4;
mov ymm14_3 L0x555555560db6;
mov ymm14_4 L0x555555560db0;
mov ymm14_5 L0x555555560db2;
mov ymm14_6 L0x555555560db4;
mov ymm14_7 L0x555555560db6;
mov ymm14_8 L0x555555560db0;
mov ymm14_9 L0x555555560db2;
mov ymm14_a L0x555555560db4;
mov ymm14_b L0x555555560db6;
mov ymm14_c L0x555555560db0;
mov ymm14_d L0x555555560db2;
mov ymm14_e L0x555555560db4;
mov ymm14_f L0x555555560db6;
(* vpbroadcastq 0x6b8(%rdx),%ymm15                 #! EA = L0x555555560db8; Value = 0x09bff76efa7af1f7; PC = 0x55555555927e *)
mov ymm15_0 L0x555555560db8;
mov ymm15_1 L0x555555560dba;
mov ymm15_2 L0x555555560dbc;
mov ymm15_3 L0x555555560dbe;
mov ymm15_4 L0x555555560db8;
mov ymm15_5 L0x555555560dba;
mov ymm15_6 L0x555555560dbc;
mov ymm15_7 L0x555555560dbe;
mov ymm15_8 L0x555555560db8;
mov ymm15_9 L0x555555560dba;
mov ymm15_a L0x555555560dbc;
mov ymm15_b L0x555555560dbe;
mov ymm15_c L0x555555560db8;
mov ymm15_d L0x555555560dba;
mov ymm15_e L0x555555560dbc;
mov ymm15_f L0x555555560dbe;
(* vpmullw %ymm14,%ymm8,%ymm14                     #! PC = 0x555555559287 *)
smull mulHymm8_0 mulL_0 ymm14_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm14_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm14_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm14_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm14_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm14_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm14_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm14_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm14_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm14_9 ymm8_9;
smull mulHymm8_a mulL_a ymm14_a ymm8_a;
smull mulHymm8_b mulL_b ymm14_b ymm8_b;
smull mulHymm8_c mulL_c ymm14_c ymm8_c;
smull mulHymm8_d mulL_d ymm14_d ymm8_d;
smull mulHymm8_e mulL_e ymm14_e ymm8_e;
smull mulHymm8_f mulL_f ymm14_f ymm8_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm8,%ymm8                      #! PC = 0x55555555928c *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm15_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm15_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm15_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm15_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm15_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm15_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm15_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm15_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm15_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm15_9;
smull mulH_a mulLymm8_a ymm8_a ymm15_a;
smull mulH_b mulLymm8_b ymm8_b ymm15_b;
smull mulH_c mulLymm8_c ymm8_c ymm15_c;
smull mulH_d mulLymm8_d ymm8_d ymm15_d;
smull mulH_e mulLymm8_e ymm8_e ymm15_e;
smull mulH_f mulLymm8_f ymm8_f ymm15_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555559291 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm8_0;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm8_1;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm8_2;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm8_3;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm8_4;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm8_5;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm8_6;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm8_7;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm8_8;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm8_9;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm8_a;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm8_b;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm8_c;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm8_d;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm8_e;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm8_f;
assume red_f = mulLymm8_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm8,%ymm8                       #! PC = 0x555555559295 *)
sub ymm8_0 ymm8_0 ymm14_0;
sub ymm8_1 ymm8_1 ymm14_1;
sub ymm8_2 ymm8_2 ymm14_2;
sub ymm8_3 ymm8_3 ymm14_3;
sub ymm8_4 ymm8_4 ymm14_4;
sub ymm8_5 ymm8_5 ymm14_5;
sub ymm8_6 ymm8_6 ymm14_6;
sub ymm8_7 ymm8_7 ymm14_7;
sub ymm8_8 ymm8_8 ymm14_8;
sub ymm8_9 ymm8_9 ymm14_9;
sub ymm8_a ymm8_a ymm14_a;
sub ymm8_b ymm8_b ymm14_b;
sub ymm8_c ymm8_c ymm14_c;
sub ymm8_d ymm8_d ymm14_d;
sub ymm8_e ymm8_e ymm14_e;
sub ymm8_f ymm8_f ymm14_f;
(* vpbroadcastq 0x6a0(%rdx),%ymm14                 #! EA = L0x555555560da0; Value = 0xa3363998b8f1fff7; PC = 0x55555555929a *)
mov ymm14_0 L0x555555560da0;
mov ymm14_1 L0x555555560da2;
mov ymm14_2 L0x555555560da4;
mov ymm14_3 L0x555555560da6;
mov ymm14_4 L0x555555560da0;
mov ymm14_5 L0x555555560da2;
mov ymm14_6 L0x555555560da4;
mov ymm14_7 L0x555555560da6;
mov ymm14_8 L0x555555560da0;
mov ymm14_9 L0x555555560da2;
mov ymm14_a L0x555555560da4;
mov ymm14_b L0x555555560da6;
mov ymm14_c L0x555555560da0;
mov ymm14_d L0x555555560da2;
mov ymm14_e L0x555555560da4;
mov ymm14_f L0x555555560da6;
(* vpbroadcastq 0x6a8(%rdx),%ymm15                 #! EA = L0x555555560da8; Value = 0xf7360998f6f1f1f7; PC = 0x5555555592a3 *)
mov ymm15_0 L0x555555560da8;
mov ymm15_1 L0x555555560daa;
mov ymm15_2 L0x555555560dac;
mov ymm15_3 L0x555555560dae;
mov ymm15_4 L0x555555560da8;
mov ymm15_5 L0x555555560daa;
mov ymm15_6 L0x555555560dac;
mov ymm15_7 L0x555555560dae;
mov ymm15_8 L0x555555560da8;
mov ymm15_9 L0x555555560daa;
mov ymm15_a L0x555555560dac;
mov ymm15_b L0x555555560dae;
mov ymm15_c L0x555555560da8;
mov ymm15_d L0x555555560daa;
mov ymm15_e L0x555555560dac;
mov ymm15_f L0x555555560dae;
(* vpmullw %ymm14,%ymm13,%ymm14                    #! PC = 0x5555555592ac *)
smull mulHymm13_0 mulL_0 ymm14_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm14_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm14_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm14_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm14_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm14_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm14_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm14_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm14_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm14_9 ymm13_9;
smull mulHymm13_a mulL_a ymm14_a ymm13_a;
smull mulHymm13_b mulL_b ymm14_b ymm13_b;
smull mulHymm13_c mulL_c ymm14_c ymm13_c;
smull mulHymm13_d mulL_d ymm14_d ymm13_d;
smull mulHymm13_e mulL_e ymm14_e ymm13_e;
smull mulHymm13_f mulL_f ymm14_f ymm13_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm13,%ymm13                    #! PC = 0x5555555592b1 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm15_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm15_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm15_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm15_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm15_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm15_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm15_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm15_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm15_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm15_9;
smull mulH_a mulLymm13_a ymm13_a ymm15_a;
smull mulH_b mulLymm13_b ymm13_b ymm15_b;
smull mulH_c mulLymm13_c ymm13_c ymm15_c;
smull mulH_d mulLymm13_d ymm13_d ymm15_d;
smull mulH_e mulLymm13_e ymm13_e ymm15_e;
smull mulH_f mulLymm13_f ymm13_f ymm15_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x5555555592b6 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm13,%ymm13                     #! PC = 0x5555555592ba *)
sub ymm13_0 ymm13_0 ymm14_0;
sub ymm13_1 ymm13_1 ymm14_1;
sub ymm13_2 ymm13_2 ymm14_2;
sub ymm13_3 ymm13_3 ymm14_3;
sub ymm13_4 ymm13_4 ymm14_4;
sub ymm13_5 ymm13_5 ymm14_5;
sub ymm13_6 ymm13_6 ymm14_6;
sub ymm13_7 ymm13_7 ymm14_7;
sub ymm13_8 ymm13_8 ymm14_8;
sub ymm13_9 ymm13_9 ymm14_9;
sub ymm13_a ymm13_a ymm14_a;
sub ymm13_b ymm13_b ymm14_b;
sub ymm13_c ymm13_c ymm14_c;
sub ymm13_d ymm13_d ymm14_d;
sub ymm13_e ymm13_e ymm14_e;
sub ymm13_f ymm13_f ymm14_f;
(* vpbroadcastq 0x690(%rdx),%ymm14                 #! EA = L0x555555560d90; Value = 0xb0a51c4ca7bffff7; PC = 0x5555555592bf *)
mov ymm14_0 L0x555555560d90;
mov ymm14_1 L0x555555560d92;
mov ymm14_2 L0x555555560d94;
mov ymm14_3 L0x555555560d96;
mov ymm14_4 L0x555555560d90;
mov ymm14_5 L0x555555560d92;
mov ymm14_6 L0x555555560d94;
mov ymm14_7 L0x555555560d96;
mov ymm14_8 L0x555555560d90;
mov ymm14_9 L0x555555560d92;
mov ymm14_a L0x555555560d94;
mov ymm14_b L0x555555560d96;
mov ymm14_c L0x555555560d90;
mov ymm14_d L0x555555560d92;
mov ymm14_e L0x555555560d94;
mov ymm14_f L0x555555560d96;
(* vpbroadcastq 0x698(%rdx),%ymm15                 #! EA = L0x555555560d98; Value = 0x06a5044c09bff1f7; PC = 0x5555555592c8 *)
mov ymm15_0 L0x555555560d98;
mov ymm15_1 L0x555555560d9a;
mov ymm15_2 L0x555555560d9c;
mov ymm15_3 L0x555555560d9e;
mov ymm15_4 L0x555555560d98;
mov ymm15_5 L0x555555560d9a;
mov ymm15_6 L0x555555560d9c;
mov ymm15_7 L0x555555560d9e;
mov ymm15_8 L0x555555560d98;
mov ymm15_9 L0x555555560d9a;
mov ymm15_a L0x555555560d9c;
mov ymm15_b L0x555555560d9e;
mov ymm15_c L0x555555560d98;
mov ymm15_d L0x555555560d9a;
mov ymm15_e L0x555555560d9c;
mov ymm15_f L0x555555560d9e;
(* vpmullw %ymm14,%ymm10,%ymm14                    #! PC = 0x5555555592d1 *)
smull mulHymm10_0 mulL_0 ymm14_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm14_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm14_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm14_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm14_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm14_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm14_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm14_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm14_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm14_9 ymm10_9;
smull mulHymm10_a mulL_a ymm14_a ymm10_a;
smull mulHymm10_b mulL_b ymm14_b ymm10_b;
smull mulHymm10_c mulL_c ymm14_c ymm10_c;
smull mulHymm10_d mulL_d ymm14_d ymm10_d;
smull mulHymm10_e mulL_e ymm14_e ymm10_e;
smull mulHymm10_f mulL_f ymm14_f ymm10_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm10,%ymm10                    #! PC = 0x5555555592d6 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm15_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm15_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm15_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm15_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm15_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm15_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm15_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm15_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm15_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm15_9;
smull mulH_a mulLymm10_a ymm10_a ymm15_a;
smull mulH_b mulLymm10_b ymm10_b ymm15_b;
smull mulH_c mulLymm10_c ymm10_c ymm15_c;
smull mulH_d mulLymm10_d ymm10_d ymm15_d;
smull mulH_e mulLymm10_e ymm10_e ymm15_e;
smull mulH_f mulLymm10_f ymm10_f ymm15_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x5555555592db *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm10_0;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm10_1;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm10_2;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm10_3;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm10_4;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm10_5;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm10_6;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm10_7;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm10_8;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm10_9;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm10_a;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm10_b;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm10_c;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm10_d;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm10_e;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm10_f;
assume red_f = mulLymm10_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm10,%ymm10                     #! PC = 0x5555555592df *)
sub ymm10_0 ymm10_0 ymm14_0;
sub ymm10_1 ymm10_1 ymm14_1;
sub ymm10_2 ymm10_2 ymm14_2;
sub ymm10_3 ymm10_3 ymm14_3;
sub ymm10_4 ymm10_4 ymm14_4;
sub ymm10_5 ymm10_5 ymm14_5;
sub ymm10_6 ymm10_6 ymm14_6;
sub ymm10_7 ymm10_7 ymm14_7;
sub ymm10_8 ymm10_8 ymm14_8;
sub ymm10_9 ymm10_9 ymm14_9;
sub ymm10_a ymm10_a ymm14_a;
sub ymm10_b ymm10_b ymm14_b;
sub ymm10_c ymm10_c ymm14_c;
sub ymm10_d ymm10_d ymm14_d;
sub ymm10_e ymm10_e ymm14_e;
sub ymm10_f ymm10_f ymm14_f;
(* vpbroadcastq 0x680(%rdx),%ymm14                 #! EA = L0x555555560d80; Value = 0xb8f11190d279fff7; PC = 0x5555555592e4 *)
mov ymm14_0 L0x555555560d80;
mov ymm14_1 L0x555555560d82;
mov ymm14_2 L0x555555560d84;
mov ymm14_3 L0x555555560d86;
mov ymm14_4 L0x555555560d80;
mov ymm14_5 L0x555555560d82;
mov ymm14_6 L0x555555560d84;
mov ymm14_7 L0x555555560d86;
mov ymm14_8 L0x555555560d80;
mov ymm14_9 L0x555555560d82;
mov ymm14_a L0x555555560d84;
mov ymm14_b L0x555555560d86;
mov ymm14_c L0x555555560d80;
mov ymm14_d L0x555555560d82;
mov ymm14_e L0x555555560d84;
mov ymm14_f L0x555555560d86;
(* vpbroadcastq 0x688(%rdx),%ymm15                 #! EA = L0x555555560d88; Value = 0xf6f1f1900079f1f7; PC = 0x5555555592ed *)
mov ymm15_0 L0x555555560d88;
mov ymm15_1 L0x555555560d8a;
mov ymm15_2 L0x555555560d8c;
mov ymm15_3 L0x555555560d8e;
mov ymm15_4 L0x555555560d88;
mov ymm15_5 L0x555555560d8a;
mov ymm15_6 L0x555555560d8c;
mov ymm15_7 L0x555555560d8e;
mov ymm15_8 L0x555555560d88;
mov ymm15_9 L0x555555560d8a;
mov ymm15_a L0x555555560d8c;
mov ymm15_b L0x555555560d8e;
mov ymm15_c L0x555555560d88;
mov ymm15_d L0x555555560d8a;
mov ymm15_e L0x555555560d8c;
mov ymm15_f L0x555555560d8e;
(* vpmullw %ymm14,%ymm11,%ymm14                    #! PC = 0x5555555592f6 *)
smull mulHymm11_0 mulL_0 ymm14_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm14_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm14_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm14_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm14_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm14_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm14_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm14_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm14_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm14_9 ymm11_9;
smull mulHymm11_a mulL_a ymm14_a ymm11_a;
smull mulHymm11_b mulL_b ymm14_b ymm11_b;
smull mulHymm11_c mulL_c ymm14_c ymm11_c;
smull mulHymm11_d mulL_d ymm14_d ymm11_d;
smull mulHymm11_e mulL_e ymm14_e ymm11_e;
smull mulHymm11_f mulL_f ymm14_f ymm11_f;
cast ymm14_0@sint16 mulL_0;
cast ymm14_1@sint16 mulL_1;
cast ymm14_2@sint16 mulL_2;
cast ymm14_3@sint16 mulL_3;
cast ymm14_4@sint16 mulL_4;
cast ymm14_5@sint16 mulL_5;
cast ymm14_6@sint16 mulL_6;
cast ymm14_7@sint16 mulL_7;
cast ymm14_8@sint16 mulL_8;
cast ymm14_9@sint16 mulL_9;
cast ymm14_a@sint16 mulL_a;
cast ymm14_b@sint16 mulL_b;
cast ymm14_c@sint16 mulL_c;
cast ymm14_d@sint16 mulL_d;
cast ymm14_e@sint16 mulL_e;
cast ymm14_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm11,%ymm11                    #! PC = 0x5555555592fb *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm15_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm15_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm15_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm15_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm15_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm15_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm15_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm15_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm15_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm15_9;
smull mulH_a mulLymm11_a ymm11_a ymm15_a;
smull mulH_b mulLymm11_b ymm11_b ymm15_b;
smull mulH_c mulLymm11_c ymm11_c ymm15_c;
smull mulH_d mulLymm11_d ymm11_d ymm15_d;
smull mulH_e mulLymm11_e ymm11_e ymm15_e;
smull mulH_f mulLymm11_f ymm11_f ymm15_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm14,%ymm14                     #! PC = 0x555555559300 *)
smull mulH_0 red_0 ymm14_0 ymm0_0;
assert true && red_0 = mulLymm11_0;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm14_1 ymm0_1;
assert true && red_1 = mulLymm11_1;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm14_2 ymm0_2;
assert true && red_2 = mulLymm11_2;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm14_3 ymm0_3;
assert true && red_3 = mulLymm11_3;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm14_4 ymm0_4;
assert true && red_4 = mulLymm11_4;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm14_5 ymm0_5;
assert true && red_5 = mulLymm11_5;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm14_6 ymm0_6;
assert true && red_6 = mulLymm11_6;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm14_7 ymm0_7;
assert true && red_7 = mulLymm11_7;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm14_8 ymm0_8;
assert true && red_8 = mulLymm11_8;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm14_9 ymm0_9;
assert true && red_9 = mulLymm11_9;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm14_a ymm0_a;
assert true && red_a = mulLymm11_a;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm14_b ymm0_b;
assert true && red_b = mulLymm11_b;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm14_c ymm0_c;
assert true && red_c = mulLymm11_c;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm14_d ymm0_d;
assert true && red_d = mulLymm11_d;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm14_e ymm0_e;
assert true && red_e = mulLymm11_e;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm14_f ymm0_f;
assert true && red_f = mulLymm11_f;
assume red_f = mulLymm11_f && true;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpsubw %ymm14,%ymm11,%ymm11                     #! PC = 0x555555559304 *)
sub ymm11_0 ymm11_0 ymm14_0;
sub ymm11_1 ymm11_1 ymm14_1;
sub ymm11_2 ymm11_2 ymm14_2;
sub ymm11_3 ymm11_3 ymm14_3;
sub ymm11_4 ymm11_4 ymm14_4;
sub ymm11_5 ymm11_5 ymm14_5;
sub ymm11_6 ymm11_6 ymm14_6;
sub ymm11_7 ymm11_7 ymm14_7;
sub ymm11_8 ymm11_8 ymm14_8;
sub ymm11_9 ymm11_9 ymm14_9;
sub ymm11_a ymm11_a ymm14_a;
sub ymm11_b ymm11_b ymm14_b;
sub ymm11_c ymm11_c ymm14_c;
sub ymm11_d ymm11_d ymm14_d;
sub ymm11_e ymm11_e ymm14_e;
sub ymm11_f ymm11_f ymm14_f;
(* vpsubw %ymm6,%ymm7,%ymm12                       #! PC = 0x555555559309 *)
sub ymm12_0 ymm7_0 ymm6_0;
sub ymm12_1 ymm7_1 ymm6_1;
sub ymm12_2 ymm7_2 ymm6_2;
sub ymm12_3 ymm7_3 ymm6_3;
sub ymm12_4 ymm7_4 ymm6_4;
sub ymm12_5 ymm7_5 ymm6_5;
sub ymm12_6 ymm7_6 ymm6_6;
sub ymm12_7 ymm7_7 ymm6_7;
sub ymm12_8 ymm7_8 ymm6_8;
sub ymm12_9 ymm7_9 ymm6_9;
sub ymm12_a ymm7_a ymm6_a;
sub ymm12_b ymm7_b ymm6_b;
sub ymm12_c ymm7_c ymm6_c;
sub ymm12_d ymm7_d ymm6_d;
sub ymm12_e ymm7_e ymm6_e;
sub ymm12_f ymm7_f ymm6_f;
(* vpaddw %ymm7,%ymm6,%ymm6                        #! PC = 0x55555555930d *)
add ymm6_0 ymm6_0 ymm7_0;
add ymm6_1 ymm6_1 ymm7_1;
add ymm6_2 ymm6_2 ymm7_2;
add ymm6_3 ymm6_3 ymm7_3;
add ymm6_4 ymm6_4 ymm7_4;
add ymm6_5 ymm6_5 ymm7_5;
add ymm6_6 ymm6_6 ymm7_6;
add ymm6_7 ymm6_7 ymm7_7;
add ymm6_8 ymm6_8 ymm7_8;
add ymm6_9 ymm6_9 ymm7_9;
add ymm6_a ymm6_a ymm7_a;
add ymm6_b ymm6_b ymm7_b;
add ymm6_c ymm6_c ymm7_c;
add ymm6_d ymm6_d ymm7_d;
add ymm6_e ymm6_e ymm7_e;
add ymm6_f ymm6_f ymm7_f;
(* vpmullw %ymm1,%ymm12,%ymm7                      #! PC = 0x555555559311 *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpsubw %ymm8,%ymm13,%ymm9                       #! PC = 0x555555559315 *)
sub ymm9_0 ymm13_0 ymm8_0;
sub ymm9_1 ymm13_1 ymm8_1;
sub ymm9_2 ymm13_2 ymm8_2;
sub ymm9_3 ymm13_3 ymm8_3;
sub ymm9_4 ymm13_4 ymm8_4;
sub ymm9_5 ymm13_5 ymm8_5;
sub ymm9_6 ymm13_6 ymm8_6;
sub ymm9_7 ymm13_7 ymm8_7;
sub ymm9_8 ymm13_8 ymm8_8;
sub ymm9_9 ymm13_9 ymm8_9;
sub ymm9_a ymm13_a ymm8_a;
sub ymm9_b ymm13_b ymm8_b;
sub ymm9_c ymm13_c ymm8_c;
sub ymm9_d ymm13_d ymm8_d;
sub ymm9_e ymm13_e ymm8_e;
sub ymm9_f ymm13_f ymm8_f;
(* vpaddw %ymm13,%ymm8,%ymm8                       #! PC = 0x55555555931a *)
add ymm8_0 ymm8_0 ymm13_0;
add ymm8_1 ymm8_1 ymm13_1;
add ymm8_2 ymm8_2 ymm13_2;
add ymm8_3 ymm8_3 ymm13_3;
add ymm8_4 ymm8_4 ymm13_4;
add ymm8_5 ymm8_5 ymm13_5;
add ymm8_6 ymm8_6 ymm13_6;
add ymm8_7 ymm8_7 ymm13_7;
add ymm8_8 ymm8_8 ymm13_8;
add ymm8_9 ymm8_9 ymm13_9;
add ymm8_a ymm8_a ymm13_a;
add ymm8_b ymm8_b ymm13_b;
add ymm8_c ymm8_c ymm13_c;
add ymm8_d ymm8_d ymm13_d;
add ymm8_e ymm8_e ymm13_e;
add ymm8_f ymm8_f ymm13_f;
(* vpmullw 0x1c0(%rdx),%ymm9,%ymm13                #! EA = L0x5555555608c0; Value = 0x4029402940294029; PC = 0x55555555931f *)
smull mulHymm9_0 mulL_0 L0x5555555608c0 ymm9_0;
smull mulHymm9_1 mulL_1 L0x5555555608c2 ymm9_1;
smull mulHymm9_2 mulL_2 L0x5555555608c4 ymm9_2;
smull mulHymm9_3 mulL_3 L0x5555555608c6 ymm9_3;
smull mulHymm9_4 mulL_4 L0x5555555608c8 ymm9_4;
smull mulHymm9_5 mulL_5 L0x5555555608ca ymm9_5;
smull mulHymm9_6 mulL_6 L0x5555555608cc ymm9_6;
smull mulHymm9_7 mulL_7 L0x5555555608ce ymm9_7;
smull mulHymm9_8 mulL_8 L0x5555555608d0 ymm9_8;
smull mulHymm9_9 mulL_9 L0x5555555608d2 ymm9_9;
smull mulHymm9_a mulL_a L0x5555555608d4 ymm9_a;
smull mulHymm9_b mulL_b L0x5555555608d6 ymm9_b;
smull mulHymm9_c mulL_c L0x5555555608d8 ymm9_c;
smull mulHymm9_d mulL_d L0x5555555608da ymm9_d;
smull mulHymm9_e mulL_e L0x5555555608dc ymm9_e;
smull mulHymm9_f mulL_f L0x5555555608de ymm9_f;
cast ymm13_0@sint16 mulL_0;
cast ymm13_1@sint16 mulL_1;
cast ymm13_2@sint16 mulL_2;
cast ymm13_3@sint16 mulL_3;
cast ymm13_4@sint16 mulL_4;
cast ymm13_5@sint16 mulL_5;
cast ymm13_6@sint16 mulL_6;
cast ymm13_7@sint16 mulL_7;
cast ymm13_8@sint16 mulL_8;
cast ymm13_9@sint16 mulL_9;
cast ymm13_a@sint16 mulL_a;
cast ymm13_b@sint16 mulL_b;
cast ymm13_c@sint16 mulL_c;
cast ymm13_d@sint16 mulL_d;
cast ymm13_e@sint16 mulL_e;
cast ymm13_f@sint16 mulL_f;
(* vpsubw %ymm10,%ymm11,%ymm14                     #! PC = 0x555555559327 *)
sub ymm14_0 ymm11_0 ymm10_0;
sub ymm14_1 ymm11_1 ymm10_1;
sub ymm14_2 ymm11_2 ymm10_2;
sub ymm14_3 ymm11_3 ymm10_3;
sub ymm14_4 ymm11_4 ymm10_4;
sub ymm14_5 ymm11_5 ymm10_5;
sub ymm14_6 ymm11_6 ymm10_6;
sub ymm14_7 ymm11_7 ymm10_7;
sub ymm14_8 ymm11_8 ymm10_8;
sub ymm14_9 ymm11_9 ymm10_9;
sub ymm14_a ymm11_a ymm10_a;
sub ymm14_b ymm11_b ymm10_b;
sub ymm14_c ymm11_c ymm10_c;
sub ymm14_d ymm11_d ymm10_d;
sub ymm14_e ymm11_e ymm10_e;
sub ymm14_f ymm11_f ymm10_f;
(* vpaddw %ymm11,%ymm10,%ymm10                     #! PC = 0x55555555932c *)
add ymm10_0 ymm10_0 ymm11_0;
add ymm10_1 ymm10_1 ymm11_1;
add ymm10_2 ymm10_2 ymm11_2;
add ymm10_3 ymm10_3 ymm11_3;
add ymm10_4 ymm10_4 ymm11_4;
add ymm10_5 ymm10_5 ymm11_5;
add ymm10_6 ymm10_6 ymm11_6;
add ymm10_7 ymm10_7 ymm11_7;
add ymm10_8 ymm10_8 ymm11_8;
add ymm10_9 ymm10_9 ymm11_9;
add ymm10_a ymm10_a ymm11_a;
add ymm10_b ymm10_b ymm11_b;
add ymm10_c ymm10_c ymm11_c;
add ymm10_d ymm10_d ymm11_d;
add ymm10_e ymm10_e ymm11_e;
add ymm10_f ymm10_f ymm11_f;
(* vpmullw 0x140(%rdx),%ymm14,%ymm11               #! EA = L0x555555560840; Value = 0xd792d792d792d792; PC = 0x555555559331 *)
smull mulHymm14_0 mulL_0 L0x555555560840 ymm14_0;
smull mulHymm14_1 mulL_1 L0x555555560842 ymm14_1;
smull mulHymm14_2 mulL_2 L0x555555560844 ymm14_2;
smull mulHymm14_3 mulL_3 L0x555555560846 ymm14_3;
smull mulHymm14_4 mulL_4 L0x555555560848 ymm14_4;
smull mulHymm14_5 mulL_5 L0x55555556084a ymm14_5;
smull mulHymm14_6 mulL_6 L0x55555556084c ymm14_6;
smull mulHymm14_7 mulL_7 L0x55555556084e ymm14_7;
smull mulHymm14_8 mulL_8 L0x555555560850 ymm14_8;
smull mulHymm14_9 mulL_9 L0x555555560852 ymm14_9;
smull mulHymm14_a mulL_a L0x555555560854 ymm14_a;
smull mulHymm14_b mulL_b L0x555555560856 ymm14_b;
smull mulHymm14_c mulL_c L0x555555560858 ymm14_c;
smull mulHymm14_d mulL_d L0x55555556085a ymm14_d;
smull mulHymm14_e mulL_e L0x55555556085c ymm14_e;
smull mulHymm14_f mulL_f L0x55555556085e ymm14_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x555555559339 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw 0x1e0(%rdx),%ymm9,%ymm9                 #! EA = L0x5555555608e0; Value = 0x0e290e290e290e29; PC = 0x55555555933d *)
smull mulH_0 mulLymm9_0 ymm9_0 L0x5555555608e0;
smull mulH_1 mulLymm9_1 ymm9_1 L0x5555555608e2;
smull mulH_2 mulLymm9_2 ymm9_2 L0x5555555608e4;
smull mulH_3 mulLymm9_3 ymm9_3 L0x5555555608e6;
smull mulH_4 mulLymm9_4 ymm9_4 L0x5555555608e8;
smull mulH_5 mulLymm9_5 ymm9_5 L0x5555555608ea;
smull mulH_6 mulLymm9_6 ymm9_6 L0x5555555608ec;
smull mulH_7 mulLymm9_7 ymm9_7 L0x5555555608ee;
smull mulH_8 mulLymm9_8 ymm9_8 L0x5555555608f0;
smull mulH_9 mulLymm9_9 ymm9_9 L0x5555555608f2;
smull mulH_a mulLymm9_a ymm9_a L0x5555555608f4;
smull mulH_b mulLymm9_b ymm9_b L0x5555555608f6;
smull mulH_c mulLymm9_c ymm9_c L0x5555555608f8;
smull mulH_d mulLymm9_d ymm9_d L0x5555555608fa;
smull mulH_e mulLymm9_e ymm9_e L0x5555555608fc;
smull mulH_f mulLymm9_f ymm9_f L0x5555555608fe;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw 0x160(%rdx),%ymm14,%ymm14               #! EA = L0x555555560860; Value = 0xf392f392f392f392; PC = 0x555555559345 *)
smull mulH_0 mulLymm14_0 ymm14_0 L0x555555560860;
smull mulH_1 mulLymm14_1 ymm14_1 L0x555555560862;
smull mulH_2 mulLymm14_2 ymm14_2 L0x555555560864;
smull mulH_3 mulLymm14_3 ymm14_3 L0x555555560866;
smull mulH_4 mulLymm14_4 ymm14_4 L0x555555560868;
smull mulH_5 mulLymm14_5 ymm14_5 L0x55555556086a;
smull mulH_6 mulLymm14_6 ymm14_6 L0x55555556086c;
smull mulH_7 mulLymm14_7 ymm14_7 L0x55555556086e;
smull mulH_8 mulLymm14_8 ymm14_8 L0x555555560870;
smull mulH_9 mulLymm14_9 ymm14_9 L0x555555560872;
smull mulH_a mulLymm14_a ymm14_a L0x555555560874;
smull mulH_b mulLymm14_b ymm14_b L0x555555560876;
smull mulH_c mulLymm14_c ymm14_c L0x555555560878;
smull mulH_d mulLymm14_d ymm14_d L0x55555556087a;
smull mulH_e mulLymm14_e ymm14_e L0x55555556087c;
smull mulH_f mulLymm14_f ymm14_f L0x55555556087e;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555934d *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpmulhw %ymm0,%ymm13,%ymm13                     #! PC = 0x555555559351 *)
smull mulH_0 red_0 ymm13_0 ymm0_0;
assert true && red_0 = mulLymm9_0;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm13_1 ymm0_1;
assert true && red_1 = mulLymm9_1;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm13_2 ymm0_2;
assert true && red_2 = mulLymm9_2;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm13_3 ymm0_3;
assert true && red_3 = mulLymm9_3;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm13_4 ymm0_4;
assert true && red_4 = mulLymm9_4;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm13_5 ymm0_5;
assert true && red_5 = mulLymm9_5;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm13_6 ymm0_6;
assert true && red_6 = mulLymm9_6;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm13_7 ymm0_7;
assert true && red_7 = mulLymm9_7;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm13_8 ymm0_8;
assert true && red_8 = mulLymm9_8;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm13_9 ymm0_9;
assert true && red_9 = mulLymm9_9;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm13_a ymm0_a;
assert true && red_a = mulLymm9_a;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm13_b ymm0_b;
assert true && red_b = mulLymm9_b;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm13_c ymm0_c;
assert true && red_c = mulLymm9_c;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm13_d ymm0_d;
assert true && red_d = mulLymm9_d;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm13_e ymm0_e;
assert true && red_e = mulLymm9_e;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm13_f ymm0_f;
assert true && red_f = mulLymm9_f;
assume red_f = mulLymm9_f && true;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x555555559355 *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpaddw %ymm5,%ymm4,%ymm15                       #! PC = 0x555555559359 *)
add ymm15_0 ymm4_0 ymm5_0;
add ymm15_1 ymm4_1 ymm5_1;
add ymm15_2 ymm4_2 ymm5_2;
add ymm15_3 ymm4_3 ymm5_3;
add ymm15_4 ymm4_4 ymm5_4;
add ymm15_5 ymm4_5 ymm5_5;
add ymm15_6 ymm4_6 ymm5_6;
add ymm15_7 ymm4_7 ymm5_7;
add ymm15_8 ymm4_8 ymm5_8;
add ymm15_9 ymm4_9 ymm5_9;
add ymm15_a ymm4_a ymm5_a;
add ymm15_b ymm4_b ymm5_b;
add ymm15_c ymm4_c ymm5_c;
add ymm15_d ymm4_d ymm5_d;
add ymm15_e ymm4_e ymm5_e;
add ymm15_f ymm4_f ymm5_f;
(* vpsubw %ymm5,%ymm4,%ymm5                        #! PC = 0x55555555935d *)
sub ymm5_0 ymm4_0 ymm5_0;
sub ymm5_1 ymm4_1 ymm5_1;
sub ymm5_2 ymm4_2 ymm5_2;
sub ymm5_3 ymm4_3 ymm5_3;
sub ymm5_4 ymm4_4 ymm5_4;
sub ymm5_5 ymm4_5 ymm5_5;
sub ymm5_6 ymm4_6 ymm5_6;
sub ymm5_7 ymm4_7 ymm5_7;
sub ymm5_8 ymm4_8 ymm5_8;
sub ymm5_9 ymm4_9 ymm5_9;
sub ymm5_a ymm4_a ymm5_a;
sub ymm5_b ymm4_b ymm5_b;
sub ymm5_c ymm4_c ymm5_c;
sub ymm5_d ymm4_d ymm5_d;
sub ymm5_e ymm4_e ymm5_e;
sub ymm5_f ymm4_f ymm5_f;
(* vpsubw %ymm7,%ymm12,%ymm7                       #! PC = 0x555555559361 *)
sub ymm7_0 ymm12_0 ymm7_0;
sub ymm7_1 ymm12_1 ymm7_1;
sub ymm7_2 ymm12_2 ymm7_2;
sub ymm7_3 ymm12_3 ymm7_3;
sub ymm7_4 ymm12_4 ymm7_4;
sub ymm7_5 ymm12_5 ymm7_5;
sub ymm7_6 ymm12_6 ymm7_6;
sub ymm7_7 ymm12_7 ymm7_7;
sub ymm7_8 ymm12_8 ymm7_8;
sub ymm7_9 ymm12_9 ymm7_9;
sub ymm7_a ymm12_a ymm7_a;
sub ymm7_b ymm12_b ymm7_b;
sub ymm7_c ymm12_c ymm7_c;
sub ymm7_d ymm12_d ymm7_d;
sub ymm7_e ymm12_e ymm7_e;
sub ymm7_f ymm12_f ymm7_f;
(* vpsubw %ymm13,%ymm9,%ymm9                       #! PC = 0x555555559365 *)
sub ymm9_0 ymm9_0 ymm13_0;
sub ymm9_1 ymm9_1 ymm13_1;
sub ymm9_2 ymm9_2 ymm13_2;
sub ymm9_3 ymm9_3 ymm13_3;
sub ymm9_4 ymm9_4 ymm13_4;
sub ymm9_5 ymm9_5 ymm13_5;
sub ymm9_6 ymm9_6 ymm13_6;
sub ymm9_7 ymm9_7 ymm13_7;
sub ymm9_8 ymm9_8 ymm13_8;
sub ymm9_9 ymm9_9 ymm13_9;
sub ymm9_a ymm9_a ymm13_a;
sub ymm9_b ymm9_b ymm13_b;
sub ymm9_c ymm9_c ymm13_c;
sub ymm9_d ymm9_d ymm13_d;
sub ymm9_e ymm9_e ymm13_e;
sub ymm9_f ymm9_f ymm13_f;
(* vpsubw %ymm11,%ymm14,%ymm11                     #! PC = 0x55555555936a *)
sub ymm11_0 ymm14_0 ymm11_0;
sub ymm11_1 ymm14_1 ymm11_1;
sub ymm11_2 ymm14_2 ymm11_2;
sub ymm11_3 ymm14_3 ymm11_3;
sub ymm11_4 ymm14_4 ymm11_4;
sub ymm11_5 ymm14_5 ymm11_5;
sub ymm11_6 ymm14_6 ymm11_6;
sub ymm11_7 ymm14_7 ymm11_7;
sub ymm11_8 ymm14_8 ymm11_8;
sub ymm11_9 ymm14_9 ymm11_9;
sub ymm11_a ymm14_a ymm11_a;
sub ymm11_b ymm14_b ymm11_b;
sub ymm11_c ymm14_c ymm11_c;
sub ymm11_d ymm14_d ymm11_d;
sub ymm11_e ymm14_e ymm11_e;
sub ymm11_f ymm14_f ymm11_f;
(* vpsubw %ymm8,%ymm10,%ymm12                      #! PC = 0x55555555936f *)
sub ymm12_0 ymm10_0 ymm8_0;
sub ymm12_1 ymm10_1 ymm8_1;
sub ymm12_2 ymm10_2 ymm8_2;
sub ymm12_3 ymm10_3 ymm8_3;
sub ymm12_4 ymm10_4 ymm8_4;
sub ymm12_5 ymm10_5 ymm8_5;
sub ymm12_6 ymm10_6 ymm8_6;
sub ymm12_7 ymm10_7 ymm8_7;
sub ymm12_8 ymm10_8 ymm8_8;
sub ymm12_9 ymm10_9 ymm8_9;
sub ymm12_a ymm10_a ymm8_a;
sub ymm12_b ymm10_b ymm8_b;
sub ymm12_c ymm10_c ymm8_c;
sub ymm12_d ymm10_d ymm8_d;
sub ymm12_e ymm10_e ymm8_e;
sub ymm12_f ymm10_f ymm8_f;
(* vpaddw %ymm10,%ymm8,%ymm8                       #! PC = 0x555555559374 *)
add ymm8_0 ymm8_0 ymm10_0;
add ymm8_1 ymm8_1 ymm10_1;
add ymm8_2 ymm8_2 ymm10_2;
add ymm8_3 ymm8_3 ymm10_3;
add ymm8_4 ymm8_4 ymm10_4;
add ymm8_5 ymm8_5 ymm10_5;
add ymm8_6 ymm8_6 ymm10_6;
add ymm8_7 ymm8_7 ymm10_7;
add ymm8_8 ymm8_8 ymm10_8;
add ymm8_9 ymm8_9 ymm10_9;
add ymm8_a ymm8_a ymm10_a;
add ymm8_b ymm8_b ymm10_b;
add ymm8_c ymm8_c ymm10_c;
add ymm8_d ymm8_d ymm10_d;
add ymm8_e ymm8_e ymm10_e;
add ymm8_f ymm8_f ymm10_f;
(* vpmullw %ymm1,%ymm12,%ymm10                     #! PC = 0x555555559379 *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpsubw %ymm9,%ymm11,%ymm13                      #! PC = 0x55555555937d *)
sub ymm13_0 ymm11_0 ymm9_0;
sub ymm13_1 ymm11_1 ymm9_1;
sub ymm13_2 ymm11_2 ymm9_2;
sub ymm13_3 ymm11_3 ymm9_3;
sub ymm13_4 ymm11_4 ymm9_4;
sub ymm13_5 ymm11_5 ymm9_5;
sub ymm13_6 ymm11_6 ymm9_6;
sub ymm13_7 ymm11_7 ymm9_7;
sub ymm13_8 ymm11_8 ymm9_8;
sub ymm13_9 ymm11_9 ymm9_9;
sub ymm13_a ymm11_a ymm9_a;
sub ymm13_b ymm11_b ymm9_b;
sub ymm13_c ymm11_c ymm9_c;
sub ymm13_d ymm11_d ymm9_d;
sub ymm13_e ymm11_e ymm9_e;
sub ymm13_f ymm11_f ymm9_f;
(* vpaddw %ymm11,%ymm9,%ymm9                       #! PC = 0x555555559382 *)
add ymm9_0 ymm9_0 ymm11_0;
add ymm9_1 ymm9_1 ymm11_1;
add ymm9_2 ymm9_2 ymm11_2;
add ymm9_3 ymm9_3 ymm11_3;
add ymm9_4 ymm9_4 ymm11_4;
add ymm9_5 ymm9_5 ymm11_5;
add ymm9_6 ymm9_6 ymm11_6;
add ymm9_7 ymm9_7 ymm11_7;
add ymm9_8 ymm9_8 ymm11_8;
add ymm9_9 ymm9_9 ymm11_9;
add ymm9_a ymm9_a ymm11_a;
add ymm9_b ymm9_b ymm11_b;
add ymm9_c ymm9_c ymm11_c;
add ymm9_d ymm9_d ymm11_d;
add ymm9_e ymm9_e ymm11_e;
add ymm9_f ymm9_f ymm11_f;
(* vpmullw %ymm1,%ymm13,%ymm11                     #! PC = 0x555555559387 *)
smull mulHymm13_0 mulL_0 ymm1_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm1_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm1_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm1_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm1_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm1_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm1_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm1_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm1_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm1_9 ymm13_9;
smull mulHymm13_a mulL_a ymm1_a ymm13_a;
smull mulHymm13_b mulL_b ymm1_b ymm13_b;
smull mulHymm13_c mulL_c ymm1_c ymm13_c;
smull mulHymm13_d mulL_d ymm1_d ymm13_d;
smull mulHymm13_e mulL_e ymm1_e ymm13_e;
smull mulHymm13_f mulL_f ymm1_f ymm13_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x55555555938b *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm2,%ymm13,%ymm13                     #! PC = 0x55555555938f *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm2_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm2_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm2_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm2_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm2_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm2_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm2_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm2_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm2_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm2_9;
smull mulH_a mulLymm13_a ymm13_a ymm2_a;
smull mulH_b mulLymm13_b ymm13_b ymm2_b;
smull mulH_c mulLymm13_c ymm13_c ymm2_c;
smull mulH_d mulLymm13_d ymm13_d ymm2_d;
smull mulH_e mulLymm13_e ymm13_e ymm2_e;
smull mulH_f mulLymm13_f ymm13_f ymm2_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x555555559393 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x555555559397 *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpaddw %ymm6,%ymm15,%ymm4                       #! PC = 0x55555555939b *)
add ymm4_0 ymm15_0 ymm6_0;
add ymm4_1 ymm15_1 ymm6_1;
add ymm4_2 ymm15_2 ymm6_2;
add ymm4_3 ymm15_3 ymm6_3;
add ymm4_4 ymm15_4 ymm6_4;
add ymm4_5 ymm15_5 ymm6_5;
add ymm4_6 ymm15_6 ymm6_6;
add ymm4_7 ymm15_7 ymm6_7;
add ymm4_8 ymm15_8 ymm6_8;
add ymm4_9 ymm15_9 ymm6_9;
add ymm4_a ymm15_a ymm6_a;
add ymm4_b ymm15_b ymm6_b;
add ymm4_c ymm15_c ymm6_c;
add ymm4_d ymm15_d ymm6_d;
add ymm4_e ymm15_e ymm6_e;
add ymm4_f ymm15_f ymm6_f;
(* vpsubw %ymm6,%ymm15,%ymm6                       #! PC = 0x55555555939f *)
sub ymm6_0 ymm15_0 ymm6_0;
sub ymm6_1 ymm15_1 ymm6_1;
sub ymm6_2 ymm15_2 ymm6_2;
sub ymm6_3 ymm15_3 ymm6_3;
sub ymm6_4 ymm15_4 ymm6_4;
sub ymm6_5 ymm15_5 ymm6_5;
sub ymm6_6 ymm15_6 ymm6_6;
sub ymm6_7 ymm15_7 ymm6_7;
sub ymm6_8 ymm15_8 ymm6_8;
sub ymm6_9 ymm15_9 ymm6_9;
sub ymm6_a ymm15_a ymm6_a;
sub ymm6_b ymm15_b ymm6_b;
sub ymm6_c ymm15_c ymm6_c;
sub ymm6_d ymm15_d ymm6_d;
sub ymm6_e ymm15_e ymm6_e;
sub ymm6_f ymm15_f ymm6_f;
(* vpaddw %ymm7,%ymm5,%ymm15                       #! PC = 0x5555555593a3 *)
add ymm15_0 ymm5_0 ymm7_0;
add ymm15_1 ymm5_1 ymm7_1;
add ymm15_2 ymm5_2 ymm7_2;
add ymm15_3 ymm5_3 ymm7_3;
add ymm15_4 ymm5_4 ymm7_4;
add ymm15_5 ymm5_5 ymm7_5;
add ymm15_6 ymm5_6 ymm7_6;
add ymm15_7 ymm5_7 ymm7_7;
add ymm15_8 ymm5_8 ymm7_8;
add ymm15_9 ymm5_9 ymm7_9;
add ymm15_a ymm5_a ymm7_a;
add ymm15_b ymm5_b ymm7_b;
add ymm15_c ymm5_c ymm7_c;
add ymm15_d ymm5_d ymm7_d;
add ymm15_e ymm5_e ymm7_e;
add ymm15_f ymm5_f ymm7_f;
(* vpsubw %ymm7,%ymm5,%ymm7                        #! PC = 0x5555555593a7 *)
sub ymm7_0 ymm5_0 ymm7_0;
sub ymm7_1 ymm5_1 ymm7_1;
sub ymm7_2 ymm5_2 ymm7_2;
sub ymm7_3 ymm5_3 ymm7_3;
sub ymm7_4 ymm5_4 ymm7_4;
sub ymm7_5 ymm5_5 ymm7_5;
sub ymm7_6 ymm5_6 ymm7_6;
sub ymm7_7 ymm5_7 ymm7_7;
sub ymm7_8 ymm5_8 ymm7_8;
sub ymm7_9 ymm5_9 ymm7_9;
sub ymm7_a ymm5_a ymm7_a;
sub ymm7_b ymm5_b ymm7_b;
sub ymm7_c ymm5_c ymm7_c;
sub ymm7_d ymm5_d ymm7_d;
sub ymm7_e ymm5_e ymm7_e;
sub ymm7_f ymm5_f ymm7_f;
(* vpsubw %ymm10,%ymm12,%ymm10                     #! PC = 0x5555555593ab *)
sub ymm10_0 ymm12_0 ymm10_0;
sub ymm10_1 ymm12_1 ymm10_1;
sub ymm10_2 ymm12_2 ymm10_2;
sub ymm10_3 ymm12_3 ymm10_3;
sub ymm10_4 ymm12_4 ymm10_4;
sub ymm10_5 ymm12_5 ymm10_5;
sub ymm10_6 ymm12_6 ymm10_6;
sub ymm10_7 ymm12_7 ymm10_7;
sub ymm10_8 ymm12_8 ymm10_8;
sub ymm10_9 ymm12_9 ymm10_9;
sub ymm10_a ymm12_a ymm10_a;
sub ymm10_b ymm12_b ymm10_b;
sub ymm10_c ymm12_c ymm10_c;
sub ymm10_d ymm12_d ymm10_d;
sub ymm10_e ymm12_e ymm10_e;
sub ymm10_f ymm12_f ymm10_f;
(* vpsubw %ymm11,%ymm13,%ymm11                     #! PC = 0x5555555593b0 *)
sub ymm11_0 ymm13_0 ymm11_0;
sub ymm11_1 ymm13_1 ymm11_1;
sub ymm11_2 ymm13_2 ymm11_2;
sub ymm11_3 ymm13_3 ymm11_3;
sub ymm11_4 ymm13_4 ymm11_4;
sub ymm11_5 ymm13_5 ymm11_5;
sub ymm11_6 ymm13_6 ymm11_6;
sub ymm11_7 ymm13_7 ymm11_7;
sub ymm11_8 ymm13_8 ymm11_8;
sub ymm11_9 ymm13_9 ymm11_9;
sub ymm11_a ymm13_a ymm11_a;
sub ymm11_b ymm13_b ymm11_b;
sub ymm11_c ymm13_c ymm11_c;
sub ymm11_d ymm13_d ymm11_d;
sub ymm11_e ymm13_e ymm11_e;
sub ymm11_f ymm13_f ymm11_f;
(* vmovdqa 0x80(%rdx),%ymm13                       #! EA = L0x555555560780; Value = 0xfff7fff7fff7fff7; PC = 0x5555555593b5 *)
mov ymm13_0 L0x555555560780;
mov ymm13_1 L0x555555560782;
mov ymm13_2 L0x555555560784;
mov ymm13_3 L0x555555560786;
mov ymm13_4 L0x555555560788;
mov ymm13_5 L0x55555556078a;
mov ymm13_6 L0x55555556078c;
mov ymm13_7 L0x55555556078e;
mov ymm13_8 L0x555555560790;
mov ymm13_9 L0x555555560792;
mov ymm13_a L0x555555560794;
mov ymm13_b L0x555555560796;
mov ymm13_c L0x555555560798;
mov ymm13_d L0x55555556079a;
mov ymm13_e L0x55555556079c;
mov ymm13_f L0x55555556079e;
(* vmovdqa 0xa0(%rdx),%ymm14                       #! EA = L0x5555555607a0; Value = 0xf1f7f1f7f1f7f1f7; PC = 0x5555555593bd *)
mov ymm14_0 L0x5555555607a0;
mov ymm14_1 L0x5555555607a2;
mov ymm14_2 L0x5555555607a4;
mov ymm14_3 L0x5555555607a6;
mov ymm14_4 L0x5555555607a8;
mov ymm14_5 L0x5555555607aa;
mov ymm14_6 L0x5555555607ac;
mov ymm14_7 L0x5555555607ae;
mov ymm14_8 L0x5555555607b0;
mov ymm14_9 L0x5555555607b2;
mov ymm14_a L0x5555555607b4;
mov ymm14_b L0x5555555607b6;
mov ymm14_c L0x5555555607b8;
mov ymm14_d L0x5555555607ba;
mov ymm14_e L0x5555555607bc;
mov ymm14_f L0x5555555607be;
(* vpmullw %ymm13,%ymm4,%ymm12                     #! PC = 0x5555555593c5 *)
smull mulHymm4_0 mulL_0 ymm13_0 ymm4_0;
smull mulHymm4_1 mulL_1 ymm13_1 ymm4_1;
smull mulHymm4_2 mulL_2 ymm13_2 ymm4_2;
smull mulHymm4_3 mulL_3 ymm13_3 ymm4_3;
smull mulHymm4_4 mulL_4 ymm13_4 ymm4_4;
smull mulHymm4_5 mulL_5 ymm13_5 ymm4_5;
smull mulHymm4_6 mulL_6 ymm13_6 ymm4_6;
smull mulHymm4_7 mulL_7 ymm13_7 ymm4_7;
smull mulHymm4_8 mulL_8 ymm13_8 ymm4_8;
smull mulHymm4_9 mulL_9 ymm13_9 ymm4_9;
smull mulHymm4_a mulL_a ymm13_a ymm4_a;
smull mulHymm4_b mulL_b ymm13_b ymm4_b;
smull mulHymm4_c mulL_c ymm13_c ymm4_c;
smull mulHymm4_d mulL_d ymm13_d ymm4_d;
smull mulHymm4_e mulL_e ymm13_e ymm4_e;
smull mulHymm4_f mulL_f ymm13_f ymm4_f;
cast ymm12_0@sint16 mulL_0;
cast ymm12_1@sint16 mulL_1;
cast ymm12_2@sint16 mulL_2;
cast ymm12_3@sint16 mulL_3;
cast ymm12_4@sint16 mulL_4;
cast ymm12_5@sint16 mulL_5;
cast ymm12_6@sint16 mulL_6;
cast ymm12_7@sint16 mulL_7;
cast ymm12_8@sint16 mulL_8;
cast ymm12_9@sint16 mulL_9;
cast ymm12_a@sint16 mulL_a;
cast ymm12_b@sint16 mulL_b;
cast ymm12_c@sint16 mulL_c;
cast ymm12_d@sint16 mulL_d;
cast ymm12_e@sint16 mulL_e;
cast ymm12_f@sint16 mulL_f;
(* vpmulhw %ymm14,%ymm4,%ymm4                      #! PC = 0x5555555593ca *)
smull mulH_0 mulLymm4_0 ymm4_0 ymm14_0;
smull mulH_1 mulLymm4_1 ymm4_1 ymm14_1;
smull mulH_2 mulLymm4_2 ymm4_2 ymm14_2;
smull mulH_3 mulLymm4_3 ymm4_3 ymm14_3;
smull mulH_4 mulLymm4_4 ymm4_4 ymm14_4;
smull mulH_5 mulLymm4_5 ymm4_5 ymm14_5;
smull mulH_6 mulLymm4_6 ymm4_6 ymm14_6;
smull mulH_7 mulLymm4_7 ymm4_7 ymm14_7;
smull mulH_8 mulLymm4_8 ymm4_8 ymm14_8;
smull mulH_9 mulLymm4_9 ymm4_9 ymm14_9;
smull mulH_a mulLymm4_a ymm4_a ymm14_a;
smull mulH_b mulLymm4_b ymm4_b ymm14_b;
smull mulH_c mulLymm4_c ymm4_c ymm14_c;
smull mulH_d mulLymm4_d ymm4_d ymm14_d;
smull mulH_e mulLymm4_e ymm4_e ymm14_e;
smull mulH_f mulLymm4_f ymm4_f ymm14_f;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm12,%ymm12                     #! PC = 0x5555555593cf *)
smull mulH_0 red_0 ymm12_0 ymm0_0;
assert true && red_0 = mulLymm4_0;
assume red_0 = mulLymm4_0 && true;
smull mulH_1 red_1 ymm12_1 ymm0_1;
assert true && red_1 = mulLymm4_1;
assume red_1 = mulLymm4_1 && true;
smull mulH_2 red_2 ymm12_2 ymm0_2;
assert true && red_2 = mulLymm4_2;
assume red_2 = mulLymm4_2 && true;
smull mulH_3 red_3 ymm12_3 ymm0_3;
assert true && red_3 = mulLymm4_3;
assume red_3 = mulLymm4_3 && true;
smull mulH_4 red_4 ymm12_4 ymm0_4;
assert true && red_4 = mulLymm4_4;
assume red_4 = mulLymm4_4 && true;
smull mulH_5 red_5 ymm12_5 ymm0_5;
assert true && red_5 = mulLymm4_5;
assume red_5 = mulLymm4_5 && true;
smull mulH_6 red_6 ymm12_6 ymm0_6;
assert true && red_6 = mulLymm4_6;
assume red_6 = mulLymm4_6 && true;
smull mulH_7 red_7 ymm12_7 ymm0_7;
assert true && red_7 = mulLymm4_7;
assume red_7 = mulLymm4_7 && true;
smull mulH_8 red_8 ymm12_8 ymm0_8;
assert true && red_8 = mulLymm4_8;
assume red_8 = mulLymm4_8 && true;
smull mulH_9 red_9 ymm12_9 ymm0_9;
assert true && red_9 = mulLymm4_9;
assume red_9 = mulLymm4_9 && true;
smull mulH_a red_a ymm12_a ymm0_a;
assert true && red_a = mulLymm4_a;
assume red_a = mulLymm4_a && true;
smull mulH_b red_b ymm12_b ymm0_b;
assert true && red_b = mulLymm4_b;
assume red_b = mulLymm4_b && true;
smull mulH_c red_c ymm12_c ymm0_c;
assert true && red_c = mulLymm4_c;
assume red_c = mulLymm4_c && true;
smull mulH_d red_d ymm12_d ymm0_d;
assert true && red_d = mulLymm4_d;
assume red_d = mulLymm4_d && true;
smull mulH_e red_e ymm12_e ymm0_e;
assert true && red_e = mulLymm4_e;
assume red_e = mulLymm4_e && true;
smull mulH_f red_f ymm12_f ymm0_f;
assert true && red_f = mulLymm4_f;
assume red_f = mulLymm4_f && true;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpsubw %ymm12,%ymm4,%ymm4                       #! PC = 0x5555555593d3 *)
sub ymm4_0 ymm4_0 ymm12_0;
sub ymm4_1 ymm4_1 ymm12_1;
sub ymm4_2 ymm4_2 ymm12_2;
sub ymm4_3 ymm4_3 ymm12_3;
sub ymm4_4 ymm4_4 ymm12_4;
sub ymm4_5 ymm4_5 ymm12_5;
sub ymm4_6 ymm4_6 ymm12_6;
sub ymm4_7 ymm4_7 ymm12_7;
sub ymm4_8 ymm4_8 ymm12_8;
sub ymm4_9 ymm4_9 ymm12_9;
sub ymm4_a ymm4_a ymm12_a;
sub ymm4_b ymm4_b ymm12_b;
sub ymm4_c ymm4_c ymm12_c;
sub ymm4_d ymm4_d ymm12_d;
sub ymm4_e ymm4_e ymm12_e;
sub ymm4_f ymm4_f ymm12_f;
(* vpaddw %ymm8,%ymm4,%ymm12                       #! PC = 0x5555555593d8 *)
add ymm12_0 ymm4_0 ymm8_0;
add ymm12_1 ymm4_1 ymm8_1;
add ymm12_2 ymm4_2 ymm8_2;
add ymm12_3 ymm4_3 ymm8_3;
add ymm12_4 ymm4_4 ymm8_4;
add ymm12_5 ymm4_5 ymm8_5;
add ymm12_6 ymm4_6 ymm8_6;
add ymm12_7 ymm4_7 ymm8_7;
add ymm12_8 ymm4_8 ymm8_8;
add ymm12_9 ymm4_9 ymm8_9;
add ymm12_a ymm4_a ymm8_a;
add ymm12_b ymm4_b ymm8_b;
add ymm12_c ymm4_c ymm8_c;
add ymm12_d ymm4_d ymm8_d;
add ymm12_e ymm4_e ymm8_e;
add ymm12_f ymm4_f ymm8_f;
(* vpsubw %ymm8,%ymm4,%ymm8                        #! PC = 0x5555555593dd *)
sub ymm8_0 ymm4_0 ymm8_0;
sub ymm8_1 ymm4_1 ymm8_1;
sub ymm8_2 ymm4_2 ymm8_2;
sub ymm8_3 ymm4_3 ymm8_3;
sub ymm8_4 ymm4_4 ymm8_4;
sub ymm8_5 ymm4_5 ymm8_5;
sub ymm8_6 ymm4_6 ymm8_6;
sub ymm8_7 ymm4_7 ymm8_7;
sub ymm8_8 ymm4_8 ymm8_8;
sub ymm8_9 ymm4_9 ymm8_9;
sub ymm8_a ymm4_a ymm8_a;
sub ymm8_b ymm4_b ymm8_b;
sub ymm8_c ymm4_c ymm8_c;
sub ymm8_d ymm4_d ymm8_d;
sub ymm8_e ymm4_e ymm8_e;
sub ymm8_f ymm4_f ymm8_f;
(* vpaddw %ymm9,%ymm15,%ymm5                       #! PC = 0x5555555593e2 *)
add ymm5_0 ymm15_0 ymm9_0;
add ymm5_1 ymm15_1 ymm9_1;
add ymm5_2 ymm15_2 ymm9_2;
add ymm5_3 ymm15_3 ymm9_3;
add ymm5_4 ymm15_4 ymm9_4;
add ymm5_5 ymm15_5 ymm9_5;
add ymm5_6 ymm15_6 ymm9_6;
add ymm5_7 ymm15_7 ymm9_7;
add ymm5_8 ymm15_8 ymm9_8;
add ymm5_9 ymm15_9 ymm9_9;
add ymm5_a ymm15_a ymm9_a;
add ymm5_b ymm15_b ymm9_b;
add ymm5_c ymm15_c ymm9_c;
add ymm5_d ymm15_d ymm9_d;
add ymm5_e ymm15_e ymm9_e;
add ymm5_f ymm15_f ymm9_f;
(* vpsubw %ymm9,%ymm15,%ymm9                       #! PC = 0x5555555593e7 *)
sub ymm9_0 ymm15_0 ymm9_0;
sub ymm9_1 ymm15_1 ymm9_1;
sub ymm9_2 ymm15_2 ymm9_2;
sub ymm9_3 ymm15_3 ymm9_3;
sub ymm9_4 ymm15_4 ymm9_4;
sub ymm9_5 ymm15_5 ymm9_5;
sub ymm9_6 ymm15_6 ymm9_6;
sub ymm9_7 ymm15_7 ymm9_7;
sub ymm9_8 ymm15_8 ymm9_8;
sub ymm9_9 ymm15_9 ymm9_9;
sub ymm9_a ymm15_a ymm9_a;
sub ymm9_b ymm15_b ymm9_b;
sub ymm9_c ymm15_c ymm9_c;
sub ymm9_d ymm15_d ymm9_d;
sub ymm9_e ymm15_e ymm9_e;
sub ymm9_f ymm15_f ymm9_f;
(* vpaddw %ymm10,%ymm6,%ymm13                      #! PC = 0x5555555593ec *)
add ymm13_0 ymm6_0 ymm10_0;
add ymm13_1 ymm6_1 ymm10_1;
add ymm13_2 ymm6_2 ymm10_2;
add ymm13_3 ymm6_3 ymm10_3;
add ymm13_4 ymm6_4 ymm10_4;
add ymm13_5 ymm6_5 ymm10_5;
add ymm13_6 ymm6_6 ymm10_6;
add ymm13_7 ymm6_7 ymm10_7;
add ymm13_8 ymm6_8 ymm10_8;
add ymm13_9 ymm6_9 ymm10_9;
add ymm13_a ymm6_a ymm10_a;
add ymm13_b ymm6_b ymm10_b;
add ymm13_c ymm6_c ymm10_c;
add ymm13_d ymm6_d ymm10_d;
add ymm13_e ymm6_e ymm10_e;
add ymm13_f ymm6_f ymm10_f;
(* vpsubw %ymm10,%ymm6,%ymm10                      #! PC = 0x5555555593f1 *)
sub ymm10_0 ymm6_0 ymm10_0;
sub ymm10_1 ymm6_1 ymm10_1;
sub ymm10_2 ymm6_2 ymm10_2;
sub ymm10_3 ymm6_3 ymm10_3;
sub ymm10_4 ymm6_4 ymm10_4;
sub ymm10_5 ymm6_5 ymm10_5;
sub ymm10_6 ymm6_6 ymm10_6;
sub ymm10_7 ymm6_7 ymm10_7;
sub ymm10_8 ymm6_8 ymm10_8;
sub ymm10_9 ymm6_9 ymm10_9;
sub ymm10_a ymm6_a ymm10_a;
sub ymm10_b ymm6_b ymm10_b;
sub ymm10_c ymm6_c ymm10_c;
sub ymm10_d ymm6_d ymm10_d;
sub ymm10_e ymm6_e ymm10_e;
sub ymm10_f ymm6_f ymm10_f;
(* vpaddw %ymm11,%ymm7,%ymm14                      #! PC = 0x5555555593f6 *)
add ymm14_0 ymm7_0 ymm11_0;
add ymm14_1 ymm7_1 ymm11_1;
add ymm14_2 ymm7_2 ymm11_2;
add ymm14_3 ymm7_3 ymm11_3;
add ymm14_4 ymm7_4 ymm11_4;
add ymm14_5 ymm7_5 ymm11_5;
add ymm14_6 ymm7_6 ymm11_6;
add ymm14_7 ymm7_7 ymm11_7;
add ymm14_8 ymm7_8 ymm11_8;
add ymm14_9 ymm7_9 ymm11_9;
add ymm14_a ymm7_a ymm11_a;
add ymm14_b ymm7_b ymm11_b;
add ymm14_c ymm7_c ymm11_c;
add ymm14_d ymm7_d ymm11_d;
add ymm14_e ymm7_e ymm11_e;
add ymm14_f ymm7_f ymm11_f;
(* vpsubw %ymm11,%ymm7,%ymm11                      #! PC = 0x5555555593fb *)
sub ymm11_0 ymm7_0 ymm11_0;
sub ymm11_1 ymm7_1 ymm11_1;
sub ymm11_2 ymm7_2 ymm11_2;
sub ymm11_3 ymm7_3 ymm11_3;
sub ymm11_4 ymm7_4 ymm11_4;
sub ymm11_5 ymm7_5 ymm11_5;
sub ymm11_6 ymm7_6 ymm11_6;
sub ymm11_7 ymm7_7 ymm11_7;
sub ymm11_8 ymm7_8 ymm11_8;
sub ymm11_9 ymm7_9 ymm11_9;
sub ymm11_a ymm7_a ymm11_a;
sub ymm11_b ymm7_b ymm11_b;
sub ymm11_c ymm7_c ymm11_c;
sub ymm11_d ymm7_d ymm11_d;
sub ymm11_e ymm7_e ymm11_e;
sub ymm11_f ymm7_f ymm11_f;
(* vpermq $0x1b,0x240(%rdx),%ymm7                  #! EA = L0x555555560940; Value = 0xf8c57fe2fdeffff7; PC = 0x555555559400 *)
mov ymm7_0 L0x555555560958;
mov ymm7_1 L0x55555556095a;
mov ymm7_2 L0x55555556095c;
mov ymm7_3 L0x55555556095e;
mov ymm7_4 L0x555555560950;
mov ymm7_5 L0x555555560952;
mov ymm7_6 L0x555555560954;
mov ymm7_7 L0x555555560956;
mov ymm7_8 L0x555555560948;
mov ymm7_9 L0x55555556094a;
mov ymm7_a L0x55555556094c;
mov ymm7_b L0x55555556094e;
mov ymm7_c L0x555555560940;
mov ymm7_d L0x555555560942;
mov ymm7_e L0x555555560944;
mov ymm7_f L0x555555560946;
(* vpermq $0x1b,0x260(%rdx),%ymm15                 #! EA = L0x555555560960; Value = 0x0ec5fbe2ffeff1f7; PC = 0x55555555940a *)
mov ymm15_0 L0x555555560978;
mov ymm15_1 L0x55555556097a;
mov ymm15_2 L0x55555556097c;
mov ymm15_3 L0x55555556097e;
mov ymm15_4 L0x555555560970;
mov ymm15_5 L0x555555560972;
mov ymm15_6 L0x555555560974;
mov ymm15_7 L0x555555560976;
mov ymm15_8 L0x555555560968;
mov ymm15_9 L0x55555556096a;
mov ymm15_a L0x55555556096c;
mov ymm15_b L0x55555556096e;
mov ymm15_c L0x555555560960;
mov ymm15_d L0x555555560962;
mov ymm15_e L0x555555560964;
mov ymm15_f L0x555555560966;
(* vpmullw %ymm7,%ymm12,%ymm7                      #! PC = 0x555555559414 *)
smull mulHymm12_0 mulL_0 ymm7_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm7_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm7_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm7_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm7_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm7_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm7_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm7_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm7_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm7_9 ymm12_9;
smull mulHymm12_a mulL_a ymm7_a ymm12_a;
smull mulHymm12_b mulL_b ymm7_b ymm12_b;
smull mulHymm12_c mulL_c ymm7_c ymm12_c;
smull mulHymm12_d mulL_d ymm7_d ymm12_d;
smull mulHymm12_e mulL_e ymm7_e ymm12_e;
smull mulHymm12_f mulL_f ymm7_f ymm12_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm12,%ymm12                    #! PC = 0x555555559418 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm15_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm15_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm15_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm15_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm15_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm15_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm15_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm15_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm15_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm15_9;
smull mulH_a mulLymm12_a ymm12_a ymm15_a;
smull mulH_b mulLymm12_b ymm12_b ymm15_b;
smull mulH_c mulLymm12_c ymm12_c ymm15_c;
smull mulH_d mulLymm12_d ymm12_d ymm15_d;
smull mulH_e mulLymm12_e ymm12_e ymm15_e;
smull mulH_f mulLymm12_f ymm12_f ymm15_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555941d *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm12,%ymm12                      #! PC = 0x555555559421 *)
sub ymm12_0 ymm12_0 ymm7_0;
sub ymm12_1 ymm12_1 ymm7_1;
sub ymm12_2 ymm12_2 ymm7_2;
sub ymm12_3 ymm12_3 ymm7_3;
sub ymm12_4 ymm12_4 ymm7_4;
sub ymm12_5 ymm12_5 ymm7_5;
sub ymm12_6 ymm12_6 ymm7_6;
sub ymm12_7 ymm12_7 ymm7_7;
sub ymm12_8 ymm12_8 ymm7_8;
sub ymm12_9 ymm12_9 ymm7_9;
sub ymm12_a ymm12_a ymm7_a;
sub ymm12_b ymm12_b ymm7_b;
sub ymm12_c ymm12_c ymm7_c;
sub ymm12_d ymm12_d ymm7_d;
sub ymm12_e ymm12_e ymm7_e;
sub ymm12_f ymm12_f ymm7_f;
(* vpermq $0x1b,0x280(%rdx),%ymm7                  #! EA = L0x555555560980; Value = 0xe767de9266b03f97; PC = 0x555555559425 *)
mov ymm7_0 L0x555555560998;
mov ymm7_1 L0x55555556099a;
mov ymm7_2 L0x55555556099c;
mov ymm7_3 L0x55555556099e;
mov ymm7_4 L0x555555560990;
mov ymm7_5 L0x555555560992;
mov ymm7_6 L0x555555560994;
mov ymm7_7 L0x555555560996;
mov ymm7_8 L0x555555560988;
mov ymm7_9 L0x55555556098a;
mov ymm7_a L0x55555556098c;
mov ymm7_b L0x55555556098e;
mov ymm7_c L0x555555560980;
mov ymm7_d L0x555555560982;
mov ymm7_e L0x555555560984;
mov ymm7_f L0x555555560986;
(* vpermq $0x1b,0x2a0(%rdx),%ymm15                 #! EA = L0x5555555609a0; Value = 0xf967fa9206b0f197; PC = 0x55555555942f *)
mov ymm15_0 L0x5555555609b8;
mov ymm15_1 L0x5555555609ba;
mov ymm15_2 L0x5555555609bc;
mov ymm15_3 L0x5555555609be;
mov ymm15_4 L0x5555555609b0;
mov ymm15_5 L0x5555555609b2;
mov ymm15_6 L0x5555555609b4;
mov ymm15_7 L0x5555555609b6;
mov ymm15_8 L0x5555555609a8;
mov ymm15_9 L0x5555555609aa;
mov ymm15_a L0x5555555609ac;
mov ymm15_b L0x5555555609ae;
mov ymm15_c L0x5555555609a0;
mov ymm15_d L0x5555555609a2;
mov ymm15_e L0x5555555609a4;
mov ymm15_f L0x5555555609a6;
(* vpmullw %ymm7,%ymm5,%ymm7                       #! PC = 0x555555559439 *)
smull mulHymm5_0 mulL_0 ymm7_0 ymm5_0;
smull mulHymm5_1 mulL_1 ymm7_1 ymm5_1;
smull mulHymm5_2 mulL_2 ymm7_2 ymm5_2;
smull mulHymm5_3 mulL_3 ymm7_3 ymm5_3;
smull mulHymm5_4 mulL_4 ymm7_4 ymm5_4;
smull mulHymm5_5 mulL_5 ymm7_5 ymm5_5;
smull mulHymm5_6 mulL_6 ymm7_6 ymm5_6;
smull mulHymm5_7 mulL_7 ymm7_7 ymm5_7;
smull mulHymm5_8 mulL_8 ymm7_8 ymm5_8;
smull mulHymm5_9 mulL_9 ymm7_9 ymm5_9;
smull mulHymm5_a mulL_a ymm7_a ymm5_a;
smull mulHymm5_b mulL_b ymm7_b ymm5_b;
smull mulHymm5_c mulL_c ymm7_c ymm5_c;
smull mulHymm5_d mulL_d ymm7_d ymm5_d;
smull mulHymm5_e mulL_e ymm7_e ymm5_e;
smull mulHymm5_f mulL_f ymm7_f ymm5_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm5,%ymm5                      #! PC = 0x55555555943d *)
smull mulH_0 mulLymm5_0 ymm5_0 ymm15_0;
smull mulH_1 mulLymm5_1 ymm5_1 ymm15_1;
smull mulH_2 mulLymm5_2 ymm5_2 ymm15_2;
smull mulH_3 mulLymm5_3 ymm5_3 ymm15_3;
smull mulH_4 mulLymm5_4 ymm5_4 ymm15_4;
smull mulH_5 mulLymm5_5 ymm5_5 ymm15_5;
smull mulH_6 mulLymm5_6 ymm5_6 ymm15_6;
smull mulH_7 mulLymm5_7 ymm5_7 ymm15_7;
smull mulH_8 mulLymm5_8 ymm5_8 ymm15_8;
smull mulH_9 mulLymm5_9 ymm5_9 ymm15_9;
smull mulH_a mulLymm5_a ymm5_a ymm15_a;
smull mulH_b mulLymm5_b ymm5_b ymm15_b;
smull mulH_c mulLymm5_c ymm5_c ymm15_c;
smull mulH_d mulLymm5_d ymm5_d ymm15_d;
smull mulH_e mulLymm5_e ymm5_e ymm15_e;
smull mulH_f mulLymm5_f ymm5_f ymm15_f;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555559442 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm5_0;
assume red_0 = mulLymm5_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm5_1;
assume red_1 = mulLymm5_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm5_2;
assume red_2 = mulLymm5_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm5_3;
assume red_3 = mulLymm5_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm5_4;
assume red_4 = mulLymm5_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm5_5;
assume red_5 = mulLymm5_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm5_6;
assume red_6 = mulLymm5_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm5_7;
assume red_7 = mulLymm5_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm5_8;
assume red_8 = mulLymm5_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm5_9;
assume red_9 = mulLymm5_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm5_a;
assume red_a = mulLymm5_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm5_b;
assume red_b = mulLymm5_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm5_c;
assume red_c = mulLymm5_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm5_d;
assume red_d = mulLymm5_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm5_e;
assume red_e = mulLymm5_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm5_f;
assume red_f = mulLymm5_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm5,%ymm5                        #! PC = 0x555555559446 *)
sub ymm5_0 ymm5_0 ymm7_0;
sub ymm5_1 ymm5_1 ymm7_1;
sub ymm5_2 ymm5_2 ymm7_2;
sub ymm5_3 ymm5_3 ymm7_3;
sub ymm5_4 ymm5_4 ymm7_4;
sub ymm5_5 ymm5_5 ymm7_5;
sub ymm5_6 ymm5_6 ymm7_6;
sub ymm5_7 ymm5_7 ymm7_7;
sub ymm5_8 ymm5_8 ymm7_8;
sub ymm5_9 ymm5_9 ymm7_9;
sub ymm5_a ymm5_a ymm7_a;
sub ymm5_b ymm5_b ymm7_b;
sub ymm5_c ymm5_c ymm7_c;
sub ymm5_d ymm5_d ymm7_d;
sub ymm5_e ymm5_e ymm7_e;
sub ymm5_f ymm5_f ymm7_f;
(* vpermq $0x1b,0x2c0(%rdx),%ymm7                  #! EA = L0x5555555609c0; Value = 0x52b0267fa9e90b00; PC = 0x55555555944a *)
mov ymm7_0 L0x5555555609d8;
mov ymm7_1 L0x5555555609da;
mov ymm7_2 L0x5555555609dc;
mov ymm7_3 L0x5555555609de;
mov ymm7_4 L0x5555555609d0;
mov ymm7_5 L0x5555555609d2;
mov ymm7_6 L0x5555555609d4;
mov ymm7_7 L0x5555555609d6;
mov ymm7_8 L0x5555555609c8;
mov ymm7_9 L0x5555555609ca;
mov ymm7_a L0x5555555609cc;
mov ymm7_b L0x5555555609ce;
mov ymm7_c L0x5555555609c0;
mov ymm7_d L0x5555555609c2;
mov ymm7_e L0x5555555609c4;
mov ymm7_f L0x5555555609c6;
(* vpermq $0x1b,0x2e0(%rdx),%ymm15                 #! EA = L0x5555555609e0; Value = 0xf2b0087ff7e90b00; PC = 0x555555559454 *)
mov ymm15_0 L0x5555555609f8;
mov ymm15_1 L0x5555555609fa;
mov ymm15_2 L0x5555555609fc;
mov ymm15_3 L0x5555555609fe;
mov ymm15_4 L0x5555555609f0;
mov ymm15_5 L0x5555555609f2;
mov ymm15_6 L0x5555555609f4;
mov ymm15_7 L0x5555555609f6;
mov ymm15_8 L0x5555555609e8;
mov ymm15_9 L0x5555555609ea;
mov ymm15_a L0x5555555609ec;
mov ymm15_b L0x5555555609ee;
mov ymm15_c L0x5555555609e0;
mov ymm15_d L0x5555555609e2;
mov ymm15_e L0x5555555609e4;
mov ymm15_f L0x5555555609e6;
(* vpmullw %ymm7,%ymm13,%ymm7                      #! PC = 0x55555555945e *)
smull mulHymm13_0 mulL_0 ymm7_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm7_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm7_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm7_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm7_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm7_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm7_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm7_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm7_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm7_9 ymm13_9;
smull mulHymm13_a mulL_a ymm7_a ymm13_a;
smull mulHymm13_b mulL_b ymm7_b ymm13_b;
smull mulHymm13_c mulL_c ymm7_c ymm13_c;
smull mulHymm13_d mulL_d ymm7_d ymm13_d;
smull mulHymm13_e mulL_e ymm7_e ymm13_e;
smull mulHymm13_f mulL_f ymm7_f ymm13_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm13,%ymm13                    #! PC = 0x555555559462 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm15_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm15_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm15_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm15_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm15_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm15_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm15_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm15_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm15_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm15_9;
smull mulH_a mulLymm13_a ymm13_a ymm15_a;
smull mulH_b mulLymm13_b ymm13_b ymm15_b;
smull mulH_c mulLymm13_c ymm13_c ymm15_c;
smull mulH_d mulLymm13_d ymm13_d ymm15_d;
smull mulH_e mulLymm13_e ymm13_e ymm15_e;
smull mulH_f mulLymm13_f ymm13_f ymm15_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555559467 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm13,%ymm13                      #! PC = 0x55555555946b *)
sub ymm13_0 ymm13_0 ymm7_0;
sub ymm13_1 ymm13_1 ymm7_1;
sub ymm13_2 ymm13_2 ymm7_2;
sub ymm13_3 ymm13_3 ymm7_3;
sub ymm13_4 ymm13_4 ymm7_4;
sub ymm13_5 ymm13_5 ymm7_5;
sub ymm13_6 ymm13_6 ymm7_6;
sub ymm13_7 ymm13_7 ymm7_7;
sub ymm13_8 ymm13_8 ymm7_8;
sub ymm13_9 ymm13_9 ymm7_9;
sub ymm13_a ymm13_a ymm7_a;
sub ymm13_b ymm13_b ymm7_b;
sub ymm13_c ymm13_c ymm7_c;
sub ymm13_d ymm13_d ymm7_d;
sub ymm13_e ymm13_e ymm7_e;
sub ymm13_f ymm13_f ymm7_f;
(* vpermq $0x1b,0x300(%rdx),%ymm7                  #! EA = L0x555555560a00; Value = 0xb4f11790a16a06bc; PC = 0x55555555946f *)
mov ymm7_0 L0x555555560a18;
mov ymm7_1 L0x555555560a1a;
mov ymm7_2 L0x555555560a1c;
mov ymm7_3 L0x555555560a1e;
mov ymm7_4 L0x555555560a10;
mov ymm7_5 L0x555555560a12;
mov ymm7_6 L0x555555560a14;
mov ymm7_7 L0x555555560a16;
mov ymm7_8 L0x555555560a08;
mov ymm7_9 L0x555555560a0a;
mov ymm7_a L0x555555560a0c;
mov ymm7_b L0x555555560a0e;
mov ymm7_c L0x555555560a00;
mov ymm7_d L0x555555560a02;
mov ymm7_e L0x555555560a04;
mov ymm7_f L0x555555560a06;
(* vpermq $0x1b,0x320(%rdx),%ymm15                 #! EA = L0x555555560a20; Value = 0xf2f1f7900d6a0ebc; PC = 0x555555559479 *)
mov ymm15_0 L0x555555560a38;
mov ymm15_1 L0x555555560a3a;
mov ymm15_2 L0x555555560a3c;
mov ymm15_3 L0x555555560a3e;
mov ymm15_4 L0x555555560a30;
mov ymm15_5 L0x555555560a32;
mov ymm15_6 L0x555555560a34;
mov ymm15_7 L0x555555560a36;
mov ymm15_8 L0x555555560a28;
mov ymm15_9 L0x555555560a2a;
mov ymm15_a L0x555555560a2c;
mov ymm15_b L0x555555560a2e;
mov ymm15_c L0x555555560a20;
mov ymm15_d L0x555555560a22;
mov ymm15_e L0x555555560a24;
mov ymm15_f L0x555555560a26;
(* vpmullw %ymm7,%ymm14,%ymm7                      #! PC = 0x555555559483 *)
smull mulHymm14_0 mulL_0 ymm7_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm7_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm7_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm7_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm7_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm7_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm7_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm7_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm7_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm7_9 ymm14_9;
smull mulHymm14_a mulL_a ymm7_a ymm14_a;
smull mulHymm14_b mulL_b ymm7_b ymm14_b;
smull mulHymm14_c mulL_c ymm7_c ymm14_c;
smull mulHymm14_d mulL_d ymm7_d ymm14_d;
smull mulHymm14_e mulL_e ymm7_e ymm14_e;
smull mulHymm14_f mulL_f ymm7_f ymm14_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm14,%ymm14                    #! PC = 0x555555559487 *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm15_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm15_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm15_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm15_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm15_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm15_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm15_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm15_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm15_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm15_9;
smull mulH_a mulLymm14_a ymm14_a ymm15_a;
smull mulH_b mulLymm14_b ymm14_b ymm15_b;
smull mulH_c mulLymm14_c ymm14_c ymm15_c;
smull mulH_d mulLymm14_d ymm14_d ymm15_d;
smull mulH_e mulLymm14_e ymm14_e ymm15_e;
smull mulH_f mulLymm14_f ymm14_f ymm15_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x55555555948c *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm14,%ymm14                      #! PC = 0x555555559490 *)
sub ymm14_0 ymm14_0 ymm7_0;
sub ymm14_1 ymm14_1 ymm7_1;
sub ymm14_2 ymm14_2 ymm7_2;
sub ymm14_3 ymm14_3 ymm7_3;
sub ymm14_4 ymm14_4 ymm7_4;
sub ymm14_5 ymm14_5 ymm7_5;
sub ymm14_6 ymm14_6 ymm7_6;
sub ymm14_7 ymm14_7 ymm7_7;
sub ymm14_8 ymm14_8 ymm7_8;
sub ymm14_9 ymm14_9 ymm7_9;
sub ymm14_a ymm14_a ymm7_a;
sub ymm14_b ymm14_b ymm7_b;
sub ymm14_c ymm14_c ymm7_c;
sub ymm14_d ymm14_d ymm7_d;
sub ymm14_e ymm14_e ymm7_e;
sub ymm14_f ymm14_f ymm7_f;
(* vpermq $0x1b,0x340(%rdx),%ymm7                  #! EA = L0x555555560a40; Value = 0x688e60a7f94dd279; PC = 0x555555559494 *)
mov ymm7_0 L0x555555560a58;
mov ymm7_1 L0x555555560a5a;
mov ymm7_2 L0x555555560a5c;
mov ymm7_3 L0x555555560a5e;
mov ymm7_4 L0x555555560a50;
mov ymm7_5 L0x555555560a52;
mov ymm7_6 L0x555555560a54;
mov ymm7_7 L0x555555560a56;
mov ymm7_8 L0x555555560a48;
mov ymm7_9 L0x555555560a4a;
mov ymm7_a L0x555555560a4c;
mov ymm7_b L0x555555560a4e;
mov ymm7_c L0x555555560a40;
mov ymm7_d L0x555555560a42;
mov ymm7_e L0x555555560a44;
mov ymm7_f L0x555555560a46;
(* vpermq $0x1b,0x360(%rdx),%ymm15                 #! EA = L0x555555560a60; Value = 0x0c8ef2a7ff4d0079; PC = 0x55555555949e *)
mov ymm15_0 L0x555555560a78;
mov ymm15_1 L0x555555560a7a;
mov ymm15_2 L0x555555560a7c;
mov ymm15_3 L0x555555560a7e;
mov ymm15_4 L0x555555560a70;
mov ymm15_5 L0x555555560a72;
mov ymm15_6 L0x555555560a74;
mov ymm15_7 L0x555555560a76;
mov ymm15_8 L0x555555560a68;
mov ymm15_9 L0x555555560a6a;
mov ymm15_a L0x555555560a6c;
mov ymm15_b L0x555555560a6e;
mov ymm15_c L0x555555560a60;
mov ymm15_d L0x555555560a62;
mov ymm15_e L0x555555560a64;
mov ymm15_f L0x555555560a66;
(* vpmullw %ymm7,%ymm8,%ymm7                       #! PC = 0x5555555594a8 *)
smull mulHymm8_0 mulL_0 ymm7_0 ymm8_0;
smull mulHymm8_1 mulL_1 ymm7_1 ymm8_1;
smull mulHymm8_2 mulL_2 ymm7_2 ymm8_2;
smull mulHymm8_3 mulL_3 ymm7_3 ymm8_3;
smull mulHymm8_4 mulL_4 ymm7_4 ymm8_4;
smull mulHymm8_5 mulL_5 ymm7_5 ymm8_5;
smull mulHymm8_6 mulL_6 ymm7_6 ymm8_6;
smull mulHymm8_7 mulL_7 ymm7_7 ymm8_7;
smull mulHymm8_8 mulL_8 ymm7_8 ymm8_8;
smull mulHymm8_9 mulL_9 ymm7_9 ymm8_9;
smull mulHymm8_a mulL_a ymm7_a ymm8_a;
smull mulHymm8_b mulL_b ymm7_b ymm8_b;
smull mulHymm8_c mulL_c ymm7_c ymm8_c;
smull mulHymm8_d mulL_d ymm7_d ymm8_d;
smull mulHymm8_e mulL_e ymm7_e ymm8_e;
smull mulHymm8_f mulL_f ymm7_f ymm8_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm8,%ymm8                      #! PC = 0x5555555594ac *)
smull mulH_0 mulLymm8_0 ymm8_0 ymm15_0;
smull mulH_1 mulLymm8_1 ymm8_1 ymm15_1;
smull mulH_2 mulLymm8_2 ymm8_2 ymm15_2;
smull mulH_3 mulLymm8_3 ymm8_3 ymm15_3;
smull mulH_4 mulLymm8_4 ymm8_4 ymm15_4;
smull mulH_5 mulLymm8_5 ymm8_5 ymm15_5;
smull mulH_6 mulLymm8_6 ymm8_6 ymm15_6;
smull mulH_7 mulLymm8_7 ymm8_7 ymm15_7;
smull mulH_8 mulLymm8_8 ymm8_8 ymm15_8;
smull mulH_9 mulLymm8_9 ymm8_9 ymm15_9;
smull mulH_a mulLymm8_a ymm8_a ymm15_a;
smull mulH_b mulLymm8_b ymm8_b ymm15_b;
smull mulH_c mulLymm8_c ymm8_c ymm15_c;
smull mulH_d mulLymm8_d ymm8_d ymm15_d;
smull mulH_e mulLymm8_e ymm8_e ymm15_e;
smull mulH_f mulLymm8_f ymm8_f ymm15_f;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x5555555594b1 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm8_0;
assume red_0 = mulLymm8_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm8_1;
assume red_1 = mulLymm8_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm8_2;
assume red_2 = mulLymm8_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm8_3;
assume red_3 = mulLymm8_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm8_4;
assume red_4 = mulLymm8_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm8_5;
assume red_5 = mulLymm8_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm8_6;
assume red_6 = mulLymm8_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm8_7;
assume red_7 = mulLymm8_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm8_8;
assume red_8 = mulLymm8_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm8_9;
assume red_9 = mulLymm8_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm8_a;
assume red_a = mulLymm8_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm8_b;
assume red_b = mulLymm8_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm8_c;
assume red_c = mulLymm8_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm8_d;
assume red_d = mulLymm8_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm8_e;
assume red_e = mulLymm8_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm8_f;
assume red_f = mulLymm8_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm8,%ymm8                        #! PC = 0x5555555594b5 *)
sub ymm8_0 ymm8_0 ymm7_0;
sub ymm8_1 ymm8_1 ymm7_1;
sub ymm8_2 ymm8_2 ymm7_2;
sub ymm8_3 ymm8_3 ymm7_3;
sub ymm8_4 ymm8_4 ymm7_4;
sub ymm8_5 ymm8_5 ymm7_5;
sub ymm8_6 ymm8_6 ymm7_6;
sub ymm8_7 ymm8_7 ymm7_7;
sub ymm8_8 ymm8_8 ymm7_8;
sub ymm8_9 ymm8_9 ymm7_9;
sub ymm8_a ymm8_a ymm7_a;
sub ymm8_b ymm8_b ymm7_b;
sub ymm8_c ymm8_c ymm7_c;
sub ymm8_d ymm8_d ymm7_d;
sub ymm8_e ymm8_e ymm7_e;
sub ymm8_f ymm8_f ymm7_f;
(* vpermq $0x1b,0x380(%rdx),%ymm7                  #! EA = L0x555555560a80; Value = 0xc0c6a003edf0524a; PC = 0x5555555594b9 *)
mov ymm7_0 L0x555555560a98;
mov ymm7_1 L0x555555560a9a;
mov ymm7_2 L0x555555560a9c;
mov ymm7_3 L0x555555560a9e;
mov ymm7_4 L0x555555560a90;
mov ymm7_5 L0x555555560a92;
mov ymm7_6 L0x555555560a94;
mov ymm7_7 L0x555555560a96;
mov ymm7_8 L0x555555560a88;
mov ymm7_9 L0x555555560a8a;
mov ymm7_a L0x555555560a8c;
mov ymm7_b L0x555555560a8e;
mov ymm7_c L0x555555560a80;
mov ymm7_d L0x555555560a82;
mov ymm7_e L0x555555560a84;
mov ymm7_f L0x555555560a86;
(* vpermq $0x1b,0x3a0(%rdx),%ymm15                 #! EA = L0x555555560aa0; Value = 0xf4c6fa030df0fe4a; PC = 0x5555555594c3 *)
mov ymm15_0 L0x555555560ab8;
mov ymm15_1 L0x555555560aba;
mov ymm15_2 L0x555555560abc;
mov ymm15_3 L0x555555560abe;
mov ymm15_4 L0x555555560ab0;
mov ymm15_5 L0x555555560ab2;
mov ymm15_6 L0x555555560ab4;
mov ymm15_7 L0x555555560ab6;
mov ymm15_8 L0x555555560aa8;
mov ymm15_9 L0x555555560aaa;
mov ymm15_a L0x555555560aac;
mov ymm15_b L0x555555560aae;
mov ymm15_c L0x555555560aa0;
mov ymm15_d L0x555555560aa2;
mov ymm15_e L0x555555560aa4;
mov ymm15_f L0x555555560aa6;
(* vpmullw %ymm7,%ymm9,%ymm7                       #! PC = 0x5555555594cd *)
smull mulHymm9_0 mulL_0 ymm7_0 ymm9_0;
smull mulHymm9_1 mulL_1 ymm7_1 ymm9_1;
smull mulHymm9_2 mulL_2 ymm7_2 ymm9_2;
smull mulHymm9_3 mulL_3 ymm7_3 ymm9_3;
smull mulHymm9_4 mulL_4 ymm7_4 ymm9_4;
smull mulHymm9_5 mulL_5 ymm7_5 ymm9_5;
smull mulHymm9_6 mulL_6 ymm7_6 ymm9_6;
smull mulHymm9_7 mulL_7 ymm7_7 ymm9_7;
smull mulHymm9_8 mulL_8 ymm7_8 ymm9_8;
smull mulHymm9_9 mulL_9 ymm7_9 ymm9_9;
smull mulHymm9_a mulL_a ymm7_a ymm9_a;
smull mulHymm9_b mulL_b ymm7_b ymm9_b;
smull mulHymm9_c mulL_c ymm7_c ymm9_c;
smull mulHymm9_d mulL_d ymm7_d ymm9_d;
smull mulHymm9_e mulL_e ymm7_e ymm9_e;
smull mulHymm9_f mulL_f ymm7_f ymm9_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm9,%ymm9                      #! PC = 0x5555555594d1 *)
smull mulH_0 mulLymm9_0 ymm9_0 ymm15_0;
smull mulH_1 mulLymm9_1 ymm9_1 ymm15_1;
smull mulH_2 mulLymm9_2 ymm9_2 ymm15_2;
smull mulH_3 mulLymm9_3 ymm9_3 ymm15_3;
smull mulH_4 mulLymm9_4 ymm9_4 ymm15_4;
smull mulH_5 mulLymm9_5 ymm9_5 ymm15_5;
smull mulH_6 mulLymm9_6 ymm9_6 ymm15_6;
smull mulH_7 mulLymm9_7 ymm9_7 ymm15_7;
smull mulH_8 mulLymm9_8 ymm9_8 ymm15_8;
smull mulH_9 mulLymm9_9 ymm9_9 ymm15_9;
smull mulH_a mulLymm9_a ymm9_a ymm15_a;
smull mulH_b mulLymm9_b ymm9_b ymm15_b;
smull mulH_c mulLymm9_c ymm9_c ymm15_c;
smull mulH_d mulLymm9_d ymm9_d ymm15_d;
smull mulH_e mulLymm9_e ymm9_e ymm15_e;
smull mulH_f mulLymm9_f ymm9_f ymm15_f;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x5555555594d6 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm9_0;
assume red_0 = mulLymm9_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm9_1;
assume red_1 = mulLymm9_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm9_2;
assume red_2 = mulLymm9_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm9_3;
assume red_3 = mulLymm9_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm9_4;
assume red_4 = mulLymm9_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm9_5;
assume red_5 = mulLymm9_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm9_6;
assume red_6 = mulLymm9_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm9_7;
assume red_7 = mulLymm9_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm9_8;
assume red_8 = mulLymm9_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm9_9;
assume red_9 = mulLymm9_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm9_a;
assume red_a = mulLymm9_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm9_b;
assume red_b = mulLymm9_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm9_c;
assume red_c = mulLymm9_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm9_d;
assume red_d = mulLymm9_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm9_e;
assume red_e = mulLymm9_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm9_f;
assume red_f = mulLymm9_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm9,%ymm9                        #! PC = 0x5555555594da *)
sub ymm9_0 ymm9_0 ymm7_0;
sub ymm9_1 ymm9_1 ymm7_1;
sub ymm9_2 ymm9_2 ymm7_2;
sub ymm9_3 ymm9_3 ymm7_3;
sub ymm9_4 ymm9_4 ymm7_4;
sub ymm9_5 ymm9_5 ymm7_5;
sub ymm9_6 ymm9_6 ymm7_6;
sub ymm9_7 ymm9_7 ymm7_7;
sub ymm9_8 ymm9_8 ymm7_8;
sub ymm9_9 ymm9_9 ymm7_9;
sub ymm9_a ymm9_a ymm7_a;
sub ymm9_b ymm9_b ymm7_b;
sub ymm9_c ymm9_c ymm7_c;
sub ymm9_d ymm9_d ymm7_d;
sub ymm9_e ymm9_e ymm7_e;
sub ymm9_f ymm9_f ymm7_f;
(* vpermq $0x1b,0x3c0(%rdx),%ymm7                  #! EA = L0x555555560ac0; Value = 0x397e6827a2b6b00b; PC = 0x5555555594de *)
mov ymm7_0 L0x555555560ad8;
mov ymm7_1 L0x555555560ada;
mov ymm7_2 L0x555555560adc;
mov ymm7_3 L0x555555560ade;
mov ymm7_4 L0x555555560ad0;
mov ymm7_5 L0x555555560ad2;
mov ymm7_6 L0x555555560ad4;
mov ymm7_7 L0x555555560ad6;
mov ymm7_8 L0x555555560ac8;
mov ymm7_9 L0x555555560aca;
mov ymm7_a L0x555555560acc;
mov ymm7_b L0x555555560ace;
mov ymm7_c L0x555555560ac0;
mov ymm7_d L0x555555560ac2;
mov ymm7_e L0x555555560ac4;
mov ymm7_f L0x555555560ac6;
(* vpermq $0x1b,0x3e0(%rdx),%ymm15                 #! EA = L0x555555560ae0; Value = 0xfd7efa27f6b6fa0b; PC = 0x5555555594e8 *)
mov ymm15_0 L0x555555560af8;
mov ymm15_1 L0x555555560afa;
mov ymm15_2 L0x555555560afc;
mov ymm15_3 L0x555555560afe;
mov ymm15_4 L0x555555560af0;
mov ymm15_5 L0x555555560af2;
mov ymm15_6 L0x555555560af4;
mov ymm15_7 L0x555555560af6;
mov ymm15_8 L0x555555560ae8;
mov ymm15_9 L0x555555560aea;
mov ymm15_a L0x555555560aec;
mov ymm15_b L0x555555560aee;
mov ymm15_c L0x555555560ae0;
mov ymm15_d L0x555555560ae2;
mov ymm15_e L0x555555560ae4;
mov ymm15_f L0x555555560ae6;
(* vpmullw %ymm7,%ymm10,%ymm7                      #! PC = 0x5555555594f2 *)
smull mulHymm10_0 mulL_0 ymm7_0 ymm10_0;
smull mulHymm10_1 mulL_1 ymm7_1 ymm10_1;
smull mulHymm10_2 mulL_2 ymm7_2 ymm10_2;
smull mulHymm10_3 mulL_3 ymm7_3 ymm10_3;
smull mulHymm10_4 mulL_4 ymm7_4 ymm10_4;
smull mulHymm10_5 mulL_5 ymm7_5 ymm10_5;
smull mulHymm10_6 mulL_6 ymm7_6 ymm10_6;
smull mulHymm10_7 mulL_7 ymm7_7 ymm10_7;
smull mulHymm10_8 mulL_8 ymm7_8 ymm10_8;
smull mulHymm10_9 mulL_9 ymm7_9 ymm10_9;
smull mulHymm10_a mulL_a ymm7_a ymm10_a;
smull mulHymm10_b mulL_b ymm7_b ymm10_b;
smull mulHymm10_c mulL_c ymm7_c ymm10_c;
smull mulHymm10_d mulL_d ymm7_d ymm10_d;
smull mulHymm10_e mulL_e ymm7_e ymm10_e;
smull mulHymm10_f mulL_f ymm7_f ymm10_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm10,%ymm10                    #! PC = 0x5555555594f6 *)
smull mulH_0 mulLymm10_0 ymm10_0 ymm15_0;
smull mulH_1 mulLymm10_1 ymm10_1 ymm15_1;
smull mulH_2 mulLymm10_2 ymm10_2 ymm15_2;
smull mulH_3 mulLymm10_3 ymm10_3 ymm15_3;
smull mulH_4 mulLymm10_4 ymm10_4 ymm15_4;
smull mulH_5 mulLymm10_5 ymm10_5 ymm15_5;
smull mulH_6 mulLymm10_6 ymm10_6 ymm15_6;
smull mulH_7 mulLymm10_7 ymm10_7 ymm15_7;
smull mulH_8 mulLymm10_8 ymm10_8 ymm15_8;
smull mulH_9 mulLymm10_9 ymm10_9 ymm15_9;
smull mulH_a mulLymm10_a ymm10_a ymm15_a;
smull mulH_b mulLymm10_b ymm10_b ymm15_b;
smull mulH_c mulLymm10_c ymm10_c ymm15_c;
smull mulH_d mulLymm10_d ymm10_d ymm15_d;
smull mulH_e mulLymm10_e ymm10_e ymm15_e;
smull mulH_f mulLymm10_f ymm10_f ymm15_f;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x5555555594fb *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm10_0;
assume red_0 = mulLymm10_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm10_1;
assume red_1 = mulLymm10_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm10_2;
assume red_2 = mulLymm10_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm10_3;
assume red_3 = mulLymm10_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm10_4;
assume red_4 = mulLymm10_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm10_5;
assume red_5 = mulLymm10_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm10_6;
assume red_6 = mulLymm10_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm10_7;
assume red_7 = mulLymm10_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm10_8;
assume red_8 = mulLymm10_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm10_9;
assume red_9 = mulLymm10_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm10_a;
assume red_a = mulLymm10_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm10_b;
assume red_b = mulLymm10_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm10_c;
assume red_c = mulLymm10_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm10_d;
assume red_d = mulLymm10_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm10_e;
assume red_e = mulLymm10_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm10_f;
assume red_f = mulLymm10_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm10,%ymm10                      #! PC = 0x5555555594ff *)
sub ymm10_0 ymm10_0 ymm7_0;
sub ymm10_1 ymm10_1 ymm7_1;
sub ymm10_2 ymm10_2 ymm7_2;
sub ymm10_3 ymm10_3 ymm7_3;
sub ymm10_4 ymm10_4 ymm7_4;
sub ymm10_5 ymm10_5 ymm7_5;
sub ymm10_6 ymm10_6 ymm7_6;
sub ymm10_7 ymm10_7 ymm7_7;
sub ymm10_8 ymm10_8 ymm7_8;
sub ymm10_9 ymm10_9 ymm7_9;
sub ymm10_a ymm10_a ymm7_a;
sub ymm10_b ymm10_b ymm7_b;
sub ymm10_c ymm10_c ymm7_c;
sub ymm10_d ymm10_d ymm7_d;
sub ymm10_e ymm10_e ymm7_e;
sub ymm10_f ymm10_f ymm7_f;
(* vpermq $0x1b,0x400(%rdx),%ymm7                  #! EA = L0x555555560b00; Value = 0x8049bbe04939ec89; PC = 0x555555559503 *)
mov ymm7_0 L0x555555560b18;
mov ymm7_1 L0x555555560b1a;
mov ymm7_2 L0x555555560b1c;
mov ymm7_3 L0x555555560b1e;
mov ymm7_4 L0x555555560b10;
mov ymm7_5 L0x555555560b12;
mov ymm7_6 L0x555555560b14;
mov ymm7_7 L0x555555560b16;
mov ymm7_8 L0x555555560b08;
mov ymm7_9 L0x555555560b0a;
mov ymm7_a L0x555555560b0c;
mov ymm7_b L0x555555560b0e;
mov ymm7_c L0x555555560b00;
mov ymm7_d L0x555555560b02;
mov ymm7_e L0x555555560b04;
mov ymm7_f L0x555555560b06;
(* vpermq $0x1b,0x420(%rdx),%ymm15                 #! EA = L0x555555560b20; Value = 0x0e49fbe0f739fa89; PC = 0x55555555950d *)
mov ymm15_0 L0x555555560b38;
mov ymm15_1 L0x555555560b3a;
mov ymm15_2 L0x555555560b3c;
mov ymm15_3 L0x555555560b3e;
mov ymm15_4 L0x555555560b30;
mov ymm15_5 L0x555555560b32;
mov ymm15_6 L0x555555560b34;
mov ymm15_7 L0x555555560b36;
mov ymm15_8 L0x555555560b28;
mov ymm15_9 L0x555555560b2a;
mov ymm15_a L0x555555560b2c;
mov ymm15_b L0x555555560b2e;
mov ymm15_c L0x555555560b20;
mov ymm15_d L0x555555560b22;
mov ymm15_e L0x555555560b24;
mov ymm15_f L0x555555560b26;
(* vpmullw %ymm7,%ymm11,%ymm7                      #! PC = 0x555555559517 *)
smull mulHymm11_0 mulL_0 ymm7_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm7_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm7_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm7_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm7_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm7_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm7_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm7_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm7_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm7_9 ymm11_9;
smull mulHymm11_a mulL_a ymm7_a ymm11_a;
smull mulHymm11_b mulL_b ymm7_b ymm11_b;
smull mulHymm11_c mulL_c ymm7_c ymm11_c;
smull mulHymm11_d mulL_d ymm7_d ymm11_d;
smull mulHymm11_e mulL_e ymm7_e ymm11_e;
smull mulHymm11_f mulL_f ymm7_f ymm11_f;
cast ymm7_0@sint16 mulL_0;
cast ymm7_1@sint16 mulL_1;
cast ymm7_2@sint16 mulL_2;
cast ymm7_3@sint16 mulL_3;
cast ymm7_4@sint16 mulL_4;
cast ymm7_5@sint16 mulL_5;
cast ymm7_6@sint16 mulL_6;
cast ymm7_7@sint16 mulL_7;
cast ymm7_8@sint16 mulL_8;
cast ymm7_9@sint16 mulL_9;
cast ymm7_a@sint16 mulL_a;
cast ymm7_b@sint16 mulL_b;
cast ymm7_c@sint16 mulL_c;
cast ymm7_d@sint16 mulL_d;
cast ymm7_e@sint16 mulL_e;
cast ymm7_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm11,%ymm11                    #! PC = 0x55555555951b *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm15_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm15_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm15_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm15_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm15_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm15_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm15_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm15_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm15_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm15_9;
smull mulH_a mulLymm11_a ymm11_a ymm15_a;
smull mulH_b mulLymm11_b ymm11_b ymm15_b;
smull mulH_c mulLymm11_c ymm11_c ymm15_c;
smull mulH_d mulLymm11_d ymm11_d ymm15_d;
smull mulH_e mulLymm11_e ymm11_e ymm15_e;
smull mulH_f mulLymm11_f ymm11_f ymm15_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm7,%ymm7                       #! PC = 0x555555559520 *)
smull mulH_0 red_0 ymm7_0 ymm0_0;
assert true && red_0 = mulLymm11_0;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm7_1 ymm0_1;
assert true && red_1 = mulLymm11_1;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm7_2 ymm0_2;
assert true && red_2 = mulLymm11_2;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm7_3 ymm0_3;
assert true && red_3 = mulLymm11_3;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm7_4 ymm0_4;
assert true && red_4 = mulLymm11_4;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm7_5 ymm0_5;
assert true && red_5 = mulLymm11_5;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm7_6 ymm0_6;
assert true && red_6 = mulLymm11_6;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm7_7 ymm0_7;
assert true && red_7 = mulLymm11_7;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm7_8 ymm0_8;
assert true && red_8 = mulLymm11_8;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm7_9 ymm0_9;
assert true && red_9 = mulLymm11_9;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm7_a ymm0_a;
assert true && red_a = mulLymm11_a;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm7_b ymm0_b;
assert true && red_b = mulLymm11_b;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm7_c ymm0_c;
assert true && red_c = mulLymm11_c;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm7_d ymm0_d;
assert true && red_d = mulLymm11_d;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm7_e ymm0_e;
assert true && red_e = mulLymm11_e;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm7_f ymm0_f;
assert true && red_f = mulLymm11_f;
assume red_f = mulLymm11_f && true;
mov ymm7_0 mulH_0;
mov ymm7_1 mulH_1;
mov ymm7_2 mulH_2;
mov ymm7_3 mulH_3;
mov ymm7_4 mulH_4;
mov ymm7_5 mulH_5;
mov ymm7_6 mulH_6;
mov ymm7_7 mulH_7;
mov ymm7_8 mulH_8;
mov ymm7_9 mulH_9;
mov ymm7_a mulH_a;
mov ymm7_b mulH_b;
mov ymm7_c mulH_c;
mov ymm7_d mulH_d;
mov ymm7_e mulH_e;
mov ymm7_f mulH_f;
(* vpsubw %ymm7,%ymm11,%ymm11                      #! PC = 0x555555559524 *)
sub ymm11_0 ymm11_0 ymm7_0;
sub ymm11_1 ymm11_1 ymm7_1;
sub ymm11_2 ymm11_2 ymm7_2;
sub ymm11_3 ymm11_3 ymm7_3;
sub ymm11_4 ymm11_4 ymm7_4;
sub ymm11_5 ymm11_5 ymm7_5;
sub ymm11_6 ymm11_6 ymm7_6;
sub ymm11_7 ymm11_7 ymm7_7;
sub ymm11_8 ymm11_8 ymm7_8;
sub ymm11_9 ymm11_9 ymm7_9;
sub ymm11_a ymm11_a ymm7_a;
sub ymm11_b ymm11_b ymm7_b;
sub ymm11_c ymm11_c ymm7_c;
sub ymm11_d ymm11_d ymm7_d;
sub ymm11_e ymm11_e ymm7_e;
sub ymm11_f ymm11_f ymm7_f;
(* vpunpcklqdq %ymm5,%ymm12,%ymm3                  #! PC = 0x555555559528 *)
mov lqdq_0 ymm12_0;
mov lqdq_1 ymm12_1;
mov lqdq_2 ymm12_2;
mov lqdq_3 ymm12_3;
mov lqdq_4 ymm5_0;
mov lqdq_5 ymm5_1;
mov lqdq_6 ymm5_2;
mov lqdq_7 ymm5_3;
mov lqdq_8 ymm12_8;
mov lqdq_9 ymm12_9;
mov lqdq_a ymm12_a;
mov lqdq_b ymm12_b;
mov lqdq_c ymm5_8;
mov lqdq_d ymm5_9;
mov lqdq_e ymm5_a;
mov lqdq_f ymm5_b;
mov ymm3_0 lqdq_0;
mov ymm3_1 lqdq_1;
mov ymm3_2 lqdq_2;
mov ymm3_3 lqdq_3;
mov ymm3_4 lqdq_4;
mov ymm3_5 lqdq_5;
mov ymm3_6 lqdq_6;
mov ymm3_7 lqdq_7;
mov ymm3_8 lqdq_8;
mov ymm3_9 lqdq_9;
mov ymm3_a lqdq_a;
mov ymm3_b lqdq_b;
mov ymm3_c lqdq_c;
mov ymm3_d lqdq_d;
mov ymm3_e lqdq_e;
mov ymm3_f lqdq_f;
(* vpunpckhqdq %ymm5,%ymm12,%ymm4                  #! PC = 0x55555555952c *)
mov hqdq_0 ymm12_4;
mov hqdq_1 ymm12_5;
mov hqdq_2 ymm12_6;
mov hqdq_3 ymm12_7;
mov hqdq_4 ymm5_4;
mov hqdq_5 ymm5_5;
mov hqdq_6 ymm5_6;
mov hqdq_7 ymm5_7;
mov hqdq_8 ymm12_c;
mov hqdq_9 ymm12_d;
mov hqdq_a ymm12_e;
mov hqdq_b ymm12_f;
mov hqdq_c ymm5_c;
mov hqdq_d ymm5_d;
mov hqdq_e ymm5_e;
mov hqdq_f ymm5_f;
mov ymm4_0 hqdq_0;
mov ymm4_1 hqdq_1;
mov ymm4_2 hqdq_2;
mov ymm4_3 hqdq_3;
mov ymm4_4 hqdq_4;
mov ymm4_5 hqdq_5;
mov ymm4_6 hqdq_6;
mov ymm4_7 hqdq_7;
mov ymm4_8 hqdq_8;
mov ymm4_9 hqdq_9;
mov ymm4_a hqdq_a;
mov ymm4_b hqdq_b;
mov ymm4_c hqdq_c;
mov ymm4_d hqdq_d;
mov ymm4_e hqdq_e;
mov ymm4_f hqdq_f;
(* vpunpcklqdq %ymm14,%ymm13,%ymm5                 #! PC = 0x555555559530 *)
mov lqdq_0 ymm13_0;
mov lqdq_1 ymm13_1;
mov lqdq_2 ymm13_2;
mov lqdq_3 ymm13_3;
mov lqdq_4 ymm14_0;
mov lqdq_5 ymm14_1;
mov lqdq_6 ymm14_2;
mov lqdq_7 ymm14_3;
mov lqdq_8 ymm13_8;
mov lqdq_9 ymm13_9;
mov lqdq_a ymm13_a;
mov lqdq_b ymm13_b;
mov lqdq_c ymm14_8;
mov lqdq_d ymm14_9;
mov lqdq_e ymm14_a;
mov lqdq_f ymm14_b;
mov ymm5_0 lqdq_0;
mov ymm5_1 lqdq_1;
mov ymm5_2 lqdq_2;
mov ymm5_3 lqdq_3;
mov ymm5_4 lqdq_4;
mov ymm5_5 lqdq_5;
mov ymm5_6 lqdq_6;
mov ymm5_7 lqdq_7;
mov ymm5_8 lqdq_8;
mov ymm5_9 lqdq_9;
mov ymm5_a lqdq_a;
mov ymm5_b lqdq_b;
mov ymm5_c lqdq_c;
mov ymm5_d lqdq_d;
mov ymm5_e lqdq_e;
mov ymm5_f lqdq_f;
(* vpunpckhqdq %ymm14,%ymm13,%ymm6                 #! PC = 0x555555559535 *)
mov hqdq_0 ymm13_4;
mov hqdq_1 ymm13_5;
mov hqdq_2 ymm13_6;
mov hqdq_3 ymm13_7;
mov hqdq_4 ymm14_4;
mov hqdq_5 ymm14_5;
mov hqdq_6 ymm14_6;
mov hqdq_7 ymm14_7;
mov hqdq_8 ymm13_c;
mov hqdq_9 ymm13_d;
mov hqdq_a ymm13_e;
mov hqdq_b ymm13_f;
mov hqdq_c ymm14_c;
mov hqdq_d ymm14_d;
mov hqdq_e ymm14_e;
mov hqdq_f ymm14_f;
mov ymm6_0 hqdq_0;
mov ymm6_1 hqdq_1;
mov ymm6_2 hqdq_2;
mov ymm6_3 hqdq_3;
mov ymm6_4 hqdq_4;
mov ymm6_5 hqdq_5;
mov ymm6_6 hqdq_6;
mov ymm6_7 hqdq_7;
mov ymm6_8 hqdq_8;
mov ymm6_9 hqdq_9;
mov ymm6_a hqdq_a;
mov ymm6_b hqdq_b;
mov ymm6_c hqdq_c;
mov ymm6_d hqdq_d;
mov ymm6_e hqdq_e;
mov ymm6_f hqdq_f;
(* vpunpcklqdq %ymm9,%ymm8,%ymm7                   #! PC = 0x55555555953a *)
mov lqdq_0 ymm8_0;
mov lqdq_1 ymm8_1;
mov lqdq_2 ymm8_2;
mov lqdq_3 ymm8_3;
mov lqdq_4 ymm9_0;
mov lqdq_5 ymm9_1;
mov lqdq_6 ymm9_2;
mov lqdq_7 ymm9_3;
mov lqdq_8 ymm8_8;
mov lqdq_9 ymm8_9;
mov lqdq_a ymm8_a;
mov lqdq_b ymm8_b;
mov lqdq_c ymm9_8;
mov lqdq_d ymm9_9;
mov lqdq_e ymm9_a;
mov lqdq_f ymm9_b;
mov ymm7_0 lqdq_0;
mov ymm7_1 lqdq_1;
mov ymm7_2 lqdq_2;
mov ymm7_3 lqdq_3;
mov ymm7_4 lqdq_4;
mov ymm7_5 lqdq_5;
mov ymm7_6 lqdq_6;
mov ymm7_7 lqdq_7;
mov ymm7_8 lqdq_8;
mov ymm7_9 lqdq_9;
mov ymm7_a lqdq_a;
mov ymm7_b lqdq_b;
mov ymm7_c lqdq_c;
mov ymm7_d lqdq_d;
mov ymm7_e lqdq_e;
mov ymm7_f lqdq_f;
(* vpunpckhqdq %ymm9,%ymm8,%ymm8                   #! PC = 0x55555555953f *)
mov hqdq_0 ymm8_4;
mov hqdq_1 ymm8_5;
mov hqdq_2 ymm8_6;
mov hqdq_3 ymm8_7;
mov hqdq_4 ymm9_4;
mov hqdq_5 ymm9_5;
mov hqdq_6 ymm9_6;
mov hqdq_7 ymm9_7;
mov hqdq_8 ymm8_c;
mov hqdq_9 ymm8_d;
mov hqdq_a ymm8_e;
mov hqdq_b ymm8_f;
mov hqdq_c ymm9_c;
mov hqdq_d ymm9_d;
mov hqdq_e ymm9_e;
mov hqdq_f ymm9_f;
mov ymm8_0 hqdq_0;
mov ymm8_1 hqdq_1;
mov ymm8_2 hqdq_2;
mov ymm8_3 hqdq_3;
mov ymm8_4 hqdq_4;
mov ymm8_5 hqdq_5;
mov ymm8_6 hqdq_6;
mov ymm8_7 hqdq_7;
mov ymm8_8 hqdq_8;
mov ymm8_9 hqdq_9;
mov ymm8_a hqdq_a;
mov ymm8_b hqdq_b;
mov ymm8_c hqdq_c;
mov ymm8_d hqdq_d;
mov ymm8_e hqdq_e;
mov ymm8_f hqdq_f;
(* vpunpcklqdq %ymm11,%ymm10,%ymm9                 #! PC = 0x555555559544 *)
mov lqdq_0 ymm10_0;
mov lqdq_1 ymm10_1;
mov lqdq_2 ymm10_2;
mov lqdq_3 ymm10_3;
mov lqdq_4 ymm11_0;
mov lqdq_5 ymm11_1;
mov lqdq_6 ymm11_2;
mov lqdq_7 ymm11_3;
mov lqdq_8 ymm10_8;
mov lqdq_9 ymm10_9;
mov lqdq_a ymm10_a;
mov lqdq_b ymm10_b;
mov lqdq_c ymm11_8;
mov lqdq_d ymm11_9;
mov lqdq_e ymm11_a;
mov lqdq_f ymm11_b;
mov ymm9_0 lqdq_0;
mov ymm9_1 lqdq_1;
mov ymm9_2 lqdq_2;
mov ymm9_3 lqdq_3;
mov ymm9_4 lqdq_4;
mov ymm9_5 lqdq_5;
mov ymm9_6 lqdq_6;
mov ymm9_7 lqdq_7;
mov ymm9_8 lqdq_8;
mov ymm9_9 lqdq_9;
mov ymm9_a lqdq_a;
mov ymm9_b lqdq_b;
mov ymm9_c lqdq_c;
mov ymm9_d lqdq_d;
mov ymm9_e lqdq_e;
mov ymm9_f lqdq_f;
(* vpunpckhqdq %ymm11,%ymm10,%ymm10                #! PC = 0x555555559549 *)
mov hqdq_0 ymm10_4;
mov hqdq_1 ymm10_5;
mov hqdq_2 ymm10_6;
mov hqdq_3 ymm10_7;
mov hqdq_4 ymm11_4;
mov hqdq_5 ymm11_5;
mov hqdq_6 ymm11_6;
mov hqdq_7 ymm11_7;
mov hqdq_8 ymm10_c;
mov hqdq_9 ymm10_d;
mov hqdq_a ymm10_e;
mov hqdq_b ymm10_f;
mov hqdq_c ymm11_c;
mov hqdq_d ymm11_d;
mov hqdq_e ymm11_e;
mov hqdq_f ymm11_f;
mov ymm10_0 hqdq_0;
mov ymm10_1 hqdq_1;
mov ymm10_2 hqdq_2;
mov ymm10_3 hqdq_3;
mov ymm10_4 hqdq_4;
mov ymm10_5 hqdq_5;
mov ymm10_6 hqdq_6;
mov ymm10_7 hqdq_7;
mov ymm10_8 hqdq_8;
mov ymm10_9 hqdq_9;
mov ymm10_a hqdq_a;
mov ymm10_b hqdq_b;
mov ymm10_c hqdq_c;
mov ymm10_d hqdq_d;
mov ymm10_e hqdq_e;
mov ymm10_f hqdq_f;
(* vpermq $0x4e,0x180(%rdx),%ymm2                  #! EA = L0x555555560880; Value = 0x1190119011901190; PC = 0x55555555954e *)
mov ymm2_0 L0x555555560890;
mov ymm2_1 L0x555555560892;
mov ymm2_2 L0x555555560894;
mov ymm2_3 L0x555555560896;
mov ymm2_4 L0x555555560898;
mov ymm2_5 L0x55555556089a;
mov ymm2_6 L0x55555556089c;
mov ymm2_7 L0x55555556089e;
mov ymm2_8 L0x555555560880;
mov ymm2_9 L0x555555560882;
mov ymm2_a L0x555555560884;
mov ymm2_b L0x555555560886;
mov ymm2_c L0x555555560888;
mov ymm2_d L0x55555556088a;
mov ymm2_e L0x55555556088c;
mov ymm2_f L0x55555556088e;
(* vpermq $0x4e,0x1a0(%rdx),%ymm11                 #! EA = L0x5555555608a0; Value = 0xf190f190f190f190; PC = 0x555555559558 *)
mov ymm11_0 L0x5555555608b0;
mov ymm11_1 L0x5555555608b2;
mov ymm11_2 L0x5555555608b4;
mov ymm11_3 L0x5555555608b6;
mov ymm11_4 L0x5555555608b8;
mov ymm11_5 L0x5555555608ba;
mov ymm11_6 L0x5555555608bc;
mov ymm11_7 L0x5555555608be;
mov ymm11_8 L0x5555555608a0;
mov ymm11_9 L0x5555555608a2;
mov ymm11_a L0x5555555608a4;
mov ymm11_b L0x5555555608a6;
mov ymm11_c L0x5555555608a8;
mov ymm11_d L0x5555555608aa;
mov ymm11_e L0x5555555608ac;
mov ymm11_f L0x5555555608ae;
(* vpsubw %ymm3,%ymm4,%ymm12                       #! PC = 0x555555559562 *)
sub ymm12_0 ymm4_0 ymm3_0;
sub ymm12_1 ymm4_1 ymm3_1;
sub ymm12_2 ymm4_2 ymm3_2;
sub ymm12_3 ymm4_3 ymm3_3;
sub ymm12_4 ymm4_4 ymm3_4;
sub ymm12_5 ymm4_5 ymm3_5;
sub ymm12_6 ymm4_6 ymm3_6;
sub ymm12_7 ymm4_7 ymm3_7;
sub ymm12_8 ymm4_8 ymm3_8;
sub ymm12_9 ymm4_9 ymm3_9;
sub ymm12_a ymm4_a ymm3_a;
sub ymm12_b ymm4_b ymm3_b;
sub ymm12_c ymm4_c ymm3_c;
sub ymm12_d ymm4_d ymm3_d;
sub ymm12_e ymm4_e ymm3_e;
sub ymm12_f ymm4_f ymm3_f;
(* vpaddw %ymm4,%ymm3,%ymm3                        #! PC = 0x555555559566 *)
add ymm3_0 ymm3_0 ymm4_0;
add ymm3_1 ymm3_1 ymm4_1;
add ymm3_2 ymm3_2 ymm4_2;
add ymm3_3 ymm3_3 ymm4_3;
add ymm3_4 ymm3_4 ymm4_4;
add ymm3_5 ymm3_5 ymm4_5;
add ymm3_6 ymm3_6 ymm4_6;
add ymm3_7 ymm3_7 ymm4_7;
add ymm3_8 ymm3_8 ymm4_8;
add ymm3_9 ymm3_9 ymm4_9;
add ymm3_a ymm3_a ymm4_a;
add ymm3_b ymm3_b ymm4_b;
add ymm3_c ymm3_c ymm4_c;
add ymm3_d ymm3_d ymm4_d;
add ymm3_e ymm3_e ymm4_e;
add ymm3_f ymm3_f ymm4_f;
(* vpsubw %ymm5,%ymm6,%ymm13                       #! PC = 0x55555555956a *)
sub ymm13_0 ymm6_0 ymm5_0;
sub ymm13_1 ymm6_1 ymm5_1;
sub ymm13_2 ymm6_2 ymm5_2;
sub ymm13_3 ymm6_3 ymm5_3;
sub ymm13_4 ymm6_4 ymm5_4;
sub ymm13_5 ymm6_5 ymm5_5;
sub ymm13_6 ymm6_6 ymm5_6;
sub ymm13_7 ymm6_7 ymm5_7;
sub ymm13_8 ymm6_8 ymm5_8;
sub ymm13_9 ymm6_9 ymm5_9;
sub ymm13_a ymm6_a ymm5_a;
sub ymm13_b ymm6_b ymm5_b;
sub ymm13_c ymm6_c ymm5_c;
sub ymm13_d ymm6_d ymm5_d;
sub ymm13_e ymm6_e ymm5_e;
sub ymm13_f ymm6_f ymm5_f;
(* vpmullw %ymm2,%ymm12,%ymm4                      #! PC = 0x55555555956e *)
smull mulHymm12_0 mulL_0 ymm2_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm2_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm2_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm2_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm2_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm2_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm2_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm2_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm2_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm2_9 ymm12_9;
smull mulHymm12_a mulL_a ymm2_a ymm12_a;
smull mulHymm12_b mulL_b ymm2_b ymm12_b;
smull mulHymm12_c mulL_c ymm2_c ymm12_c;
smull mulHymm12_d mulL_d ymm2_d ymm12_d;
smull mulHymm12_e mulL_e ymm2_e ymm12_e;
smull mulHymm12_f mulL_f ymm2_f ymm12_f;
cast ymm4_0@sint16 mulL_0;
cast ymm4_1@sint16 mulL_1;
cast ymm4_2@sint16 mulL_2;
cast ymm4_3@sint16 mulL_3;
cast ymm4_4@sint16 mulL_4;
cast ymm4_5@sint16 mulL_5;
cast ymm4_6@sint16 mulL_6;
cast ymm4_7@sint16 mulL_7;
cast ymm4_8@sint16 mulL_8;
cast ymm4_9@sint16 mulL_9;
cast ymm4_a@sint16 mulL_a;
cast ymm4_b@sint16 mulL_b;
cast ymm4_c@sint16 mulL_c;
cast ymm4_d@sint16 mulL_d;
cast ymm4_e@sint16 mulL_e;
cast ymm4_f@sint16 mulL_f;
(* vpaddw %ymm6,%ymm5,%ymm5                        #! PC = 0x555555559572 *)
add ymm5_0 ymm5_0 ymm6_0;
add ymm5_1 ymm5_1 ymm6_1;
add ymm5_2 ymm5_2 ymm6_2;
add ymm5_3 ymm5_3 ymm6_3;
add ymm5_4 ymm5_4 ymm6_4;
add ymm5_5 ymm5_5 ymm6_5;
add ymm5_6 ymm5_6 ymm6_6;
add ymm5_7 ymm5_7 ymm6_7;
add ymm5_8 ymm5_8 ymm6_8;
add ymm5_9 ymm5_9 ymm6_9;
add ymm5_a ymm5_a ymm6_a;
add ymm5_b ymm5_b ymm6_b;
add ymm5_c ymm5_c ymm6_c;
add ymm5_d ymm5_d ymm6_d;
add ymm5_e ymm5_e ymm6_e;
add ymm5_f ymm5_f ymm6_f;
(* vpsubw %ymm7,%ymm8,%ymm14                       #! PC = 0x555555559576 *)
sub ymm14_0 ymm8_0 ymm7_0;
sub ymm14_1 ymm8_1 ymm7_1;
sub ymm14_2 ymm8_2 ymm7_2;
sub ymm14_3 ymm8_3 ymm7_3;
sub ymm14_4 ymm8_4 ymm7_4;
sub ymm14_5 ymm8_5 ymm7_5;
sub ymm14_6 ymm8_6 ymm7_6;
sub ymm14_7 ymm8_7 ymm7_7;
sub ymm14_8 ymm8_8 ymm7_8;
sub ymm14_9 ymm8_9 ymm7_9;
sub ymm14_a ymm8_a ymm7_a;
sub ymm14_b ymm8_b ymm7_b;
sub ymm14_c ymm8_c ymm7_c;
sub ymm14_d ymm8_d ymm7_d;
sub ymm14_e ymm8_e ymm7_e;
sub ymm14_f ymm8_f ymm7_f;
(* vpmullw %ymm2,%ymm13,%ymm6                      #! PC = 0x55555555957a *)
smull mulHymm13_0 mulL_0 ymm2_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm2_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm2_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm2_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm2_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm2_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm2_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm2_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm2_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm2_9 ymm13_9;
smull mulHymm13_a mulL_a ymm2_a ymm13_a;
smull mulHymm13_b mulL_b ymm2_b ymm13_b;
smull mulHymm13_c mulL_c ymm2_c ymm13_c;
smull mulHymm13_d mulL_d ymm2_d ymm13_d;
smull mulHymm13_e mulL_e ymm2_e ymm13_e;
smull mulHymm13_f mulL_f ymm2_f ymm13_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpaddw %ymm8,%ymm7,%ymm7                        #! PC = 0x55555555957e *)
add ymm7_0 ymm7_0 ymm8_0;
add ymm7_1 ymm7_1 ymm8_1;
add ymm7_2 ymm7_2 ymm8_2;
add ymm7_3 ymm7_3 ymm8_3;
add ymm7_4 ymm7_4 ymm8_4;
add ymm7_5 ymm7_5 ymm8_5;
add ymm7_6 ymm7_6 ymm8_6;
add ymm7_7 ymm7_7 ymm8_7;
add ymm7_8 ymm7_8 ymm8_8;
add ymm7_9 ymm7_9 ymm8_9;
add ymm7_a ymm7_a ymm8_a;
add ymm7_b ymm7_b ymm8_b;
add ymm7_c ymm7_c ymm8_c;
add ymm7_d ymm7_d ymm8_d;
add ymm7_e ymm7_e ymm8_e;
add ymm7_f ymm7_f ymm8_f;
(* vpsubw %ymm9,%ymm10,%ymm15                      #! PC = 0x555555559583 *)
sub ymm15_0 ymm10_0 ymm9_0;
sub ymm15_1 ymm10_1 ymm9_1;
sub ymm15_2 ymm10_2 ymm9_2;
sub ymm15_3 ymm10_3 ymm9_3;
sub ymm15_4 ymm10_4 ymm9_4;
sub ymm15_5 ymm10_5 ymm9_5;
sub ymm15_6 ymm10_6 ymm9_6;
sub ymm15_7 ymm10_7 ymm9_7;
sub ymm15_8 ymm10_8 ymm9_8;
sub ymm15_9 ymm10_9 ymm9_9;
sub ymm15_a ymm10_a ymm9_a;
sub ymm15_b ymm10_b ymm9_b;
sub ymm15_c ymm10_c ymm9_c;
sub ymm15_d ymm10_d ymm9_d;
sub ymm15_e ymm10_e ymm9_e;
sub ymm15_f ymm10_f ymm9_f;
(* vpmullw %ymm2,%ymm14,%ymm8                      #! PC = 0x555555559588 *)
smull mulHymm14_0 mulL_0 ymm2_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm2_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm2_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm2_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm2_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm2_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm2_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm2_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm2_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm2_9 ymm14_9;
smull mulHymm14_a mulL_a ymm2_a ymm14_a;
smull mulHymm14_b mulL_b ymm2_b ymm14_b;
smull mulHymm14_c mulL_c ymm2_c ymm14_c;
smull mulHymm14_d mulL_d ymm2_d ymm14_d;
smull mulHymm14_e mulL_e ymm2_e ymm14_e;
smull mulHymm14_f mulL_f ymm2_f ymm14_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpaddw %ymm10,%ymm9,%ymm9                       #! PC = 0x55555555958c *)
add ymm9_0 ymm9_0 ymm10_0;
add ymm9_1 ymm9_1 ymm10_1;
add ymm9_2 ymm9_2 ymm10_2;
add ymm9_3 ymm9_3 ymm10_3;
add ymm9_4 ymm9_4 ymm10_4;
add ymm9_5 ymm9_5 ymm10_5;
add ymm9_6 ymm9_6 ymm10_6;
add ymm9_7 ymm9_7 ymm10_7;
add ymm9_8 ymm9_8 ymm10_8;
add ymm9_9 ymm9_9 ymm10_9;
add ymm9_a ymm9_a ymm10_a;
add ymm9_b ymm9_b ymm10_b;
add ymm9_c ymm9_c ymm10_c;
add ymm9_d ymm9_d ymm10_d;
add ymm9_e ymm9_e ymm10_e;
add ymm9_f ymm9_f ymm10_f;
(* vpmullw %ymm2,%ymm15,%ymm10                     #! PC = 0x555555559591 *)
smull mulHymm15_0 mulL_0 ymm2_0 ymm15_0;
smull mulHymm15_1 mulL_1 ymm2_1 ymm15_1;
smull mulHymm15_2 mulL_2 ymm2_2 ymm15_2;
smull mulHymm15_3 mulL_3 ymm2_3 ymm15_3;
smull mulHymm15_4 mulL_4 ymm2_4 ymm15_4;
smull mulHymm15_5 mulL_5 ymm2_5 ymm15_5;
smull mulHymm15_6 mulL_6 ymm2_6 ymm15_6;
smull mulHymm15_7 mulL_7 ymm2_7 ymm15_7;
smull mulHymm15_8 mulL_8 ymm2_8 ymm15_8;
smull mulHymm15_9 mulL_9 ymm2_9 ymm15_9;
smull mulHymm15_a mulL_a ymm2_a ymm15_a;
smull mulHymm15_b mulL_b ymm2_b ymm15_b;
smull mulHymm15_c mulL_c ymm2_c ymm15_c;
smull mulHymm15_d mulL_d ymm2_d ymm15_d;
smull mulHymm15_e mulL_e ymm2_e ymm15_e;
smull mulHymm15_f mulL_f ymm2_f ymm15_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm11,%ymm12,%ymm12                    #! PC = 0x555555559595 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm11_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm11_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm11_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm11_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm11_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm11_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm11_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm11_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm11_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm11_9;
smull mulH_a mulLymm12_a ymm12_a ymm11_a;
smull mulH_b mulLymm12_b ymm12_b ymm11_b;
smull mulH_c mulLymm12_c ymm12_c ymm11_c;
smull mulH_d mulLymm12_d ymm12_d ymm11_d;
smull mulH_e mulLymm12_e ymm12_e ymm11_e;
smull mulH_f mulLymm12_f ymm12_f ymm11_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm11,%ymm13,%ymm13                    #! PC = 0x55555555959a *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm11_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm11_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm11_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm11_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm11_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm11_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm11_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm11_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm11_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm11_9;
smull mulH_a mulLymm13_a ymm13_a ymm11_a;
smull mulH_b mulLymm13_b ymm13_b ymm11_b;
smull mulH_c mulLymm13_c ymm13_c ymm11_c;
smull mulH_d mulLymm13_d ymm13_d ymm11_d;
smull mulH_e mulLymm13_e ymm13_e ymm11_e;
smull mulH_f mulLymm13_f ymm13_f ymm11_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm11,%ymm14,%ymm14                    #! PC = 0x55555555959f *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm11_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm11_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm11_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm11_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm11_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm11_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm11_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm11_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm11_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm11_9;
smull mulH_a mulLymm14_a ymm14_a ymm11_a;
smull mulH_b mulLymm14_b ymm14_b ymm11_b;
smull mulH_c mulLymm14_c ymm14_c ymm11_c;
smull mulH_d mulLymm14_d ymm14_d ymm11_d;
smull mulH_e mulLymm14_e ymm14_e ymm11_e;
smull mulH_f mulLymm14_f ymm14_f ymm11_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm11,%ymm15,%ymm15                    #! PC = 0x5555555595a4 *)
smull mulH_0 mulLymm15_0 ymm15_0 ymm11_0;
smull mulH_1 mulLymm15_1 ymm15_1 ymm11_1;
smull mulH_2 mulLymm15_2 ymm15_2 ymm11_2;
smull mulH_3 mulLymm15_3 ymm15_3 ymm11_3;
smull mulH_4 mulLymm15_4 ymm15_4 ymm11_4;
smull mulH_5 mulLymm15_5 ymm15_5 ymm11_5;
smull mulH_6 mulLymm15_6 ymm15_6 ymm11_6;
smull mulH_7 mulLymm15_7 ymm15_7 ymm11_7;
smull mulH_8 mulLymm15_8 ymm15_8 ymm11_8;
smull mulH_9 mulLymm15_9 ymm15_9 ymm11_9;
smull mulH_a mulLymm15_a ymm15_a ymm11_a;
smull mulH_b mulLymm15_b ymm15_b ymm11_b;
smull mulH_c mulLymm15_c ymm15_c ymm11_c;
smull mulH_d mulLymm15_d ymm15_d ymm11_d;
smull mulH_e mulLymm15_e ymm15_e ymm11_e;
smull mulH_f mulLymm15_f ymm15_f ymm11_f;
mov ymm15_0 mulH_0;
mov ymm15_1 mulH_1;
mov ymm15_2 mulH_2;
mov ymm15_3 mulH_3;
mov ymm15_4 mulH_4;
mov ymm15_5 mulH_5;
mov ymm15_6 mulH_6;
mov ymm15_7 mulH_7;
mov ymm15_8 mulH_8;
mov ymm15_9 mulH_9;
mov ymm15_a mulH_a;
mov ymm15_b mulH_b;
mov ymm15_c mulH_c;
mov ymm15_d mulH_d;
mov ymm15_e mulH_e;
mov ymm15_f mulH_f;
(* vpmulhw %ymm0,%ymm4,%ymm4                       #! PC = 0x5555555595a9 *)
smull mulH_0 red_0 ymm4_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm4_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm4_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm4_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm4_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm4_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm4_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm4_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm4_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm4_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm4_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm4_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm4_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm4_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm4_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm4_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm4_0 mulH_0;
mov ymm4_1 mulH_1;
mov ymm4_2 mulH_2;
mov ymm4_3 mulH_3;
mov ymm4_4 mulH_4;
mov ymm4_5 mulH_5;
mov ymm4_6 mulH_6;
mov ymm4_7 mulH_7;
mov ymm4_8 mulH_8;
mov ymm4_9 mulH_9;
mov ymm4_a mulH_a;
mov ymm4_b mulH_b;
mov ymm4_c mulH_c;
mov ymm4_d mulH_d;
mov ymm4_e mulH_e;
mov ymm4_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x5555555595ad *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x5555555595b1 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x5555555595b5 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm15_0;
assume red_0 = mulLymm15_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm15_1;
assume red_1 = mulLymm15_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm15_2;
assume red_2 = mulLymm15_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm15_3;
assume red_3 = mulLymm15_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm15_4;
assume red_4 = mulLymm15_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm15_5;
assume red_5 = mulLymm15_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm15_6;
assume red_6 = mulLymm15_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm15_7;
assume red_7 = mulLymm15_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm15_8;
assume red_8 = mulLymm15_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm15_9;
assume red_9 = mulLymm15_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm15_a;
assume red_a = mulLymm15_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm15_b;
assume red_b = mulLymm15_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm15_c;
assume red_c = mulLymm15_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm15_d;
assume red_d = mulLymm15_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm15_e;
assume red_e = mulLymm15_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm15_f;
assume red_f = mulLymm15_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm4,%ymm12,%ymm4                       #! PC = 0x5555555595b9 *)
sub ymm4_0 ymm12_0 ymm4_0;
sub ymm4_1 ymm12_1 ymm4_1;
sub ymm4_2 ymm12_2 ymm4_2;
sub ymm4_3 ymm12_3 ymm4_3;
sub ymm4_4 ymm12_4 ymm4_4;
sub ymm4_5 ymm12_5 ymm4_5;
sub ymm4_6 ymm12_6 ymm4_6;
sub ymm4_7 ymm12_7 ymm4_7;
sub ymm4_8 ymm12_8 ymm4_8;
sub ymm4_9 ymm12_9 ymm4_9;
sub ymm4_a ymm12_a ymm4_a;
sub ymm4_b ymm12_b ymm4_b;
sub ymm4_c ymm12_c ymm4_c;
sub ymm4_d ymm12_d ymm4_d;
sub ymm4_e ymm12_e ymm4_e;
sub ymm4_f ymm12_f ymm4_f;
(* vpsubw %ymm6,%ymm13,%ymm6                       #! PC = 0x5555555595bd *)
sub ymm6_0 ymm13_0 ymm6_0;
sub ymm6_1 ymm13_1 ymm6_1;
sub ymm6_2 ymm13_2 ymm6_2;
sub ymm6_3 ymm13_3 ymm6_3;
sub ymm6_4 ymm13_4 ymm6_4;
sub ymm6_5 ymm13_5 ymm6_5;
sub ymm6_6 ymm13_6 ymm6_6;
sub ymm6_7 ymm13_7 ymm6_7;
sub ymm6_8 ymm13_8 ymm6_8;
sub ymm6_9 ymm13_9 ymm6_9;
sub ymm6_a ymm13_a ymm6_a;
sub ymm6_b ymm13_b ymm6_b;
sub ymm6_c ymm13_c ymm6_c;
sub ymm6_d ymm13_d ymm6_d;
sub ymm6_e ymm13_e ymm6_e;
sub ymm6_f ymm13_f ymm6_f;
(* vpsubw %ymm8,%ymm14,%ymm8                       #! PC = 0x5555555595c1 *)
sub ymm8_0 ymm14_0 ymm8_0;
sub ymm8_1 ymm14_1 ymm8_1;
sub ymm8_2 ymm14_2 ymm8_2;
sub ymm8_3 ymm14_3 ymm8_3;
sub ymm8_4 ymm14_4 ymm8_4;
sub ymm8_5 ymm14_5 ymm8_5;
sub ymm8_6 ymm14_6 ymm8_6;
sub ymm8_7 ymm14_7 ymm8_7;
sub ymm8_8 ymm14_8 ymm8_8;
sub ymm8_9 ymm14_9 ymm8_9;
sub ymm8_a ymm14_a ymm8_a;
sub ymm8_b ymm14_b ymm8_b;
sub ymm8_c ymm14_c ymm8_c;
sub ymm8_d ymm14_d ymm8_d;
sub ymm8_e ymm14_e ymm8_e;
sub ymm8_f ymm14_f ymm8_f;
(* vpsubw %ymm10,%ymm15,%ymm10                     #! PC = 0x5555555595c6 *)
sub ymm10_0 ymm15_0 ymm10_0;
sub ymm10_1 ymm15_1 ymm10_1;
sub ymm10_2 ymm15_2 ymm10_2;
sub ymm10_3 ymm15_3 ymm10_3;
sub ymm10_4 ymm15_4 ymm10_4;
sub ymm10_5 ymm15_5 ymm10_5;
sub ymm10_6 ymm15_6 ymm10_6;
sub ymm10_7 ymm15_7 ymm10_7;
sub ymm10_8 ymm15_8 ymm10_8;
sub ymm10_9 ymm15_9 ymm10_9;
sub ymm10_a ymm15_a ymm10_a;
sub ymm10_b ymm15_b ymm10_b;
sub ymm10_c ymm15_c ymm10_c;
sub ymm10_d ymm15_d ymm10_d;
sub ymm10_e ymm15_e ymm10_e;
sub ymm10_f ymm15_f ymm10_f;
(* vperm2i128 $0x20,%ymm5,%ymm3,%ymm11             #! PC = 0x5555555595cb *)
mov perm_0 ymm3_0;
mov perm_1 ymm3_1;
mov perm_2 ymm3_2;
mov perm_3 ymm3_3;
mov perm_4 ymm3_4;
mov perm_5 ymm3_5;
mov perm_6 ymm3_6;
mov perm_7 ymm3_7;
mov perm_8 ymm5_0;
mov perm_9 ymm5_1;
mov perm_a ymm5_2;
mov perm_b ymm5_3;
mov perm_c ymm5_4;
mov perm_d ymm5_5;
mov perm_e ymm5_6;
mov perm_f ymm5_7;
mov ymm11_0 perm_0;
mov ymm11_1 perm_1;
mov ymm11_2 perm_2;
mov ymm11_3 perm_3;
mov ymm11_4 perm_4;
mov ymm11_5 perm_5;
mov ymm11_6 perm_6;
mov ymm11_7 perm_7;
mov ymm11_8 perm_8;
mov ymm11_9 perm_9;
mov ymm11_a perm_a;
mov ymm11_b perm_b;
mov ymm11_c perm_c;
mov ymm11_d perm_d;
mov ymm11_e perm_e;
mov ymm11_f perm_f;
(* vperm2i128 $0x31,%ymm5,%ymm3,%ymm5              #! PC = 0x5555555595d1 *)
mov perm_0 ymm3_8;
mov perm_1 ymm3_9;
mov perm_2 ymm3_a;
mov perm_3 ymm3_b;
mov perm_4 ymm3_c;
mov perm_5 ymm3_d;
mov perm_6 ymm3_e;
mov perm_7 ymm3_f;
mov perm_8 ymm5_8;
mov perm_9 ymm5_9;
mov perm_a ymm5_a;
mov perm_b ymm5_b;
mov perm_c ymm5_c;
mov perm_d ymm5_d;
mov perm_e ymm5_e;
mov perm_f ymm5_f;
mov ymm5_0 perm_0;
mov ymm5_1 perm_1;
mov ymm5_2 perm_2;
mov ymm5_3 perm_3;
mov ymm5_4 perm_4;
mov ymm5_5 perm_5;
mov ymm5_6 perm_6;
mov ymm5_7 perm_7;
mov ymm5_8 perm_8;
mov ymm5_9 perm_9;
mov ymm5_a perm_a;
mov ymm5_b perm_b;
mov ymm5_c perm_c;
mov ymm5_d perm_d;
mov ymm5_e perm_e;
mov ymm5_f perm_f;
(* vperm2i128 $0x20,%ymm9,%ymm7,%ymm3              #! PC = 0x5555555595d7 *)
mov perm_0 ymm7_0;
mov perm_1 ymm7_1;
mov perm_2 ymm7_2;
mov perm_3 ymm7_3;
mov perm_4 ymm7_4;
mov perm_5 ymm7_5;
mov perm_6 ymm7_6;
mov perm_7 ymm7_7;
mov perm_8 ymm9_0;
mov perm_9 ymm9_1;
mov perm_a ymm9_2;
mov perm_b ymm9_3;
mov perm_c ymm9_4;
mov perm_d ymm9_5;
mov perm_e ymm9_6;
mov perm_f ymm9_7;
mov ymm3_0 perm_0;
mov ymm3_1 perm_1;
mov ymm3_2 perm_2;
mov ymm3_3 perm_3;
mov ymm3_4 perm_4;
mov ymm3_5 perm_5;
mov ymm3_6 perm_6;
mov ymm3_7 perm_7;
mov ymm3_8 perm_8;
mov ymm3_9 perm_9;
mov ymm3_a perm_a;
mov ymm3_b perm_b;
mov ymm3_c perm_c;
mov ymm3_d perm_d;
mov ymm3_e perm_e;
mov ymm3_f perm_f;
(* vperm2i128 $0x31,%ymm9,%ymm7,%ymm9              #! PC = 0x5555555595dd *)
mov perm_0 ymm7_8;
mov perm_1 ymm7_9;
mov perm_2 ymm7_a;
mov perm_3 ymm7_b;
mov perm_4 ymm7_c;
mov perm_5 ymm7_d;
mov perm_6 ymm7_e;
mov perm_7 ymm7_f;
mov perm_8 ymm9_8;
mov perm_9 ymm9_9;
mov perm_a ymm9_a;
mov perm_b ymm9_b;
mov perm_c ymm9_c;
mov perm_d ymm9_d;
mov perm_e ymm9_e;
mov perm_f ymm9_f;
mov ymm9_0 perm_0;
mov ymm9_1 perm_1;
mov ymm9_2 perm_2;
mov ymm9_3 perm_3;
mov ymm9_4 perm_4;
mov ymm9_5 perm_5;
mov ymm9_6 perm_6;
mov ymm9_7 perm_7;
mov ymm9_8 perm_8;
mov ymm9_9 perm_9;
mov ymm9_a perm_a;
mov ymm9_b perm_b;
mov ymm9_c perm_c;
mov ymm9_d perm_d;
mov ymm9_e perm_e;
mov ymm9_f perm_f;
(* vperm2i128 $0x20,%ymm6,%ymm4,%ymm7              #! PC = 0x5555555595e3 *)
mov perm_0 ymm4_0;
mov perm_1 ymm4_1;
mov perm_2 ymm4_2;
mov perm_3 ymm4_3;
mov perm_4 ymm4_4;
mov perm_5 ymm4_5;
mov perm_6 ymm4_6;
mov perm_7 ymm4_7;
mov perm_8 ymm6_0;
mov perm_9 ymm6_1;
mov perm_a ymm6_2;
mov perm_b ymm6_3;
mov perm_c ymm6_4;
mov perm_d ymm6_5;
mov perm_e ymm6_6;
mov perm_f ymm6_7;
mov ymm7_0 perm_0;
mov ymm7_1 perm_1;
mov ymm7_2 perm_2;
mov ymm7_3 perm_3;
mov ymm7_4 perm_4;
mov ymm7_5 perm_5;
mov ymm7_6 perm_6;
mov ymm7_7 perm_7;
mov ymm7_8 perm_8;
mov ymm7_9 perm_9;
mov ymm7_a perm_a;
mov ymm7_b perm_b;
mov ymm7_c perm_c;
mov ymm7_d perm_d;
mov ymm7_e perm_e;
mov ymm7_f perm_f;
(* vperm2i128 $0x31,%ymm6,%ymm4,%ymm6              #! PC = 0x5555555595e9 *)
mov perm_0 ymm4_8;
mov perm_1 ymm4_9;
mov perm_2 ymm4_a;
mov perm_3 ymm4_b;
mov perm_4 ymm4_c;
mov perm_5 ymm4_d;
mov perm_6 ymm4_e;
mov perm_7 ymm4_f;
mov perm_8 ymm6_8;
mov perm_9 ymm6_9;
mov perm_a ymm6_a;
mov perm_b ymm6_b;
mov perm_c ymm6_c;
mov perm_d ymm6_d;
mov perm_e ymm6_e;
mov perm_f ymm6_f;
mov ymm6_0 perm_0;
mov ymm6_1 perm_1;
mov ymm6_2 perm_2;
mov ymm6_3 perm_3;
mov ymm6_4 perm_4;
mov ymm6_5 perm_5;
mov ymm6_6 perm_6;
mov ymm6_7 perm_7;
mov ymm6_8 perm_8;
mov ymm6_9 perm_9;
mov ymm6_a perm_a;
mov ymm6_b perm_b;
mov ymm6_c perm_c;
mov ymm6_d perm_d;
mov ymm6_e perm_e;
mov ymm6_f perm_f;
(* vperm2i128 $0x20,%ymm10,%ymm8,%ymm4             #! PC = 0x5555555595ef *)
mov perm_0 ymm8_0;
mov perm_1 ymm8_1;
mov perm_2 ymm8_2;
mov perm_3 ymm8_3;
mov perm_4 ymm8_4;
mov perm_5 ymm8_5;
mov perm_6 ymm8_6;
mov perm_7 ymm8_7;
mov perm_8 ymm10_0;
mov perm_9 ymm10_1;
mov perm_a ymm10_2;
mov perm_b ymm10_3;
mov perm_c ymm10_4;
mov perm_d ymm10_5;
mov perm_e ymm10_6;
mov perm_f ymm10_7;
mov ymm4_0 perm_0;
mov ymm4_1 perm_1;
mov ymm4_2 perm_2;
mov ymm4_3 perm_3;
mov ymm4_4 perm_4;
mov ymm4_5 perm_5;
mov ymm4_6 perm_6;
mov ymm4_7 perm_7;
mov ymm4_8 perm_8;
mov ymm4_9 perm_9;
mov ymm4_a perm_a;
mov ymm4_b perm_b;
mov ymm4_c perm_c;
mov ymm4_d perm_d;
mov ymm4_e perm_e;
mov ymm4_f perm_f;
(* vperm2i128 $0x31,%ymm10,%ymm8,%ymm10            #! PC = 0x5555555595f5 *)
mov perm_0 ymm8_8;
mov perm_1 ymm8_9;
mov perm_2 ymm8_a;
mov perm_3 ymm8_b;
mov perm_4 ymm8_c;
mov perm_5 ymm8_d;
mov perm_6 ymm8_e;
mov perm_7 ymm8_f;
mov perm_8 ymm10_8;
mov perm_9 ymm10_9;
mov perm_a ymm10_a;
mov perm_b ymm10_b;
mov perm_c ymm10_c;
mov perm_d ymm10_d;
mov perm_e ymm10_e;
mov perm_f ymm10_f;
mov ymm10_0 perm_0;
mov ymm10_1 perm_1;
mov ymm10_2 perm_2;
mov ymm10_3 perm_3;
mov ymm10_4 perm_4;
mov ymm10_5 perm_5;
mov ymm10_6 perm_6;
mov ymm10_7 perm_7;
mov ymm10_8 perm_8;
mov ymm10_9 perm_9;
mov ymm10_a perm_a;
mov ymm10_b perm_b;
mov ymm10_c perm_c;
mov ymm10_d perm_d;
mov ymm10_e perm_e;
mov ymm10_f perm_f;
(* vmovdqa 0x140(%rdx),%ymm2                       #! EA = L0x555555560840; Value = 0xd792d792d792d792; PC = 0x5555555595fb *)
mov ymm2_0 L0x555555560840;
mov ymm2_1 L0x555555560842;
mov ymm2_2 L0x555555560844;
mov ymm2_3 L0x555555560846;
mov ymm2_4 L0x555555560848;
mov ymm2_5 L0x55555556084a;
mov ymm2_6 L0x55555556084c;
mov ymm2_7 L0x55555556084e;
mov ymm2_8 L0x555555560850;
mov ymm2_9 L0x555555560852;
mov ymm2_a L0x555555560854;
mov ymm2_b L0x555555560856;
mov ymm2_c L0x555555560858;
mov ymm2_d L0x55555556085a;
mov ymm2_e L0x55555556085c;
mov ymm2_f L0x55555556085e;
(* vmovdqa 0x160(%rdx),%ymm8                       #! EA = L0x555555560860; Value = 0xf392f392f392f392; PC = 0x555555559603 *)
mov ymm8_0 L0x555555560860;
mov ymm8_1 L0x555555560862;
mov ymm8_2 L0x555555560864;
mov ymm8_3 L0x555555560866;
mov ymm8_4 L0x555555560868;
mov ymm8_5 L0x55555556086a;
mov ymm8_6 L0x55555556086c;
mov ymm8_7 L0x55555556086e;
mov ymm8_8 L0x555555560870;
mov ymm8_9 L0x555555560872;
mov ymm8_a L0x555555560874;
mov ymm8_b L0x555555560876;
mov ymm8_c L0x555555560878;
mov ymm8_d L0x55555556087a;
mov ymm8_e L0x55555556087c;
mov ymm8_f L0x55555556087e;
(* vpsubw %ymm11,%ymm5,%ymm12                      #! PC = 0x55555555960b *)
sub ymm12_0 ymm5_0 ymm11_0;
sub ymm12_1 ymm5_1 ymm11_1;
sub ymm12_2 ymm5_2 ymm11_2;
sub ymm12_3 ymm5_3 ymm11_3;
sub ymm12_4 ymm5_4 ymm11_4;
sub ymm12_5 ymm5_5 ymm11_5;
sub ymm12_6 ymm5_6 ymm11_6;
sub ymm12_7 ymm5_7 ymm11_7;
sub ymm12_8 ymm5_8 ymm11_8;
sub ymm12_9 ymm5_9 ymm11_9;
sub ymm12_a ymm5_a ymm11_a;
sub ymm12_b ymm5_b ymm11_b;
sub ymm12_c ymm5_c ymm11_c;
sub ymm12_d ymm5_d ymm11_d;
sub ymm12_e ymm5_e ymm11_e;
sub ymm12_f ymm5_f ymm11_f;
(* vpaddw %ymm5,%ymm11,%ymm11                      #! PC = 0x555555559610 *)
add ymm11_0 ymm11_0 ymm5_0;
add ymm11_1 ymm11_1 ymm5_1;
add ymm11_2 ymm11_2 ymm5_2;
add ymm11_3 ymm11_3 ymm5_3;
add ymm11_4 ymm11_4 ymm5_4;
add ymm11_5 ymm11_5 ymm5_5;
add ymm11_6 ymm11_6 ymm5_6;
add ymm11_7 ymm11_7 ymm5_7;
add ymm11_8 ymm11_8 ymm5_8;
add ymm11_9 ymm11_9 ymm5_9;
add ymm11_a ymm11_a ymm5_a;
add ymm11_b ymm11_b ymm5_b;
add ymm11_c ymm11_c ymm5_c;
add ymm11_d ymm11_d ymm5_d;
add ymm11_e ymm11_e ymm5_e;
add ymm11_f ymm11_f ymm5_f;
(* vpsubw %ymm3,%ymm9,%ymm13                       #! PC = 0x555555559614 *)
sub ymm13_0 ymm9_0 ymm3_0;
sub ymm13_1 ymm9_1 ymm3_1;
sub ymm13_2 ymm9_2 ymm3_2;
sub ymm13_3 ymm9_3 ymm3_3;
sub ymm13_4 ymm9_4 ymm3_4;
sub ymm13_5 ymm9_5 ymm3_5;
sub ymm13_6 ymm9_6 ymm3_6;
sub ymm13_7 ymm9_7 ymm3_7;
sub ymm13_8 ymm9_8 ymm3_8;
sub ymm13_9 ymm9_9 ymm3_9;
sub ymm13_a ymm9_a ymm3_a;
sub ymm13_b ymm9_b ymm3_b;
sub ymm13_c ymm9_c ymm3_c;
sub ymm13_d ymm9_d ymm3_d;
sub ymm13_e ymm9_e ymm3_e;
sub ymm13_f ymm9_f ymm3_f;
(* vpmullw %ymm2,%ymm12,%ymm5                      #! PC = 0x555555559618 *)
smull mulHymm12_0 mulL_0 ymm2_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm2_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm2_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm2_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm2_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm2_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm2_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm2_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm2_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm2_9 ymm12_9;
smull mulHymm12_a mulL_a ymm2_a ymm12_a;
smull mulHymm12_b mulL_b ymm2_b ymm12_b;
smull mulHymm12_c mulL_c ymm2_c ymm12_c;
smull mulHymm12_d mulL_d ymm2_d ymm12_d;
smull mulHymm12_e mulL_e ymm2_e ymm12_e;
smull mulHymm12_f mulL_f ymm2_f ymm12_f;
cast ymm5_0@sint16 mulL_0;
cast ymm5_1@sint16 mulL_1;
cast ymm5_2@sint16 mulL_2;
cast ymm5_3@sint16 mulL_3;
cast ymm5_4@sint16 mulL_4;
cast ymm5_5@sint16 mulL_5;
cast ymm5_6@sint16 mulL_6;
cast ymm5_7@sint16 mulL_7;
cast ymm5_8@sint16 mulL_8;
cast ymm5_9@sint16 mulL_9;
cast ymm5_a@sint16 mulL_a;
cast ymm5_b@sint16 mulL_b;
cast ymm5_c@sint16 mulL_c;
cast ymm5_d@sint16 mulL_d;
cast ymm5_e@sint16 mulL_e;
cast ymm5_f@sint16 mulL_f;
(* vpaddw %ymm9,%ymm3,%ymm3                        #! PC = 0x55555555961c *)
add ymm3_0 ymm3_0 ymm9_0;
add ymm3_1 ymm3_1 ymm9_1;
add ymm3_2 ymm3_2 ymm9_2;
add ymm3_3 ymm3_3 ymm9_3;
add ymm3_4 ymm3_4 ymm9_4;
add ymm3_5 ymm3_5 ymm9_5;
add ymm3_6 ymm3_6 ymm9_6;
add ymm3_7 ymm3_7 ymm9_7;
add ymm3_8 ymm3_8 ymm9_8;
add ymm3_9 ymm3_9 ymm9_9;
add ymm3_a ymm3_a ymm9_a;
add ymm3_b ymm3_b ymm9_b;
add ymm3_c ymm3_c ymm9_c;
add ymm3_d ymm3_d ymm9_d;
add ymm3_e ymm3_e ymm9_e;
add ymm3_f ymm3_f ymm9_f;
(* vpsubw %ymm7,%ymm6,%ymm14                       #! PC = 0x555555559621 *)
sub ymm14_0 ymm6_0 ymm7_0;
sub ymm14_1 ymm6_1 ymm7_1;
sub ymm14_2 ymm6_2 ymm7_2;
sub ymm14_3 ymm6_3 ymm7_3;
sub ymm14_4 ymm6_4 ymm7_4;
sub ymm14_5 ymm6_5 ymm7_5;
sub ymm14_6 ymm6_6 ymm7_6;
sub ymm14_7 ymm6_7 ymm7_7;
sub ymm14_8 ymm6_8 ymm7_8;
sub ymm14_9 ymm6_9 ymm7_9;
sub ymm14_a ymm6_a ymm7_a;
sub ymm14_b ymm6_b ymm7_b;
sub ymm14_c ymm6_c ymm7_c;
sub ymm14_d ymm6_d ymm7_d;
sub ymm14_e ymm6_e ymm7_e;
sub ymm14_f ymm6_f ymm7_f;
(* vpmullw %ymm2,%ymm13,%ymm9                      #! PC = 0x555555559625 *)
smull mulHymm13_0 mulL_0 ymm2_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm2_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm2_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm2_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm2_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm2_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm2_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm2_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm2_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm2_9 ymm13_9;
smull mulHymm13_a mulL_a ymm2_a ymm13_a;
smull mulHymm13_b mulL_b ymm2_b ymm13_b;
smull mulHymm13_c mulL_c ymm2_c ymm13_c;
smull mulHymm13_d mulL_d ymm2_d ymm13_d;
smull mulHymm13_e mulL_e ymm2_e ymm13_e;
smull mulHymm13_f mulL_f ymm2_f ymm13_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpaddw %ymm6,%ymm7,%ymm7                        #! PC = 0x555555559629 *)
add ymm7_0 ymm7_0 ymm6_0;
add ymm7_1 ymm7_1 ymm6_1;
add ymm7_2 ymm7_2 ymm6_2;
add ymm7_3 ymm7_3 ymm6_3;
add ymm7_4 ymm7_4 ymm6_4;
add ymm7_5 ymm7_5 ymm6_5;
add ymm7_6 ymm7_6 ymm6_6;
add ymm7_7 ymm7_7 ymm6_7;
add ymm7_8 ymm7_8 ymm6_8;
add ymm7_9 ymm7_9 ymm6_9;
add ymm7_a ymm7_a ymm6_a;
add ymm7_b ymm7_b ymm6_b;
add ymm7_c ymm7_c ymm6_c;
add ymm7_d ymm7_d ymm6_d;
add ymm7_e ymm7_e ymm6_e;
add ymm7_f ymm7_f ymm6_f;
(* vpsubw %ymm4,%ymm10,%ymm15                      #! PC = 0x55555555962d *)
sub ymm15_0 ymm10_0 ymm4_0;
sub ymm15_1 ymm10_1 ymm4_1;
sub ymm15_2 ymm10_2 ymm4_2;
sub ymm15_3 ymm10_3 ymm4_3;
sub ymm15_4 ymm10_4 ymm4_4;
sub ymm15_5 ymm10_5 ymm4_5;
sub ymm15_6 ymm10_6 ymm4_6;
sub ymm15_7 ymm10_7 ymm4_7;
sub ymm15_8 ymm10_8 ymm4_8;
sub ymm15_9 ymm10_9 ymm4_9;
sub ymm15_a ymm10_a ymm4_a;
sub ymm15_b ymm10_b ymm4_b;
sub ymm15_c ymm10_c ymm4_c;
sub ymm15_d ymm10_d ymm4_d;
sub ymm15_e ymm10_e ymm4_e;
sub ymm15_f ymm10_f ymm4_f;
(* vpmullw %ymm2,%ymm14,%ymm6                      #! PC = 0x555555559631 *)
smull mulHymm14_0 mulL_0 ymm2_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm2_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm2_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm2_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm2_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm2_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm2_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm2_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm2_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm2_9 ymm14_9;
smull mulHymm14_a mulL_a ymm2_a ymm14_a;
smull mulHymm14_b mulL_b ymm2_b ymm14_b;
smull mulHymm14_c mulL_c ymm2_c ymm14_c;
smull mulHymm14_d mulL_d ymm2_d ymm14_d;
smull mulHymm14_e mulL_e ymm2_e ymm14_e;
smull mulHymm14_f mulL_f ymm2_f ymm14_f;
cast ymm6_0@sint16 mulL_0;
cast ymm6_1@sint16 mulL_1;
cast ymm6_2@sint16 mulL_2;
cast ymm6_3@sint16 mulL_3;
cast ymm6_4@sint16 mulL_4;
cast ymm6_5@sint16 mulL_5;
cast ymm6_6@sint16 mulL_6;
cast ymm6_7@sint16 mulL_7;
cast ymm6_8@sint16 mulL_8;
cast ymm6_9@sint16 mulL_9;
cast ymm6_a@sint16 mulL_a;
cast ymm6_b@sint16 mulL_b;
cast ymm6_c@sint16 mulL_c;
cast ymm6_d@sint16 mulL_d;
cast ymm6_e@sint16 mulL_e;
cast ymm6_f@sint16 mulL_f;
(* vpaddw %ymm10,%ymm4,%ymm4                       #! PC = 0x555555559635 *)
add ymm4_0 ymm4_0 ymm10_0;
add ymm4_1 ymm4_1 ymm10_1;
add ymm4_2 ymm4_2 ymm10_2;
add ymm4_3 ymm4_3 ymm10_3;
add ymm4_4 ymm4_4 ymm10_4;
add ymm4_5 ymm4_5 ymm10_5;
add ymm4_6 ymm4_6 ymm10_6;
add ymm4_7 ymm4_7 ymm10_7;
add ymm4_8 ymm4_8 ymm10_8;
add ymm4_9 ymm4_9 ymm10_9;
add ymm4_a ymm4_a ymm10_a;
add ymm4_b ymm4_b ymm10_b;
add ymm4_c ymm4_c ymm10_c;
add ymm4_d ymm4_d ymm10_d;
add ymm4_e ymm4_e ymm10_e;
add ymm4_f ymm4_f ymm10_f;
(* vpmullw %ymm2,%ymm15,%ymm10                     #! PC = 0x55555555963a *)
smull mulHymm15_0 mulL_0 ymm2_0 ymm15_0;
smull mulHymm15_1 mulL_1 ymm2_1 ymm15_1;
smull mulHymm15_2 mulL_2 ymm2_2 ymm15_2;
smull mulHymm15_3 mulL_3 ymm2_3 ymm15_3;
smull mulHymm15_4 mulL_4 ymm2_4 ymm15_4;
smull mulHymm15_5 mulL_5 ymm2_5 ymm15_5;
smull mulHymm15_6 mulL_6 ymm2_6 ymm15_6;
smull mulHymm15_7 mulL_7 ymm2_7 ymm15_7;
smull mulHymm15_8 mulL_8 ymm2_8 ymm15_8;
smull mulHymm15_9 mulL_9 ymm2_9 ymm15_9;
smull mulHymm15_a mulL_a ymm2_a ymm15_a;
smull mulHymm15_b mulL_b ymm2_b ymm15_b;
smull mulHymm15_c mulL_c ymm2_c ymm15_c;
smull mulHymm15_d mulL_d ymm2_d ymm15_d;
smull mulHymm15_e mulL_e ymm2_e ymm15_e;
smull mulHymm15_f mulL_f ymm2_f ymm15_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpmulhw %ymm8,%ymm12,%ymm12                     #! PC = 0x55555555963e *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm8_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm8_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm8_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm8_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm8_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm8_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm8_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm8_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm8_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm8_9;
smull mulH_a mulLymm12_a ymm12_a ymm8_a;
smull mulH_b mulLymm12_b ymm12_b ymm8_b;
smull mulH_c mulLymm12_c ymm12_c ymm8_c;
smull mulH_d mulLymm12_d ymm12_d ymm8_d;
smull mulH_e mulLymm12_e ymm12_e ymm8_e;
smull mulH_f mulLymm12_f ymm12_f ymm8_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm8,%ymm13,%ymm13                     #! PC = 0x555555559643 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm8_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm8_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm8_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm8_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm8_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm8_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm8_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm8_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm8_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm8_9;
smull mulH_a mulLymm13_a ymm13_a ymm8_a;
smull mulH_b mulLymm13_b ymm13_b ymm8_b;
smull mulH_c mulLymm13_c ymm13_c ymm8_c;
smull mulH_d mulLymm13_d ymm13_d ymm8_d;
smull mulH_e mulLymm13_e ymm13_e ymm8_e;
smull mulH_f mulLymm13_f ymm13_f ymm8_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm8,%ymm14,%ymm14                     #! PC = 0x555555559648 *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm8_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm8_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm8_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm8_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm8_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm8_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm8_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm8_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm8_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm8_9;
smull mulH_a mulLymm14_a ymm14_a ymm8_a;
smull mulH_b mulLymm14_b ymm14_b ymm8_b;
smull mulH_c mulLymm14_c ymm14_c ymm8_c;
smull mulH_d mulLymm14_d ymm14_d ymm8_d;
smull mulH_e mulLymm14_e ymm14_e ymm8_e;
smull mulH_f mulLymm14_f ymm14_f ymm8_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm8,%ymm15,%ymm15                     #! PC = 0x55555555964d *)
smull mulH_0 mulLymm15_0 ymm15_0 ymm8_0;
smull mulH_1 mulLymm15_1 ymm15_1 ymm8_1;
smull mulH_2 mulLymm15_2 ymm15_2 ymm8_2;
smull mulH_3 mulLymm15_3 ymm15_3 ymm8_3;
smull mulH_4 mulLymm15_4 ymm15_4 ymm8_4;
smull mulH_5 mulLymm15_5 ymm15_5 ymm8_5;
smull mulH_6 mulLymm15_6 ymm15_6 ymm8_6;
smull mulH_7 mulLymm15_7 ymm15_7 ymm8_7;
smull mulH_8 mulLymm15_8 ymm15_8 ymm8_8;
smull mulH_9 mulLymm15_9 ymm15_9 ymm8_9;
smull mulH_a mulLymm15_a ymm15_a ymm8_a;
smull mulH_b mulLymm15_b ymm15_b ymm8_b;
smull mulH_c mulLymm15_c ymm15_c ymm8_c;
smull mulH_d mulLymm15_d ymm15_d ymm8_d;
smull mulH_e mulLymm15_e ymm15_e ymm8_e;
smull mulH_f mulLymm15_f ymm15_f ymm8_f;
mov ymm15_0 mulH_0;
mov ymm15_1 mulH_1;
mov ymm15_2 mulH_2;
mov ymm15_3 mulH_3;
mov ymm15_4 mulH_4;
mov ymm15_5 mulH_5;
mov ymm15_6 mulH_6;
mov ymm15_7 mulH_7;
mov ymm15_8 mulH_8;
mov ymm15_9 mulH_9;
mov ymm15_a mulH_a;
mov ymm15_b mulH_b;
mov ymm15_c mulH_c;
mov ymm15_d mulH_d;
mov ymm15_e mulH_e;
mov ymm15_f mulH_f;
(* vpmulhw %ymm0,%ymm5,%ymm5                       #! PC = 0x555555559652 *)
smull mulH_0 red_0 ymm5_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm5_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm5_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm5_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm5_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm5_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm5_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm5_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm5_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm5_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm5_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm5_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm5_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm5_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm5_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm5_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm5_0 mulH_0;
mov ymm5_1 mulH_1;
mov ymm5_2 mulH_2;
mov ymm5_3 mulH_3;
mov ymm5_4 mulH_4;
mov ymm5_5 mulH_5;
mov ymm5_6 mulH_6;
mov ymm5_7 mulH_7;
mov ymm5_8 mulH_8;
mov ymm5_9 mulH_9;
mov ymm5_a mulH_a;
mov ymm5_b mulH_b;
mov ymm5_c mulH_c;
mov ymm5_d mulH_d;
mov ymm5_e mulH_e;
mov ymm5_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x555555559656 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm6,%ymm6                       #! PC = 0x55555555965a *)
smull mulH_0 red_0 ymm6_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm6_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm6_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm6_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm6_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm6_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm6_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm6_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm6_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm6_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm6_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm6_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm6_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm6_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm6_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm6_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm6_0 mulH_0;
mov ymm6_1 mulH_1;
mov ymm6_2 mulH_2;
mov ymm6_3 mulH_3;
mov ymm6_4 mulH_4;
mov ymm6_5 mulH_5;
mov ymm6_6 mulH_6;
mov ymm6_7 mulH_7;
mov ymm6_8 mulH_8;
mov ymm6_9 mulH_9;
mov ymm6_a mulH_a;
mov ymm6_b mulH_b;
mov ymm6_c mulH_c;
mov ymm6_d mulH_d;
mov ymm6_e mulH_e;
mov ymm6_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x55555555965e *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm15_0;
assume red_0 = mulLymm15_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm15_1;
assume red_1 = mulLymm15_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm15_2;
assume red_2 = mulLymm15_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm15_3;
assume red_3 = mulLymm15_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm15_4;
assume red_4 = mulLymm15_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm15_5;
assume red_5 = mulLymm15_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm15_6;
assume red_6 = mulLymm15_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm15_7;
assume red_7 = mulLymm15_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm15_8;
assume red_8 = mulLymm15_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm15_9;
assume red_9 = mulLymm15_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm15_a;
assume red_a = mulLymm15_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm15_b;
assume red_b = mulLymm15_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm15_c;
assume red_c = mulLymm15_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm15_d;
assume red_d = mulLymm15_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm15_e;
assume red_e = mulLymm15_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm15_f;
assume red_f = mulLymm15_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpsubw %ymm5,%ymm12,%ymm5                       #! PC = 0x555555559662 *)
sub ymm5_0 ymm12_0 ymm5_0;
sub ymm5_1 ymm12_1 ymm5_1;
sub ymm5_2 ymm12_2 ymm5_2;
sub ymm5_3 ymm12_3 ymm5_3;
sub ymm5_4 ymm12_4 ymm5_4;
sub ymm5_5 ymm12_5 ymm5_5;
sub ymm5_6 ymm12_6 ymm5_6;
sub ymm5_7 ymm12_7 ymm5_7;
sub ymm5_8 ymm12_8 ymm5_8;
sub ymm5_9 ymm12_9 ymm5_9;
sub ymm5_a ymm12_a ymm5_a;
sub ymm5_b ymm12_b ymm5_b;
sub ymm5_c ymm12_c ymm5_c;
sub ymm5_d ymm12_d ymm5_d;
sub ymm5_e ymm12_e ymm5_e;
sub ymm5_f ymm12_f ymm5_f;
(* vpsubw %ymm9,%ymm13,%ymm9                       #! PC = 0x555555559666 *)
sub ymm9_0 ymm13_0 ymm9_0;
sub ymm9_1 ymm13_1 ymm9_1;
sub ymm9_2 ymm13_2 ymm9_2;
sub ymm9_3 ymm13_3 ymm9_3;
sub ymm9_4 ymm13_4 ymm9_4;
sub ymm9_5 ymm13_5 ymm9_5;
sub ymm9_6 ymm13_6 ymm9_6;
sub ymm9_7 ymm13_7 ymm9_7;
sub ymm9_8 ymm13_8 ymm9_8;
sub ymm9_9 ymm13_9 ymm9_9;
sub ymm9_a ymm13_a ymm9_a;
sub ymm9_b ymm13_b ymm9_b;
sub ymm9_c ymm13_c ymm9_c;
sub ymm9_d ymm13_d ymm9_d;
sub ymm9_e ymm13_e ymm9_e;
sub ymm9_f ymm13_f ymm9_f;
(* vpsubw %ymm6,%ymm14,%ymm6                       #! PC = 0x55555555966b *)
sub ymm6_0 ymm14_0 ymm6_0;
sub ymm6_1 ymm14_1 ymm6_1;
sub ymm6_2 ymm14_2 ymm6_2;
sub ymm6_3 ymm14_3 ymm6_3;
sub ymm6_4 ymm14_4 ymm6_4;
sub ymm6_5 ymm14_5 ymm6_5;
sub ymm6_6 ymm14_6 ymm6_6;
sub ymm6_7 ymm14_7 ymm6_7;
sub ymm6_8 ymm14_8 ymm6_8;
sub ymm6_9 ymm14_9 ymm6_9;
sub ymm6_a ymm14_a ymm6_a;
sub ymm6_b ymm14_b ymm6_b;
sub ymm6_c ymm14_c ymm6_c;
sub ymm6_d ymm14_d ymm6_d;
sub ymm6_e ymm14_e ymm6_e;
sub ymm6_f ymm14_f ymm6_f;
(* vpsubw %ymm10,%ymm15,%ymm10                     #! PC = 0x55555555966f *)
sub ymm10_0 ymm15_0 ymm10_0;
sub ymm10_1 ymm15_1 ymm10_1;
sub ymm10_2 ymm15_2 ymm10_2;
sub ymm10_3 ymm15_3 ymm10_3;
sub ymm10_4 ymm15_4 ymm10_4;
sub ymm10_5 ymm15_5 ymm10_5;
sub ymm10_6 ymm15_6 ymm10_6;
sub ymm10_7 ymm15_7 ymm10_7;
sub ymm10_8 ymm15_8 ymm10_8;
sub ymm10_9 ymm15_9 ymm10_9;
sub ymm10_a ymm15_a ymm10_a;
sub ymm10_b ymm15_b ymm10_b;
sub ymm10_c ymm15_c ymm10_c;
sub ymm10_d ymm15_d ymm10_d;
sub ymm10_e ymm15_e ymm10_e;
sub ymm10_f ymm15_f ymm10_f;
(* vmovdqa 0x80(%rdx),%ymm14                       #! EA = L0x555555560780; Value = 0xfff7fff7fff7fff7; PC = 0x555555559674 *)
mov ymm14_0 L0x555555560780;
mov ymm14_1 L0x555555560782;
mov ymm14_2 L0x555555560784;
mov ymm14_3 L0x555555560786;
mov ymm14_4 L0x555555560788;
mov ymm14_5 L0x55555556078a;
mov ymm14_6 L0x55555556078c;
mov ymm14_7 L0x55555556078e;
mov ymm14_8 L0x555555560790;
mov ymm14_9 L0x555555560792;
mov ymm14_a L0x555555560794;
mov ymm14_b L0x555555560796;
mov ymm14_c L0x555555560798;
mov ymm14_d L0x55555556079a;
mov ymm14_e L0x55555556079c;
mov ymm14_f L0x55555556079e;
(* vmovdqa 0xa0(%rdx),%ymm15                       #! EA = L0x5555555607a0; Value = 0xf1f7f1f7f1f7f1f7; PC = 0x55555555967c *)
mov ymm15_0 L0x5555555607a0;
mov ymm15_1 L0x5555555607a2;
mov ymm15_2 L0x5555555607a4;
mov ymm15_3 L0x5555555607a6;
mov ymm15_4 L0x5555555607a8;
mov ymm15_5 L0x5555555607aa;
mov ymm15_6 L0x5555555607ac;
mov ymm15_7 L0x5555555607ae;
mov ymm15_8 L0x5555555607b0;
mov ymm15_9 L0x5555555607b2;
mov ymm15_a L0x5555555607b4;
mov ymm15_b L0x5555555607b6;
mov ymm15_c L0x5555555607b8;
mov ymm15_d L0x5555555607ba;
mov ymm15_e L0x5555555607bc;
mov ymm15_f L0x5555555607be;
(* vpmullw %ymm14,%ymm11,%ymm13                    #! PC = 0x555555559684 *)
smull mulHymm11_0 mulL_0 ymm14_0 ymm11_0;
smull mulHymm11_1 mulL_1 ymm14_1 ymm11_1;
smull mulHymm11_2 mulL_2 ymm14_2 ymm11_2;
smull mulHymm11_3 mulL_3 ymm14_3 ymm11_3;
smull mulHymm11_4 mulL_4 ymm14_4 ymm11_4;
smull mulHymm11_5 mulL_5 ymm14_5 ymm11_5;
smull mulHymm11_6 mulL_6 ymm14_6 ymm11_6;
smull mulHymm11_7 mulL_7 ymm14_7 ymm11_7;
smull mulHymm11_8 mulL_8 ymm14_8 ymm11_8;
smull mulHymm11_9 mulL_9 ymm14_9 ymm11_9;
smull mulHymm11_a mulL_a ymm14_a ymm11_a;
smull mulHymm11_b mulL_b ymm14_b ymm11_b;
smull mulHymm11_c mulL_c ymm14_c ymm11_c;
smull mulHymm11_d mulL_d ymm14_d ymm11_d;
smull mulHymm11_e mulL_e ymm14_e ymm11_e;
smull mulHymm11_f mulL_f ymm14_f ymm11_f;
cast ymm13_0@sint16 mulL_0;
cast ymm13_1@sint16 mulL_1;
cast ymm13_2@sint16 mulL_2;
cast ymm13_3@sint16 mulL_3;
cast ymm13_4@sint16 mulL_4;
cast ymm13_5@sint16 mulL_5;
cast ymm13_6@sint16 mulL_6;
cast ymm13_7@sint16 mulL_7;
cast ymm13_8@sint16 mulL_8;
cast ymm13_9@sint16 mulL_9;
cast ymm13_a@sint16 mulL_a;
cast ymm13_b@sint16 mulL_b;
cast ymm13_c@sint16 mulL_c;
cast ymm13_d@sint16 mulL_d;
cast ymm13_e@sint16 mulL_e;
cast ymm13_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm11,%ymm11                    #! PC = 0x555555559689 *)
smull mulH_0 mulLymm11_0 ymm11_0 ymm15_0;
smull mulH_1 mulLymm11_1 ymm11_1 ymm15_1;
smull mulH_2 mulLymm11_2 ymm11_2 ymm15_2;
smull mulH_3 mulLymm11_3 ymm11_3 ymm15_3;
smull mulH_4 mulLymm11_4 ymm11_4 ymm15_4;
smull mulH_5 mulLymm11_5 ymm11_5 ymm15_5;
smull mulH_6 mulLymm11_6 ymm11_6 ymm15_6;
smull mulH_7 mulLymm11_7 ymm11_7 ymm15_7;
smull mulH_8 mulLymm11_8 ymm11_8 ymm15_8;
smull mulH_9 mulLymm11_9 ymm11_9 ymm15_9;
smull mulH_a mulLymm11_a ymm11_a ymm15_a;
smull mulH_b mulLymm11_b ymm11_b ymm15_b;
smull mulH_c mulLymm11_c ymm11_c ymm15_c;
smull mulH_d mulLymm11_d ymm11_d ymm15_d;
smull mulH_e mulLymm11_e ymm11_e ymm15_e;
smull mulH_f mulLymm11_f ymm11_f ymm15_f;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpmulhw %ymm0,%ymm13,%ymm13                     #! PC = 0x55555555968e *)
smull mulH_0 red_0 ymm13_0 ymm0_0;
assert true && red_0 = mulLymm11_0;
assume red_0 = mulLymm11_0 && true;
smull mulH_1 red_1 ymm13_1 ymm0_1;
assert true && red_1 = mulLymm11_1;
assume red_1 = mulLymm11_1 && true;
smull mulH_2 red_2 ymm13_2 ymm0_2;
assert true && red_2 = mulLymm11_2;
assume red_2 = mulLymm11_2 && true;
smull mulH_3 red_3 ymm13_3 ymm0_3;
assert true && red_3 = mulLymm11_3;
assume red_3 = mulLymm11_3 && true;
smull mulH_4 red_4 ymm13_4 ymm0_4;
assert true && red_4 = mulLymm11_4;
assume red_4 = mulLymm11_4 && true;
smull mulH_5 red_5 ymm13_5 ymm0_5;
assert true && red_5 = mulLymm11_5;
assume red_5 = mulLymm11_5 && true;
smull mulH_6 red_6 ymm13_6 ymm0_6;
assert true && red_6 = mulLymm11_6;
assume red_6 = mulLymm11_6 && true;
smull mulH_7 red_7 ymm13_7 ymm0_7;
assert true && red_7 = mulLymm11_7;
assume red_7 = mulLymm11_7 && true;
smull mulH_8 red_8 ymm13_8 ymm0_8;
assert true && red_8 = mulLymm11_8;
assume red_8 = mulLymm11_8 && true;
smull mulH_9 red_9 ymm13_9 ymm0_9;
assert true && red_9 = mulLymm11_9;
assume red_9 = mulLymm11_9 && true;
smull mulH_a red_a ymm13_a ymm0_a;
assert true && red_a = mulLymm11_a;
assume red_a = mulLymm11_a && true;
smull mulH_b red_b ymm13_b ymm0_b;
assert true && red_b = mulLymm11_b;
assume red_b = mulLymm11_b && true;
smull mulH_c red_c ymm13_c ymm0_c;
assert true && red_c = mulLymm11_c;
assume red_c = mulLymm11_c && true;
smull mulH_d red_d ymm13_d ymm0_d;
assert true && red_d = mulLymm11_d;
assume red_d = mulLymm11_d && true;
smull mulH_e red_e ymm13_e ymm0_e;
assert true && red_e = mulLymm11_e;
assume red_e = mulLymm11_e && true;
smull mulH_f red_f ymm13_f ymm0_f;
assert true && red_f = mulLymm11_f;
assume red_f = mulLymm11_f && true;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpsubw %ymm13,%ymm11,%ymm11                     #! PC = 0x555555559692 *)
sub ymm11_0 ymm11_0 ymm13_0;
sub ymm11_1 ymm11_1 ymm13_1;
sub ymm11_2 ymm11_2 ymm13_2;
sub ymm11_3 ymm11_3 ymm13_3;
sub ymm11_4 ymm11_4 ymm13_4;
sub ymm11_5 ymm11_5 ymm13_5;
sub ymm11_6 ymm11_6 ymm13_6;
sub ymm11_7 ymm11_7 ymm13_7;
sub ymm11_8 ymm11_8 ymm13_8;
sub ymm11_9 ymm11_9 ymm13_9;
sub ymm11_a ymm11_a ymm13_a;
sub ymm11_b ymm11_b ymm13_b;
sub ymm11_c ymm11_c ymm13_c;
sub ymm11_d ymm11_d ymm13_d;
sub ymm11_e ymm11_e ymm13_e;
sub ymm11_f ymm11_f ymm13_f;
(* vpmullw %ymm14,%ymm3,%ymm13                     #! PC = 0x555555559697 *)
smull mulHymm3_0 mulL_0 ymm14_0 ymm3_0;
smull mulHymm3_1 mulL_1 ymm14_1 ymm3_1;
smull mulHymm3_2 mulL_2 ymm14_2 ymm3_2;
smull mulHymm3_3 mulL_3 ymm14_3 ymm3_3;
smull mulHymm3_4 mulL_4 ymm14_4 ymm3_4;
smull mulHymm3_5 mulL_5 ymm14_5 ymm3_5;
smull mulHymm3_6 mulL_6 ymm14_6 ymm3_6;
smull mulHymm3_7 mulL_7 ymm14_7 ymm3_7;
smull mulHymm3_8 mulL_8 ymm14_8 ymm3_8;
smull mulHymm3_9 mulL_9 ymm14_9 ymm3_9;
smull mulHymm3_a mulL_a ymm14_a ymm3_a;
smull mulHymm3_b mulL_b ymm14_b ymm3_b;
smull mulHymm3_c mulL_c ymm14_c ymm3_c;
smull mulHymm3_d mulL_d ymm14_d ymm3_d;
smull mulHymm3_e mulL_e ymm14_e ymm3_e;
smull mulHymm3_f mulL_f ymm14_f ymm3_f;
cast ymm13_0@sint16 mulL_0;
cast ymm13_1@sint16 mulL_1;
cast ymm13_2@sint16 mulL_2;
cast ymm13_3@sint16 mulL_3;
cast ymm13_4@sint16 mulL_4;
cast ymm13_5@sint16 mulL_5;
cast ymm13_6@sint16 mulL_6;
cast ymm13_7@sint16 mulL_7;
cast ymm13_8@sint16 mulL_8;
cast ymm13_9@sint16 mulL_9;
cast ymm13_a@sint16 mulL_a;
cast ymm13_b@sint16 mulL_b;
cast ymm13_c@sint16 mulL_c;
cast ymm13_d@sint16 mulL_d;
cast ymm13_e@sint16 mulL_e;
cast ymm13_f@sint16 mulL_f;
(* vpmulhw %ymm15,%ymm3,%ymm3                      #! PC = 0x55555555969c *)
smull mulH_0 mulLymm3_0 ymm3_0 ymm15_0;
smull mulH_1 mulLymm3_1 ymm3_1 ymm15_1;
smull mulH_2 mulLymm3_2 ymm3_2 ymm15_2;
smull mulH_3 mulLymm3_3 ymm3_3 ymm15_3;
smull mulH_4 mulLymm3_4 ymm3_4 ymm15_4;
smull mulH_5 mulLymm3_5 ymm3_5 ymm15_5;
smull mulH_6 mulLymm3_6 ymm3_6 ymm15_6;
smull mulH_7 mulLymm3_7 ymm3_7 ymm15_7;
smull mulH_8 mulLymm3_8 ymm3_8 ymm15_8;
smull mulH_9 mulLymm3_9 ymm3_9 ymm15_9;
smull mulH_a mulLymm3_a ymm3_a ymm15_a;
smull mulH_b mulLymm3_b ymm3_b ymm15_b;
smull mulH_c mulLymm3_c ymm3_c ymm15_c;
smull mulH_d mulLymm3_d ymm3_d ymm15_d;
smull mulH_e mulLymm3_e ymm3_e ymm15_e;
smull mulH_f mulLymm3_f ymm3_f ymm15_f;
mov ymm3_0 mulH_0;
mov ymm3_1 mulH_1;
mov ymm3_2 mulH_2;
mov ymm3_3 mulH_3;
mov ymm3_4 mulH_4;
mov ymm3_5 mulH_5;
mov ymm3_6 mulH_6;
mov ymm3_7 mulH_7;
mov ymm3_8 mulH_8;
mov ymm3_9 mulH_9;
mov ymm3_a mulH_a;
mov ymm3_b mulH_b;
mov ymm3_c mulH_c;
mov ymm3_d mulH_d;
mov ymm3_e mulH_e;
mov ymm3_f mulH_f;
(* vpmulhw %ymm0,%ymm13,%ymm13                     #! PC = 0x5555555596a1 *)
smull mulH_0 red_0 ymm13_0 ymm0_0;
assert true && red_0 = mulLymm3_0;
assume red_0 = mulLymm3_0 && true;
smull mulH_1 red_1 ymm13_1 ymm0_1;
assert true && red_1 = mulLymm3_1;
assume red_1 = mulLymm3_1 && true;
smull mulH_2 red_2 ymm13_2 ymm0_2;
assert true && red_2 = mulLymm3_2;
assume red_2 = mulLymm3_2 && true;
smull mulH_3 red_3 ymm13_3 ymm0_3;
assert true && red_3 = mulLymm3_3;
assume red_3 = mulLymm3_3 && true;
smull mulH_4 red_4 ymm13_4 ymm0_4;
assert true && red_4 = mulLymm3_4;
assume red_4 = mulLymm3_4 && true;
smull mulH_5 red_5 ymm13_5 ymm0_5;
assert true && red_5 = mulLymm3_5;
assume red_5 = mulLymm3_5 && true;
smull mulH_6 red_6 ymm13_6 ymm0_6;
assert true && red_6 = mulLymm3_6;
assume red_6 = mulLymm3_6 && true;
smull mulH_7 red_7 ymm13_7 ymm0_7;
assert true && red_7 = mulLymm3_7;
assume red_7 = mulLymm3_7 && true;
smull mulH_8 red_8 ymm13_8 ymm0_8;
assert true && red_8 = mulLymm3_8;
assume red_8 = mulLymm3_8 && true;
smull mulH_9 red_9 ymm13_9 ymm0_9;
assert true && red_9 = mulLymm3_9;
assume red_9 = mulLymm3_9 && true;
smull mulH_a red_a ymm13_a ymm0_a;
assert true && red_a = mulLymm3_a;
assume red_a = mulLymm3_a && true;
smull mulH_b red_b ymm13_b ymm0_b;
assert true && red_b = mulLymm3_b;
assume red_b = mulLymm3_b && true;
smull mulH_c red_c ymm13_c ymm0_c;
assert true && red_c = mulLymm3_c;
assume red_c = mulLymm3_c && true;
smull mulH_d red_d ymm13_d ymm0_d;
assert true && red_d = mulLymm3_d;
assume red_d = mulLymm3_d && true;
smull mulH_e red_e ymm13_e ymm0_e;
assert true && red_e = mulLymm3_e;
assume red_e = mulLymm3_e && true;
smull mulH_f red_f ymm13_f ymm0_f;
assert true && red_f = mulLymm3_f;
assume red_f = mulLymm3_f && true;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpsubw %ymm13,%ymm3,%ymm3                       #! PC = 0x5555555596a5 *)
sub ymm3_0 ymm3_0 ymm13_0;
sub ymm3_1 ymm3_1 ymm13_1;
sub ymm3_2 ymm3_2 ymm13_2;
sub ymm3_3 ymm3_3 ymm13_3;
sub ymm3_4 ymm3_4 ymm13_4;
sub ymm3_5 ymm3_5 ymm13_5;
sub ymm3_6 ymm3_6 ymm13_6;
sub ymm3_7 ymm3_7 ymm13_7;
sub ymm3_8 ymm3_8 ymm13_8;
sub ymm3_9 ymm3_9 ymm13_9;
sub ymm3_a ymm3_a ymm13_a;
sub ymm3_b ymm3_b ymm13_b;
sub ymm3_c ymm3_c ymm13_c;
sub ymm3_d ymm3_d ymm13_d;
sub ymm3_e ymm3_e ymm13_e;
sub ymm3_f ymm3_f ymm13_f;
(* vmovdqa %ymm11,0x100(%rdi)                      #! EA = L0x7fffffffbc20; PC = 0x5555555596aa *)
mov L0x7fffffffbc20 ymm11_0;
mov L0x7fffffffbc22 ymm11_1;
mov L0x7fffffffbc24 ymm11_2;
mov L0x7fffffffbc26 ymm11_3;
mov L0x7fffffffbc28 ymm11_4;
mov L0x7fffffffbc2a ymm11_5;
mov L0x7fffffffbc2c ymm11_6;
mov L0x7fffffffbc2e ymm11_7;
mov L0x7fffffffbc30 ymm11_8;
mov L0x7fffffffbc32 ymm11_9;
mov L0x7fffffffbc34 ymm11_a;
mov L0x7fffffffbc36 ymm11_b;
mov L0x7fffffffbc38 ymm11_c;
mov L0x7fffffffbc3a ymm11_d;
mov L0x7fffffffbc3c ymm11_e;
mov L0x7fffffffbc3e ymm11_f;
(* vmovdqa %ymm3,0x120(%rdi)                       #! EA = L0x7fffffffbc40; PC = 0x5555555596b2 *)
mov L0x7fffffffbc40 ymm3_0;
mov L0x7fffffffbc42 ymm3_1;
mov L0x7fffffffbc44 ymm3_2;
mov L0x7fffffffbc46 ymm3_3;
mov L0x7fffffffbc48 ymm3_4;
mov L0x7fffffffbc4a ymm3_5;
mov L0x7fffffffbc4c ymm3_6;
mov L0x7fffffffbc4e ymm3_7;
mov L0x7fffffffbc50 ymm3_8;
mov L0x7fffffffbc52 ymm3_9;
mov L0x7fffffffbc54 ymm3_a;
mov L0x7fffffffbc56 ymm3_b;
mov L0x7fffffffbc58 ymm3_c;
mov L0x7fffffffbc5a ymm3_d;
mov L0x7fffffffbc5c ymm3_e;
mov L0x7fffffffbc5e ymm3_f;
(* vmovdqa %ymm7,0x140(%rdi)                       #! EA = L0x7fffffffbc60; PC = 0x5555555596ba *)
mov L0x7fffffffbc60 ymm7_0;
mov L0x7fffffffbc62 ymm7_1;
mov L0x7fffffffbc64 ymm7_2;
mov L0x7fffffffbc66 ymm7_3;
mov L0x7fffffffbc68 ymm7_4;
mov L0x7fffffffbc6a ymm7_5;
mov L0x7fffffffbc6c ymm7_6;
mov L0x7fffffffbc6e ymm7_7;
mov L0x7fffffffbc70 ymm7_8;
mov L0x7fffffffbc72 ymm7_9;
mov L0x7fffffffbc74 ymm7_a;
mov L0x7fffffffbc76 ymm7_b;
mov L0x7fffffffbc78 ymm7_c;
mov L0x7fffffffbc7a ymm7_d;
mov L0x7fffffffbc7c ymm7_e;
mov L0x7fffffffbc7e ymm7_f;
(* vmovdqa %ymm4,0x160(%rdi)                       #! EA = L0x7fffffffbc80; PC = 0x5555555596c2 *)
mov L0x7fffffffbc80 ymm4_0;
mov L0x7fffffffbc82 ymm4_1;
mov L0x7fffffffbc84 ymm4_2;
mov L0x7fffffffbc86 ymm4_3;
mov L0x7fffffffbc88 ymm4_4;
mov L0x7fffffffbc8a ymm4_5;
mov L0x7fffffffbc8c ymm4_6;
mov L0x7fffffffbc8e ymm4_7;
mov L0x7fffffffbc90 ymm4_8;
mov L0x7fffffffbc92 ymm4_9;
mov L0x7fffffffbc94 ymm4_a;
mov L0x7fffffffbc96 ymm4_b;
mov L0x7fffffffbc98 ymm4_c;
mov L0x7fffffffbc9a ymm4_d;
mov L0x7fffffffbc9c ymm4_e;
mov L0x7fffffffbc9e ymm4_f;
(* vmovdqa %ymm5,0x180(%rdi)                       #! EA = L0x7fffffffbca0; PC = 0x5555555596ca *)
mov L0x7fffffffbca0 ymm5_0;
mov L0x7fffffffbca2 ymm5_1;
mov L0x7fffffffbca4 ymm5_2;
mov L0x7fffffffbca6 ymm5_3;
mov L0x7fffffffbca8 ymm5_4;
mov L0x7fffffffbcaa ymm5_5;
mov L0x7fffffffbcac ymm5_6;
mov L0x7fffffffbcae ymm5_7;
mov L0x7fffffffbcb0 ymm5_8;
mov L0x7fffffffbcb2 ymm5_9;
mov L0x7fffffffbcb4 ymm5_a;
mov L0x7fffffffbcb6 ymm5_b;
mov L0x7fffffffbcb8 ymm5_c;
mov L0x7fffffffbcba ymm5_d;
mov L0x7fffffffbcbc ymm5_e;
mov L0x7fffffffbcbe ymm5_f;
(* vmovdqa %ymm9,0x1a0(%rdi)                       #! EA = L0x7fffffffbcc0; PC = 0x5555555596d2 *)
mov L0x7fffffffbcc0 ymm9_0;
mov L0x7fffffffbcc2 ymm9_1;
mov L0x7fffffffbcc4 ymm9_2;
mov L0x7fffffffbcc6 ymm9_3;
mov L0x7fffffffbcc8 ymm9_4;
mov L0x7fffffffbcca ymm9_5;
mov L0x7fffffffbccc ymm9_6;
mov L0x7fffffffbcce ymm9_7;
mov L0x7fffffffbcd0 ymm9_8;
mov L0x7fffffffbcd2 ymm9_9;
mov L0x7fffffffbcd4 ymm9_a;
mov L0x7fffffffbcd6 ymm9_b;
mov L0x7fffffffbcd8 ymm9_c;
mov L0x7fffffffbcda ymm9_d;
mov L0x7fffffffbcdc ymm9_e;
mov L0x7fffffffbcde ymm9_f;
(* vmovdqa %ymm6,0x1c0(%rdi)                       #! EA = L0x7fffffffbce0; PC = 0x5555555596da *)
mov L0x7fffffffbce0 ymm6_0;
mov L0x7fffffffbce2 ymm6_1;
mov L0x7fffffffbce4 ymm6_2;
mov L0x7fffffffbce6 ymm6_3;
mov L0x7fffffffbce8 ymm6_4;
mov L0x7fffffffbcea ymm6_5;
mov L0x7fffffffbcec ymm6_6;
mov L0x7fffffffbcee ymm6_7;
mov L0x7fffffffbcf0 ymm6_8;
mov L0x7fffffffbcf2 ymm6_9;
mov L0x7fffffffbcf4 ymm6_a;
mov L0x7fffffffbcf6 ymm6_b;
mov L0x7fffffffbcf8 ymm6_c;
mov L0x7fffffffbcfa ymm6_d;
mov L0x7fffffffbcfc ymm6_e;
mov L0x7fffffffbcfe ymm6_f;
(* vmovdqa %ymm10,0x1e0(%rdi)                      #! EA = L0x7fffffffbd00; PC = 0x5555555596e2 *)
mov L0x7fffffffbd00 ymm10_0;
mov L0x7fffffffbd02 ymm10_1;
mov L0x7fffffffbd04 ymm10_2;
mov L0x7fffffffbd06 ymm10_3;
mov L0x7fffffffbd08 ymm10_4;
mov L0x7fffffffbd0a ymm10_5;
mov L0x7fffffffbd0c ymm10_6;
mov L0x7fffffffbd0e ymm10_7;
mov L0x7fffffffbd10 ymm10_8;
mov L0x7fffffffbd12 ymm10_9;
mov L0x7fffffffbd14 ymm10_a;
mov L0x7fffffffbd16 ymm10_b;
mov L0x7fffffffbd18 ymm10_c;
mov L0x7fffffffbd1a ymm10_d;
mov L0x7fffffffbd1c ymm10_e;
mov L0x7fffffffbd1e ymm10_f;
(* vmovdqa (%rdi),%ymm4                            #! EA = L0x7fffffffbb20; Value = 0xf62fff2408960400; PC = 0x5555555596ea *)
mov ymm4_0 L0x7fffffffbb20;
mov ymm4_1 L0x7fffffffbb22;
mov ymm4_2 L0x7fffffffbb24;
mov ymm4_3 L0x7fffffffbb26;
mov ymm4_4 L0x7fffffffbb28;
mov ymm4_5 L0x7fffffffbb2a;
mov ymm4_6 L0x7fffffffbb2c;
mov ymm4_7 L0x7fffffffbb2e;
mov ymm4_8 L0x7fffffffbb30;
mov ymm4_9 L0x7fffffffbb32;
mov ymm4_a L0x7fffffffbb34;
mov ymm4_b L0x7fffffffbb36;
mov ymm4_c L0x7fffffffbb38;
mov ymm4_d L0x7fffffffbb3a;
mov ymm4_e L0x7fffffffbb3c;
mov ymm4_f L0x7fffffffbb3e;
(* vmovdqa 0x100(%rdi),%ymm8                       #! EA = L0x7fffffffbc20; Value = 0x0e320f8006a60a86; PC = 0x5555555596ee *)
mov ymm8_0 L0x7fffffffbc20;
mov ymm8_1 L0x7fffffffbc22;
mov ymm8_2 L0x7fffffffbc24;
mov ymm8_3 L0x7fffffffbc26;
mov ymm8_4 L0x7fffffffbc28;
mov ymm8_5 L0x7fffffffbc2a;
mov ymm8_6 L0x7fffffffbc2c;
mov ymm8_7 L0x7fffffffbc2e;
mov ymm8_8 L0x7fffffffbc30;
mov ymm8_9 L0x7fffffffbc32;
mov ymm8_a L0x7fffffffbc34;
mov ymm8_b L0x7fffffffbc36;
mov ymm8_c L0x7fffffffbc38;
mov ymm8_d L0x7fffffffbc3a;
mov ymm8_e L0x7fffffffbc3c;
mov ymm8_f L0x7fffffffbc3e;
(* vmovdqa 0x20(%rdi),%ymm5                        #! EA = L0x7fffffffbb40; Value = 0x0269f5910cda027d; PC = 0x5555555596f6 *)
mov ymm5_0 L0x7fffffffbb40;
mov ymm5_1 L0x7fffffffbb42;
mov ymm5_2 L0x7fffffffbb44;
mov ymm5_3 L0x7fffffffbb46;
mov ymm5_4 L0x7fffffffbb48;
mov ymm5_5 L0x7fffffffbb4a;
mov ymm5_6 L0x7fffffffbb4c;
mov ymm5_7 L0x7fffffffbb4e;
mov ymm5_8 L0x7fffffffbb50;
mov ymm5_9 L0x7fffffffbb52;
mov ymm5_a L0x7fffffffbb54;
mov ymm5_b L0x7fffffffbb56;
mov ymm5_c L0x7fffffffbb58;
mov ymm5_d L0x7fffffffbb5a;
mov ymm5_e L0x7fffffffbb5c;
mov ymm5_f L0x7fffffffbb5e;
(* vmovdqa 0x120(%rdi),%ymm9                       #! EA = L0x7fffffffbc40; Value = 0xf4560cc10b1c02f3; PC = 0x5555555596fb *)
mov ymm9_0 L0x7fffffffbc40;
mov ymm9_1 L0x7fffffffbc42;
mov ymm9_2 L0x7fffffffbc44;
mov ymm9_3 L0x7fffffffbc46;
mov ymm9_4 L0x7fffffffbc48;
mov ymm9_5 L0x7fffffffbc4a;
mov ymm9_6 L0x7fffffffbc4c;
mov ymm9_7 L0x7fffffffbc4e;
mov ymm9_8 L0x7fffffffbc50;
mov ymm9_9 L0x7fffffffbc52;
mov ymm9_a L0x7fffffffbc54;
mov ymm9_b L0x7fffffffbc56;
mov ymm9_c L0x7fffffffbc58;
mov ymm9_d L0x7fffffffbc5a;
mov ymm9_e L0x7fffffffbc5c;
mov ymm9_f L0x7fffffffbc5e;
(* vmovdqa 0x100(%rdx),%ymm1                       #! EA = L0x555555560800; Value = 0x70c170c170c170c1; PC = 0x555555559703 *)
mov ymm1_0 L0x555555560800;
mov ymm1_1 L0x555555560802;
mov ymm1_2 L0x555555560804;
mov ymm1_3 L0x555555560806;
mov ymm1_4 L0x555555560808;
mov ymm1_5 L0x55555556080a;
mov ymm1_6 L0x55555556080c;
mov ymm1_7 L0x55555556080e;
mov ymm1_8 L0x555555560810;
mov ymm1_9 L0x555555560812;
mov ymm1_a L0x555555560814;
mov ymm1_b L0x555555560816;
mov ymm1_c L0x555555560818;
mov ymm1_d L0x55555556081a;
mov ymm1_e L0x55555556081c;
mov ymm1_f L0x55555556081e;
(* vmovdqa 0x40(%rdi),%ymm6                        #! EA = L0x7fffffffbb60; Value = 0x12910210ffbefb8c; PC = 0x55555555970b *)
mov ymm6_0 L0x7fffffffbb60;
mov ymm6_1 L0x7fffffffbb62;
mov ymm6_2 L0x7fffffffbb64;
mov ymm6_3 L0x7fffffffbb66;
mov ymm6_4 L0x7fffffffbb68;
mov ymm6_5 L0x7fffffffbb6a;
mov ymm6_6 L0x7fffffffbb6c;
mov ymm6_7 L0x7fffffffbb6e;
mov ymm6_8 L0x7fffffffbb70;
mov ymm6_9 L0x7fffffffbb72;
mov ymm6_a L0x7fffffffbb74;
mov ymm6_b L0x7fffffffbb76;
mov ymm6_c L0x7fffffffbb78;
mov ymm6_d L0x7fffffffbb7a;
mov ymm6_e L0x7fffffffbb7c;
mov ymm6_f L0x7fffffffbb7e;
(* vmovdqa 0x140(%rdi),%ymm10                      #! EA = L0x7fffffffbc60; Value = 0xf9e907f3fd3406c9; PC = 0x555555559710 *)
mov ymm10_0 L0x7fffffffbc60;
mov ymm10_1 L0x7fffffffbc62;
mov ymm10_2 L0x7fffffffbc64;
mov ymm10_3 L0x7fffffffbc66;
mov ymm10_4 L0x7fffffffbc68;
mov ymm10_5 L0x7fffffffbc6a;
mov ymm10_6 L0x7fffffffbc6c;
mov ymm10_7 L0x7fffffffbc6e;
mov ymm10_8 L0x7fffffffbc70;
mov ymm10_9 L0x7fffffffbc72;
mov ymm10_a L0x7fffffffbc74;
mov ymm10_b L0x7fffffffbc76;
mov ymm10_c L0x7fffffffbc78;
mov ymm10_d L0x7fffffffbc7a;
mov ymm10_e L0x7fffffffbc7c;
mov ymm10_f L0x7fffffffbc7e;
(* vmovdqa 0x60(%rdi),%ymm7                        #! EA = L0x7fffffffbb80; Value = 0x0c3cfea911aafe9a; PC = 0x555555559718 *)
mov ymm7_0 L0x7fffffffbb80;
mov ymm7_1 L0x7fffffffbb82;
mov ymm7_2 L0x7fffffffbb84;
mov ymm7_3 L0x7fffffffbb86;
mov ymm7_4 L0x7fffffffbb88;
mov ymm7_5 L0x7fffffffbb8a;
mov ymm7_6 L0x7fffffffbb8c;
mov ymm7_7 L0x7fffffffbb8e;
mov ymm7_8 L0x7fffffffbb90;
mov ymm7_9 L0x7fffffffbb92;
mov ymm7_a L0x7fffffffbb94;
mov ymm7_b L0x7fffffffbb96;
mov ymm7_c L0x7fffffffbb98;
mov ymm7_d L0x7fffffffbb9a;
mov ymm7_e L0x7fffffffbb9c;
mov ymm7_f L0x7fffffffbb9e;
(* vmovdqa 0x160(%rdi),%ymm11                      #! EA = L0x7fffffffbc80; Value = 0xfff90dae0513f6ce; PC = 0x55555555971d *)
mov ymm11_0 L0x7fffffffbc80;
mov ymm11_1 L0x7fffffffbc82;
mov ymm11_2 L0x7fffffffbc84;
mov ymm11_3 L0x7fffffffbc86;
mov ymm11_4 L0x7fffffffbc88;
mov ymm11_5 L0x7fffffffbc8a;
mov ymm11_6 L0x7fffffffbc8c;
mov ymm11_7 L0x7fffffffbc8e;
mov ymm11_8 L0x7fffffffbc90;
mov ymm11_9 L0x7fffffffbc92;
mov ymm11_a L0x7fffffffbc94;
mov ymm11_b L0x7fffffffbc96;
mov ymm11_c L0x7fffffffbc98;
mov ymm11_d L0x7fffffffbc9a;
mov ymm11_e L0x7fffffffbc9c;
mov ymm11_f L0x7fffffffbc9e;
(* vmovdqa 0x120(%rdx),%ymm2                       #! EA = L0x555555560820; Value = 0x0ec10ec10ec10ec1; PC = 0x555555559725 *)
mov ymm2_0 L0x555555560820;
mov ymm2_1 L0x555555560822;
mov ymm2_2 L0x555555560824;
mov ymm2_3 L0x555555560826;
mov ymm2_4 L0x555555560828;
mov ymm2_5 L0x55555556082a;
mov ymm2_6 L0x55555556082c;
mov ymm2_7 L0x55555556082e;
mov ymm2_8 L0x555555560830;
mov ymm2_9 L0x555555560832;
mov ymm2_a L0x555555560834;
mov ymm2_b L0x555555560836;
mov ymm2_c L0x555555560838;
mov ymm2_d L0x55555556083a;
mov ymm2_e L0x55555556083c;
mov ymm2_f L0x55555556083e;
(* vpsubw %ymm4,%ymm8,%ymm12                       #! PC = 0x55555555972d *)
sub ymm12_0 ymm8_0 ymm4_0;
sub ymm12_1 ymm8_1 ymm4_1;
sub ymm12_2 ymm8_2 ymm4_2;
sub ymm12_3 ymm8_3 ymm4_3;
sub ymm12_4 ymm8_4 ymm4_4;
sub ymm12_5 ymm8_5 ymm4_5;
sub ymm12_6 ymm8_6 ymm4_6;
sub ymm12_7 ymm8_7 ymm4_7;
sub ymm12_8 ymm8_8 ymm4_8;
sub ymm12_9 ymm8_9 ymm4_9;
sub ymm12_a ymm8_a ymm4_a;
sub ymm12_b ymm8_b ymm4_b;
sub ymm12_c ymm8_c ymm4_c;
sub ymm12_d ymm8_d ymm4_d;
sub ymm12_e ymm8_e ymm4_e;
sub ymm12_f ymm8_f ymm4_f;
(* vpaddw %ymm8,%ymm4,%ymm4                        #! PC = 0x555555559731 *)
add ymm4_0 ymm4_0 ymm8_0;
add ymm4_1 ymm4_1 ymm8_1;
add ymm4_2 ymm4_2 ymm8_2;
add ymm4_3 ymm4_3 ymm8_3;
add ymm4_4 ymm4_4 ymm8_4;
add ymm4_5 ymm4_5 ymm8_5;
add ymm4_6 ymm4_6 ymm8_6;
add ymm4_7 ymm4_7 ymm8_7;
add ymm4_8 ymm4_8 ymm8_8;
add ymm4_9 ymm4_9 ymm8_9;
add ymm4_a ymm4_a ymm8_a;
add ymm4_b ymm4_b ymm8_b;
add ymm4_c ymm4_c ymm8_c;
add ymm4_d ymm4_d ymm8_d;
add ymm4_e ymm4_e ymm8_e;
add ymm4_f ymm4_f ymm8_f;
(* vpsubw %ymm5,%ymm9,%ymm13                       #! PC = 0x555555559736 *)
sub ymm13_0 ymm9_0 ymm5_0;
sub ymm13_1 ymm9_1 ymm5_1;
sub ymm13_2 ymm9_2 ymm5_2;
sub ymm13_3 ymm9_3 ymm5_3;
sub ymm13_4 ymm9_4 ymm5_4;
sub ymm13_5 ymm9_5 ymm5_5;
sub ymm13_6 ymm9_6 ymm5_6;
sub ymm13_7 ymm9_7 ymm5_7;
sub ymm13_8 ymm9_8 ymm5_8;
sub ymm13_9 ymm9_9 ymm5_9;
sub ymm13_a ymm9_a ymm5_a;
sub ymm13_b ymm9_b ymm5_b;
sub ymm13_c ymm9_c ymm5_c;
sub ymm13_d ymm9_d ymm5_d;
sub ymm13_e ymm9_e ymm5_e;
sub ymm13_f ymm9_f ymm5_f;
(* vpmullw %ymm1,%ymm12,%ymm8                      #! PC = 0x55555555973a *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpaddw %ymm9,%ymm5,%ymm5                        #! PC = 0x55555555973e *)
add ymm5_0 ymm5_0 ymm9_0;
add ymm5_1 ymm5_1 ymm9_1;
add ymm5_2 ymm5_2 ymm9_2;
add ymm5_3 ymm5_3 ymm9_3;
add ymm5_4 ymm5_4 ymm9_4;
add ymm5_5 ymm5_5 ymm9_5;
add ymm5_6 ymm5_6 ymm9_6;
add ymm5_7 ymm5_7 ymm9_7;
add ymm5_8 ymm5_8 ymm9_8;
add ymm5_9 ymm5_9 ymm9_9;
add ymm5_a ymm5_a ymm9_a;
add ymm5_b ymm5_b ymm9_b;
add ymm5_c ymm5_c ymm9_c;
add ymm5_d ymm5_d ymm9_d;
add ymm5_e ymm5_e ymm9_e;
add ymm5_f ymm5_f ymm9_f;
(* vpsubw %ymm6,%ymm10,%ymm14                      #! PC = 0x555555559743 *)
sub ymm14_0 ymm10_0 ymm6_0;
sub ymm14_1 ymm10_1 ymm6_1;
sub ymm14_2 ymm10_2 ymm6_2;
sub ymm14_3 ymm10_3 ymm6_3;
sub ymm14_4 ymm10_4 ymm6_4;
sub ymm14_5 ymm10_5 ymm6_5;
sub ymm14_6 ymm10_6 ymm6_6;
sub ymm14_7 ymm10_7 ymm6_7;
sub ymm14_8 ymm10_8 ymm6_8;
sub ymm14_9 ymm10_9 ymm6_9;
sub ymm14_a ymm10_a ymm6_a;
sub ymm14_b ymm10_b ymm6_b;
sub ymm14_c ymm10_c ymm6_c;
sub ymm14_d ymm10_d ymm6_d;
sub ymm14_e ymm10_e ymm6_e;
sub ymm14_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm13,%ymm9                      #! PC = 0x555555559747 *)
smull mulHymm13_0 mulL_0 ymm1_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm1_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm1_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm1_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm1_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm1_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm1_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm1_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm1_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm1_9 ymm13_9;
smull mulHymm13_a mulL_a ymm1_a ymm13_a;
smull mulHymm13_b mulL_b ymm1_b ymm13_b;
smull mulHymm13_c mulL_c ymm1_c ymm13_c;
smull mulHymm13_d mulL_d ymm1_d ymm13_d;
smull mulHymm13_e mulL_e ymm1_e ymm13_e;
smull mulHymm13_f mulL_f ymm1_f ymm13_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpaddw %ymm10,%ymm6,%ymm6                       #! PC = 0x55555555974b *)
add ymm6_0 ymm6_0 ymm10_0;
add ymm6_1 ymm6_1 ymm10_1;
add ymm6_2 ymm6_2 ymm10_2;
add ymm6_3 ymm6_3 ymm10_3;
add ymm6_4 ymm6_4 ymm10_4;
add ymm6_5 ymm6_5 ymm10_5;
add ymm6_6 ymm6_6 ymm10_6;
add ymm6_7 ymm6_7 ymm10_7;
add ymm6_8 ymm6_8 ymm10_8;
add ymm6_9 ymm6_9 ymm10_9;
add ymm6_a ymm6_a ymm10_a;
add ymm6_b ymm6_b ymm10_b;
add ymm6_c ymm6_c ymm10_c;
add ymm6_d ymm6_d ymm10_d;
add ymm6_e ymm6_e ymm10_e;
add ymm6_f ymm6_f ymm10_f;
(* vpsubw %ymm7,%ymm11,%ymm15                      #! PC = 0x555555559750 *)
sub ymm15_0 ymm11_0 ymm7_0;
sub ymm15_1 ymm11_1 ymm7_1;
sub ymm15_2 ymm11_2 ymm7_2;
sub ymm15_3 ymm11_3 ymm7_3;
sub ymm15_4 ymm11_4 ymm7_4;
sub ymm15_5 ymm11_5 ymm7_5;
sub ymm15_6 ymm11_6 ymm7_6;
sub ymm15_7 ymm11_7 ymm7_7;
sub ymm15_8 ymm11_8 ymm7_8;
sub ymm15_9 ymm11_9 ymm7_9;
sub ymm15_a ymm11_a ymm7_a;
sub ymm15_b ymm11_b ymm7_b;
sub ymm15_c ymm11_c ymm7_c;
sub ymm15_d ymm11_d ymm7_d;
sub ymm15_e ymm11_e ymm7_e;
sub ymm15_f ymm11_f ymm7_f;
(* vpmullw %ymm1,%ymm14,%ymm10                     #! PC = 0x555555559754 *)
smull mulHymm14_0 mulL_0 ymm1_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm1_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm1_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm1_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm1_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm1_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm1_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm1_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm1_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm1_9 ymm14_9;
smull mulHymm14_a mulL_a ymm1_a ymm14_a;
smull mulHymm14_b mulL_b ymm1_b ymm14_b;
smull mulHymm14_c mulL_c ymm1_c ymm14_c;
smull mulHymm14_d mulL_d ymm1_d ymm14_d;
smull mulHymm14_e mulL_e ymm1_e ymm14_e;
smull mulHymm14_f mulL_f ymm1_f ymm14_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpaddw %ymm11,%ymm7,%ymm7                       #! PC = 0x555555559758 *)
add ymm7_0 ymm7_0 ymm11_0;
add ymm7_1 ymm7_1 ymm11_1;
add ymm7_2 ymm7_2 ymm11_2;
add ymm7_3 ymm7_3 ymm11_3;
add ymm7_4 ymm7_4 ymm11_4;
add ymm7_5 ymm7_5 ymm11_5;
add ymm7_6 ymm7_6 ymm11_6;
add ymm7_7 ymm7_7 ymm11_7;
add ymm7_8 ymm7_8 ymm11_8;
add ymm7_9 ymm7_9 ymm11_9;
add ymm7_a ymm7_a ymm11_a;
add ymm7_b ymm7_b ymm11_b;
add ymm7_c ymm7_c ymm11_c;
add ymm7_d ymm7_d ymm11_d;
add ymm7_e ymm7_e ymm11_e;
add ymm7_f ymm7_f ymm11_f;
(* vpmullw %ymm1,%ymm15,%ymm11                     #! PC = 0x55555555975d *)
smull mulHymm15_0 mulL_0 ymm1_0 ymm15_0;
smull mulHymm15_1 mulL_1 ymm1_1 ymm15_1;
smull mulHymm15_2 mulL_2 ymm1_2 ymm15_2;
smull mulHymm15_3 mulL_3 ymm1_3 ymm15_3;
smull mulHymm15_4 mulL_4 ymm1_4 ymm15_4;
smull mulHymm15_5 mulL_5 ymm1_5 ymm15_5;
smull mulHymm15_6 mulL_6 ymm1_6 ymm15_6;
smull mulHymm15_7 mulL_7 ymm1_7 ymm15_7;
smull mulHymm15_8 mulL_8 ymm1_8 ymm15_8;
smull mulHymm15_9 mulL_9 ymm1_9 ymm15_9;
smull mulHymm15_a mulL_a ymm1_a ymm15_a;
smull mulHymm15_b mulL_b ymm1_b ymm15_b;
smull mulHymm15_c mulL_c ymm1_c ymm15_c;
smull mulHymm15_d mulL_d ymm1_d ymm15_d;
smull mulHymm15_e mulL_e ymm1_e ymm15_e;
smull mulHymm15_f mulL_f ymm1_f ymm15_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x555555559761 *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm2,%ymm13,%ymm13                     #! PC = 0x555555559765 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm2_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm2_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm2_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm2_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm2_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm2_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm2_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm2_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm2_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm2_9;
smull mulH_a mulLymm13_a ymm13_a ymm2_a;
smull mulH_b mulLymm13_b ymm13_b ymm2_b;
smull mulH_c mulLymm13_c ymm13_c ymm2_c;
smull mulH_d mulLymm13_d ymm13_d ymm2_d;
smull mulH_e mulLymm13_e ymm13_e ymm2_e;
smull mulH_f mulLymm13_f ymm13_f ymm2_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm2,%ymm14,%ymm14                     #! PC = 0x555555559769 *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm2_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm2_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm2_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm2_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm2_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm2_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm2_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm2_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm2_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm2_9;
smull mulH_a mulLymm14_a ymm14_a ymm2_a;
smull mulH_b mulLymm14_b ymm14_b ymm2_b;
smull mulH_c mulLymm14_c ymm14_c ymm2_c;
smull mulH_d mulLymm14_d ymm14_d ymm2_d;
smull mulH_e mulLymm14_e ymm14_e ymm2_e;
smull mulH_f mulLymm14_f ymm14_f ymm2_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm2,%ymm15,%ymm15                     #! PC = 0x55555555976d *)
smull mulH_0 mulLymm15_0 ymm15_0 ymm2_0;
smull mulH_1 mulLymm15_1 ymm15_1 ymm2_1;
smull mulH_2 mulLymm15_2 ymm15_2 ymm2_2;
smull mulH_3 mulLymm15_3 ymm15_3 ymm2_3;
smull mulH_4 mulLymm15_4 ymm15_4 ymm2_4;
smull mulH_5 mulLymm15_5 ymm15_5 ymm2_5;
smull mulH_6 mulLymm15_6 ymm15_6 ymm2_6;
smull mulH_7 mulLymm15_7 ymm15_7 ymm2_7;
smull mulH_8 mulLymm15_8 ymm15_8 ymm2_8;
smull mulH_9 mulLymm15_9 ymm15_9 ymm2_9;
smull mulH_a mulLymm15_a ymm15_a ymm2_a;
smull mulH_b mulLymm15_b ymm15_b ymm2_b;
smull mulH_c mulLymm15_c ymm15_c ymm2_c;
smull mulH_d mulLymm15_d ymm15_d ymm2_d;
smull mulH_e mulLymm15_e ymm15_e ymm2_e;
smull mulH_f mulLymm15_f ymm15_f ymm2_f;
mov ymm15_0 mulH_0;
mov ymm15_1 mulH_1;
mov ymm15_2 mulH_2;
mov ymm15_3 mulH_3;
mov ymm15_4 mulH_4;
mov ymm15_5 mulH_5;
mov ymm15_6 mulH_6;
mov ymm15_7 mulH_7;
mov ymm15_8 mulH_8;
mov ymm15_9 mulH_9;
mov ymm15_a mulH_a;
mov ymm15_b mulH_b;
mov ymm15_c mulH_c;
mov ymm15_d mulH_d;
mov ymm15_e mulH_e;
mov ymm15_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x555555559771 *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x555555559775 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x555555559779 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x55555555977d *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm15_0;
assume red_0 = mulLymm15_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm15_1;
assume red_1 = mulLymm15_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm15_2;
assume red_2 = mulLymm15_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm15_3;
assume red_3 = mulLymm15_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm15_4;
assume red_4 = mulLymm15_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm15_5;
assume red_5 = mulLymm15_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm15_6;
assume red_6 = mulLymm15_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm15_7;
assume red_7 = mulLymm15_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm15_8;
assume red_8 = mulLymm15_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm15_9;
assume red_9 = mulLymm15_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm15_a;
assume red_a = mulLymm15_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm15_b;
assume red_b = mulLymm15_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm15_c;
assume red_c = mulLymm15_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm15_d;
assume red_d = mulLymm15_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm15_e;
assume red_e = mulLymm15_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm15_f;
assume red_f = mulLymm15_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpsubw %ymm8,%ymm12,%ymm8                       #! PC = 0x555555559781 *)
sub ymm8_0 ymm12_0 ymm8_0;
sub ymm8_1 ymm12_1 ymm8_1;
sub ymm8_2 ymm12_2 ymm8_2;
sub ymm8_3 ymm12_3 ymm8_3;
sub ymm8_4 ymm12_4 ymm8_4;
sub ymm8_5 ymm12_5 ymm8_5;
sub ymm8_6 ymm12_6 ymm8_6;
sub ymm8_7 ymm12_7 ymm8_7;
sub ymm8_8 ymm12_8 ymm8_8;
sub ymm8_9 ymm12_9 ymm8_9;
sub ymm8_a ymm12_a ymm8_a;
sub ymm8_b ymm12_b ymm8_b;
sub ymm8_c ymm12_c ymm8_c;
sub ymm8_d ymm12_d ymm8_d;
sub ymm8_e ymm12_e ymm8_e;
sub ymm8_f ymm12_f ymm8_f;
(* vpsubw %ymm9,%ymm13,%ymm9                       #! PC = 0x555555559786 *)
sub ymm9_0 ymm13_0 ymm9_0;
sub ymm9_1 ymm13_1 ymm9_1;
sub ymm9_2 ymm13_2 ymm9_2;
sub ymm9_3 ymm13_3 ymm9_3;
sub ymm9_4 ymm13_4 ymm9_4;
sub ymm9_5 ymm13_5 ymm9_5;
sub ymm9_6 ymm13_6 ymm9_6;
sub ymm9_7 ymm13_7 ymm9_7;
sub ymm9_8 ymm13_8 ymm9_8;
sub ymm9_9 ymm13_9 ymm9_9;
sub ymm9_a ymm13_a ymm9_a;
sub ymm9_b ymm13_b ymm9_b;
sub ymm9_c ymm13_c ymm9_c;
sub ymm9_d ymm13_d ymm9_d;
sub ymm9_e ymm13_e ymm9_e;
sub ymm9_f ymm13_f ymm9_f;
(* vpsubw %ymm10,%ymm14,%ymm10                     #! PC = 0x55555555978b *)
sub ymm10_0 ymm14_0 ymm10_0;
sub ymm10_1 ymm14_1 ymm10_1;
sub ymm10_2 ymm14_2 ymm10_2;
sub ymm10_3 ymm14_3 ymm10_3;
sub ymm10_4 ymm14_4 ymm10_4;
sub ymm10_5 ymm14_5 ymm10_5;
sub ymm10_6 ymm14_6 ymm10_6;
sub ymm10_7 ymm14_7 ymm10_7;
sub ymm10_8 ymm14_8 ymm10_8;
sub ymm10_9 ymm14_9 ymm10_9;
sub ymm10_a ymm14_a ymm10_a;
sub ymm10_b ymm14_b ymm10_b;
sub ymm10_c ymm14_c ymm10_c;
sub ymm10_d ymm14_d ymm10_d;
sub ymm10_e ymm14_e ymm10_e;
sub ymm10_f ymm14_f ymm10_f;
(* vpsubw %ymm11,%ymm15,%ymm11                     #! PC = 0x555555559790 *)
sub ymm11_0 ymm15_0 ymm11_0;
sub ymm11_1 ymm15_1 ymm11_1;
sub ymm11_2 ymm15_2 ymm11_2;
sub ymm11_3 ymm15_3 ymm11_3;
sub ymm11_4 ymm15_4 ymm11_4;
sub ymm11_5 ymm15_5 ymm11_5;
sub ymm11_6 ymm15_6 ymm11_6;
sub ymm11_7 ymm15_7 ymm11_7;
sub ymm11_8 ymm15_8 ymm11_8;
sub ymm11_9 ymm15_9 ymm11_9;
sub ymm11_a ymm15_a ymm11_a;
sub ymm11_b ymm15_b ymm11_b;
sub ymm11_c ymm15_c ymm11_c;
sub ymm11_d ymm15_d ymm11_d;
sub ymm11_e ymm15_e ymm11_e;
sub ymm11_f ymm15_f ymm11_f;
(* vmovdqa %ymm4,(%rdi)                            #! EA = L0x7fffffffbb20; PC = 0x555555559795 *)
mov L0x7fffffffbb20 ymm4_0;
mov L0x7fffffffbb22 ymm4_1;
mov L0x7fffffffbb24 ymm4_2;
mov L0x7fffffffbb26 ymm4_3;
mov L0x7fffffffbb28 ymm4_4;
mov L0x7fffffffbb2a ymm4_5;
mov L0x7fffffffbb2c ymm4_6;
mov L0x7fffffffbb2e ymm4_7;
mov L0x7fffffffbb30 ymm4_8;
mov L0x7fffffffbb32 ymm4_9;
mov L0x7fffffffbb34 ymm4_a;
mov L0x7fffffffbb36 ymm4_b;
mov L0x7fffffffbb38 ymm4_c;
mov L0x7fffffffbb3a ymm4_d;
mov L0x7fffffffbb3c ymm4_e;
mov L0x7fffffffbb3e ymm4_f;
(* vmovdqa %ymm5,0x20(%rdi)                        #! EA = L0x7fffffffbb40; PC = 0x555555559799 *)
mov L0x7fffffffbb40 ymm5_0;
mov L0x7fffffffbb42 ymm5_1;
mov L0x7fffffffbb44 ymm5_2;
mov L0x7fffffffbb46 ymm5_3;
mov L0x7fffffffbb48 ymm5_4;
mov L0x7fffffffbb4a ymm5_5;
mov L0x7fffffffbb4c ymm5_6;
mov L0x7fffffffbb4e ymm5_7;
mov L0x7fffffffbb50 ymm5_8;
mov L0x7fffffffbb52 ymm5_9;
mov L0x7fffffffbb54 ymm5_a;
mov L0x7fffffffbb56 ymm5_b;
mov L0x7fffffffbb58 ymm5_c;
mov L0x7fffffffbb5a ymm5_d;
mov L0x7fffffffbb5c ymm5_e;
mov L0x7fffffffbb5e ymm5_f;
(* vmovdqa %ymm6,0x40(%rdi)                        #! EA = L0x7fffffffbb60; PC = 0x55555555979e *)
mov L0x7fffffffbb60 ymm6_0;
mov L0x7fffffffbb62 ymm6_1;
mov L0x7fffffffbb64 ymm6_2;
mov L0x7fffffffbb66 ymm6_3;
mov L0x7fffffffbb68 ymm6_4;
mov L0x7fffffffbb6a ymm6_5;
mov L0x7fffffffbb6c ymm6_6;
mov L0x7fffffffbb6e ymm6_7;
mov L0x7fffffffbb70 ymm6_8;
mov L0x7fffffffbb72 ymm6_9;
mov L0x7fffffffbb74 ymm6_a;
mov L0x7fffffffbb76 ymm6_b;
mov L0x7fffffffbb78 ymm6_c;
mov L0x7fffffffbb7a ymm6_d;
mov L0x7fffffffbb7c ymm6_e;
mov L0x7fffffffbb7e ymm6_f;
(* vmovdqa %ymm7,0x60(%rdi)                        #! EA = L0x7fffffffbb80; PC = 0x5555555597a3 *)
mov L0x7fffffffbb80 ymm7_0;
mov L0x7fffffffbb82 ymm7_1;
mov L0x7fffffffbb84 ymm7_2;
mov L0x7fffffffbb86 ymm7_3;
mov L0x7fffffffbb88 ymm7_4;
mov L0x7fffffffbb8a ymm7_5;
mov L0x7fffffffbb8c ymm7_6;
mov L0x7fffffffbb8e ymm7_7;
mov L0x7fffffffbb90 ymm7_8;
mov L0x7fffffffbb92 ymm7_9;
mov L0x7fffffffbb94 ymm7_a;
mov L0x7fffffffbb96 ymm7_b;
mov L0x7fffffffbb98 ymm7_c;
mov L0x7fffffffbb9a ymm7_d;
mov L0x7fffffffbb9c ymm7_e;
mov L0x7fffffffbb9e ymm7_f;
(* vmovdqa %ymm8,0x100(%rdi)                       #! EA = L0x7fffffffbc20; PC = 0x5555555597a8 *)
mov L0x7fffffffbc20 ymm8_0;
mov L0x7fffffffbc22 ymm8_1;
mov L0x7fffffffbc24 ymm8_2;
mov L0x7fffffffbc26 ymm8_3;
mov L0x7fffffffbc28 ymm8_4;
mov L0x7fffffffbc2a ymm8_5;
mov L0x7fffffffbc2c ymm8_6;
mov L0x7fffffffbc2e ymm8_7;
mov L0x7fffffffbc30 ymm8_8;
mov L0x7fffffffbc32 ymm8_9;
mov L0x7fffffffbc34 ymm8_a;
mov L0x7fffffffbc36 ymm8_b;
mov L0x7fffffffbc38 ymm8_c;
mov L0x7fffffffbc3a ymm8_d;
mov L0x7fffffffbc3c ymm8_e;
mov L0x7fffffffbc3e ymm8_f;
(* vmovdqa %ymm9,0x120(%rdi)                       #! EA = L0x7fffffffbc40; PC = 0x5555555597b0 *)
mov L0x7fffffffbc40 ymm9_0;
mov L0x7fffffffbc42 ymm9_1;
mov L0x7fffffffbc44 ymm9_2;
mov L0x7fffffffbc46 ymm9_3;
mov L0x7fffffffbc48 ymm9_4;
mov L0x7fffffffbc4a ymm9_5;
mov L0x7fffffffbc4c ymm9_6;
mov L0x7fffffffbc4e ymm9_7;
mov L0x7fffffffbc50 ymm9_8;
mov L0x7fffffffbc52 ymm9_9;
mov L0x7fffffffbc54 ymm9_a;
mov L0x7fffffffbc56 ymm9_b;
mov L0x7fffffffbc58 ymm9_c;
mov L0x7fffffffbc5a ymm9_d;
mov L0x7fffffffbc5c ymm9_e;
mov L0x7fffffffbc5e ymm9_f;
(* vmovdqa %ymm10,0x140(%rdi)                      #! EA = L0x7fffffffbc60; PC = 0x5555555597b8 *)
mov L0x7fffffffbc60 ymm10_0;
mov L0x7fffffffbc62 ymm10_1;
mov L0x7fffffffbc64 ymm10_2;
mov L0x7fffffffbc66 ymm10_3;
mov L0x7fffffffbc68 ymm10_4;
mov L0x7fffffffbc6a ymm10_5;
mov L0x7fffffffbc6c ymm10_6;
mov L0x7fffffffbc6e ymm10_7;
mov L0x7fffffffbc70 ymm10_8;
mov L0x7fffffffbc72 ymm10_9;
mov L0x7fffffffbc74 ymm10_a;
mov L0x7fffffffbc76 ymm10_b;
mov L0x7fffffffbc78 ymm10_c;
mov L0x7fffffffbc7a ymm10_d;
mov L0x7fffffffbc7c ymm10_e;
mov L0x7fffffffbc7e ymm10_f;
(* vmovdqa %ymm11,0x160(%rdi)                      #! EA = L0x7fffffffbc80; PC = 0x5555555597c0 *)
mov L0x7fffffffbc80 ymm11_0;
mov L0x7fffffffbc82 ymm11_1;
mov L0x7fffffffbc84 ymm11_2;
mov L0x7fffffffbc86 ymm11_3;
mov L0x7fffffffbc88 ymm11_4;
mov L0x7fffffffbc8a ymm11_5;
mov L0x7fffffffbc8c ymm11_6;
mov L0x7fffffffbc8e ymm11_7;
mov L0x7fffffffbc90 ymm11_8;
mov L0x7fffffffbc92 ymm11_9;
mov L0x7fffffffbc94 ymm11_a;
mov L0x7fffffffbc96 ymm11_b;
mov L0x7fffffffbc98 ymm11_c;
mov L0x7fffffffbc9a ymm11_d;
mov L0x7fffffffbc9c ymm11_e;
mov L0x7fffffffbc9e ymm11_f;
(* vmovdqa 0x80(%rdi),%ymm4                        #! EA = L0x7fffffffbba0; Value = 0x03a8f8ed05be069f; PC = 0x5555555597c8 *)
mov ymm4_0 L0x7fffffffbba0;
mov ymm4_1 L0x7fffffffbba2;
mov ymm4_2 L0x7fffffffbba4;
mov ymm4_3 L0x7fffffffbba6;
mov ymm4_4 L0x7fffffffbba8;
mov ymm4_5 L0x7fffffffbbaa;
mov ymm4_6 L0x7fffffffbbac;
mov ymm4_7 L0x7fffffffbbae;
mov ymm4_8 L0x7fffffffbbb0;
mov ymm4_9 L0x7fffffffbbb2;
mov ymm4_a L0x7fffffffbbb4;
mov ymm4_b L0x7fffffffbbb6;
mov ymm4_c L0x7fffffffbbb8;
mov ymm4_d L0x7fffffffbbba;
mov ymm4_e L0x7fffffffbbbc;
mov ymm4_f L0x7fffffffbbbe;
(* vmovdqa 0x180(%rdi),%ymm8                       #! EA = L0x7fffffffbca0; Value = 0x01e3f8520e33f236; PC = 0x5555555597d0 *)
mov ymm8_0 L0x7fffffffbca0;
mov ymm8_1 L0x7fffffffbca2;
mov ymm8_2 L0x7fffffffbca4;
mov ymm8_3 L0x7fffffffbca6;
mov ymm8_4 L0x7fffffffbca8;
mov ymm8_5 L0x7fffffffbcaa;
mov ymm8_6 L0x7fffffffbcac;
mov ymm8_7 L0x7fffffffbcae;
mov ymm8_8 L0x7fffffffbcb0;
mov ymm8_9 L0x7fffffffbcb2;
mov ymm8_a L0x7fffffffbcb4;
mov ymm8_b L0x7fffffffbcb6;
mov ymm8_c L0x7fffffffbcb8;
mov ymm8_d L0x7fffffffbcba;
mov ymm8_e L0x7fffffffbcbc;
mov ymm8_f L0x7fffffffbcbe;
(* vmovdqa 0xa0(%rdi),%ymm5                        #! EA = L0x7fffffffbbc0; Value = 0x046603060891f24d; PC = 0x5555555597d8 *)
mov ymm5_0 L0x7fffffffbbc0;
mov ymm5_1 L0x7fffffffbbc2;
mov ymm5_2 L0x7fffffffbbc4;
mov ymm5_3 L0x7fffffffbbc6;
mov ymm5_4 L0x7fffffffbbc8;
mov ymm5_5 L0x7fffffffbbca;
mov ymm5_6 L0x7fffffffbbcc;
mov ymm5_7 L0x7fffffffbbce;
mov ymm5_8 L0x7fffffffbbd0;
mov ymm5_9 L0x7fffffffbbd2;
mov ymm5_a L0x7fffffffbbd4;
mov ymm5_b L0x7fffffffbbd6;
mov ymm5_c L0x7fffffffbbd8;
mov ymm5_d L0x7fffffffbbda;
mov ymm5_e L0x7fffffffbbdc;
mov ymm5_f L0x7fffffffbbde;
(* vmovdqa 0x1a0(%rdi),%ymm9                       #! EA = L0x7fffffffbcc0; Value = 0x0a8bf13203f506cc; PC = 0x5555555597e0 *)
mov ymm9_0 L0x7fffffffbcc0;
mov ymm9_1 L0x7fffffffbcc2;
mov ymm9_2 L0x7fffffffbcc4;
mov ymm9_3 L0x7fffffffbcc6;
mov ymm9_4 L0x7fffffffbcc8;
mov ymm9_5 L0x7fffffffbcca;
mov ymm9_6 L0x7fffffffbccc;
mov ymm9_7 L0x7fffffffbcce;
mov ymm9_8 L0x7fffffffbcd0;
mov ymm9_9 L0x7fffffffbcd2;
mov ymm9_a L0x7fffffffbcd4;
mov ymm9_b L0x7fffffffbcd6;
mov ymm9_c L0x7fffffffbcd8;
mov ymm9_d L0x7fffffffbcda;
mov ymm9_e L0x7fffffffbcdc;
mov ymm9_f L0x7fffffffbcde;
(* vmovdqa 0x100(%rdx),%ymm1                       #! EA = L0x555555560800; Value = 0x70c170c170c170c1; PC = 0x5555555597e8 *)
mov ymm1_0 L0x555555560800;
mov ymm1_1 L0x555555560802;
mov ymm1_2 L0x555555560804;
mov ymm1_3 L0x555555560806;
mov ymm1_4 L0x555555560808;
mov ymm1_5 L0x55555556080a;
mov ymm1_6 L0x55555556080c;
mov ymm1_7 L0x55555556080e;
mov ymm1_8 L0x555555560810;
mov ymm1_9 L0x555555560812;
mov ymm1_a L0x555555560814;
mov ymm1_b L0x555555560816;
mov ymm1_c L0x555555560818;
mov ymm1_d L0x55555556081a;
mov ymm1_e L0x55555556081c;
mov ymm1_f L0x55555556081e;
(* vmovdqa 0xc0(%rdi),%ymm6                        #! EA = L0x7fffffffbbe0; Value = 0xfde40884fd110188; PC = 0x5555555597f0 *)
mov ymm6_0 L0x7fffffffbbe0;
mov ymm6_1 L0x7fffffffbbe2;
mov ymm6_2 L0x7fffffffbbe4;
mov ymm6_3 L0x7fffffffbbe6;
mov ymm6_4 L0x7fffffffbbe8;
mov ymm6_5 L0x7fffffffbbea;
mov ymm6_6 L0x7fffffffbbec;
mov ymm6_7 L0x7fffffffbbee;
mov ymm6_8 L0x7fffffffbbf0;
mov ymm6_9 L0x7fffffffbbf2;
mov ymm6_a L0x7fffffffbbf4;
mov ymm6_b L0x7fffffffbbf6;
mov ymm6_c L0x7fffffffbbf8;
mov ymm6_d L0x7fffffffbbfa;
mov ymm6_e L0x7fffffffbbfc;
mov ymm6_f L0x7fffffffbbfe;
(* vmovdqa 0x1c0(%rdi),%ymm10                      #! EA = L0x7fffffffbce0; Value = 0x0746fba6f32b0770; PC = 0x5555555597f8 *)
mov ymm10_0 L0x7fffffffbce0;
mov ymm10_1 L0x7fffffffbce2;
mov ymm10_2 L0x7fffffffbce4;
mov ymm10_3 L0x7fffffffbce6;
mov ymm10_4 L0x7fffffffbce8;
mov ymm10_5 L0x7fffffffbcea;
mov ymm10_6 L0x7fffffffbcec;
mov ymm10_7 L0x7fffffffbcee;
mov ymm10_8 L0x7fffffffbcf0;
mov ymm10_9 L0x7fffffffbcf2;
mov ymm10_a L0x7fffffffbcf4;
mov ymm10_b L0x7fffffffbcf6;
mov ymm10_c L0x7fffffffbcf8;
mov ymm10_d L0x7fffffffbcfa;
mov ymm10_e L0x7fffffffbcfc;
mov ymm10_f L0x7fffffffbcfe;
(* vmovdqa 0xe0(%rdi),%ymm7                        #! EA = L0x7fffffffbc00; Value = 0xfb8ef41305ccf251; PC = 0x555555559800 *)
mov ymm7_0 L0x7fffffffbc00;
mov ymm7_1 L0x7fffffffbc02;
mov ymm7_2 L0x7fffffffbc04;
mov ymm7_3 L0x7fffffffbc06;
mov ymm7_4 L0x7fffffffbc08;
mov ymm7_5 L0x7fffffffbc0a;
mov ymm7_6 L0x7fffffffbc0c;
mov ymm7_7 L0x7fffffffbc0e;
mov ymm7_8 L0x7fffffffbc10;
mov ymm7_9 L0x7fffffffbc12;
mov ymm7_a L0x7fffffffbc14;
mov ymm7_b L0x7fffffffbc16;
mov ymm7_c L0x7fffffffbc18;
mov ymm7_d L0x7fffffffbc1a;
mov ymm7_e L0x7fffffffbc1c;
mov ymm7_f L0x7fffffffbc1e;
(* vmovdqa 0x1e0(%rdi),%ymm11                      #! EA = L0x7fffffffbd00; Value = 0x00d3013e04b70a52; PC = 0x555555559808 *)
mov ymm11_0 L0x7fffffffbd00;
mov ymm11_1 L0x7fffffffbd02;
mov ymm11_2 L0x7fffffffbd04;
mov ymm11_3 L0x7fffffffbd06;
mov ymm11_4 L0x7fffffffbd08;
mov ymm11_5 L0x7fffffffbd0a;
mov ymm11_6 L0x7fffffffbd0c;
mov ymm11_7 L0x7fffffffbd0e;
mov ymm11_8 L0x7fffffffbd10;
mov ymm11_9 L0x7fffffffbd12;
mov ymm11_a L0x7fffffffbd14;
mov ymm11_b L0x7fffffffbd16;
mov ymm11_c L0x7fffffffbd18;
mov ymm11_d L0x7fffffffbd1a;
mov ymm11_e L0x7fffffffbd1c;
mov ymm11_f L0x7fffffffbd1e;
(* vmovdqa 0x120(%rdx),%ymm2                       #! EA = L0x555555560820; Value = 0x0ec10ec10ec10ec1; PC = 0x555555559810 *)
mov ymm2_0 L0x555555560820;
mov ymm2_1 L0x555555560822;
mov ymm2_2 L0x555555560824;
mov ymm2_3 L0x555555560826;
mov ymm2_4 L0x555555560828;
mov ymm2_5 L0x55555556082a;
mov ymm2_6 L0x55555556082c;
mov ymm2_7 L0x55555556082e;
mov ymm2_8 L0x555555560830;
mov ymm2_9 L0x555555560832;
mov ymm2_a L0x555555560834;
mov ymm2_b L0x555555560836;
mov ymm2_c L0x555555560838;
mov ymm2_d L0x55555556083a;
mov ymm2_e L0x55555556083c;
mov ymm2_f L0x55555556083e;
(* vpsubw %ymm4,%ymm8,%ymm12                       #! PC = 0x555555559818 *)
sub ymm12_0 ymm8_0 ymm4_0;
sub ymm12_1 ymm8_1 ymm4_1;
sub ymm12_2 ymm8_2 ymm4_2;
sub ymm12_3 ymm8_3 ymm4_3;
sub ymm12_4 ymm8_4 ymm4_4;
sub ymm12_5 ymm8_5 ymm4_5;
sub ymm12_6 ymm8_6 ymm4_6;
sub ymm12_7 ymm8_7 ymm4_7;
sub ymm12_8 ymm8_8 ymm4_8;
sub ymm12_9 ymm8_9 ymm4_9;
sub ymm12_a ymm8_a ymm4_a;
sub ymm12_b ymm8_b ymm4_b;
sub ymm12_c ymm8_c ymm4_c;
sub ymm12_d ymm8_d ymm4_d;
sub ymm12_e ymm8_e ymm4_e;
sub ymm12_f ymm8_f ymm4_f;
(* vpaddw %ymm8,%ymm4,%ymm4                        #! PC = 0x55555555981c *)
add ymm4_0 ymm4_0 ymm8_0;
add ymm4_1 ymm4_1 ymm8_1;
add ymm4_2 ymm4_2 ymm8_2;
add ymm4_3 ymm4_3 ymm8_3;
add ymm4_4 ymm4_4 ymm8_4;
add ymm4_5 ymm4_5 ymm8_5;
add ymm4_6 ymm4_6 ymm8_6;
add ymm4_7 ymm4_7 ymm8_7;
add ymm4_8 ymm4_8 ymm8_8;
add ymm4_9 ymm4_9 ymm8_9;
add ymm4_a ymm4_a ymm8_a;
add ymm4_b ymm4_b ymm8_b;
add ymm4_c ymm4_c ymm8_c;
add ymm4_d ymm4_d ymm8_d;
add ymm4_e ymm4_e ymm8_e;
add ymm4_f ymm4_f ymm8_f;
(* vpsubw %ymm5,%ymm9,%ymm13                       #! PC = 0x555555559821 *)
sub ymm13_0 ymm9_0 ymm5_0;
sub ymm13_1 ymm9_1 ymm5_1;
sub ymm13_2 ymm9_2 ymm5_2;
sub ymm13_3 ymm9_3 ymm5_3;
sub ymm13_4 ymm9_4 ymm5_4;
sub ymm13_5 ymm9_5 ymm5_5;
sub ymm13_6 ymm9_6 ymm5_6;
sub ymm13_7 ymm9_7 ymm5_7;
sub ymm13_8 ymm9_8 ymm5_8;
sub ymm13_9 ymm9_9 ymm5_9;
sub ymm13_a ymm9_a ymm5_a;
sub ymm13_b ymm9_b ymm5_b;
sub ymm13_c ymm9_c ymm5_c;
sub ymm13_d ymm9_d ymm5_d;
sub ymm13_e ymm9_e ymm5_e;
sub ymm13_f ymm9_f ymm5_f;
(* vpmullw %ymm1,%ymm12,%ymm8                      #! PC = 0x555555559825 *)
smull mulHymm12_0 mulL_0 ymm1_0 ymm12_0;
smull mulHymm12_1 mulL_1 ymm1_1 ymm12_1;
smull mulHymm12_2 mulL_2 ymm1_2 ymm12_2;
smull mulHymm12_3 mulL_3 ymm1_3 ymm12_3;
smull mulHymm12_4 mulL_4 ymm1_4 ymm12_4;
smull mulHymm12_5 mulL_5 ymm1_5 ymm12_5;
smull mulHymm12_6 mulL_6 ymm1_6 ymm12_6;
smull mulHymm12_7 mulL_7 ymm1_7 ymm12_7;
smull mulHymm12_8 mulL_8 ymm1_8 ymm12_8;
smull mulHymm12_9 mulL_9 ymm1_9 ymm12_9;
smull mulHymm12_a mulL_a ymm1_a ymm12_a;
smull mulHymm12_b mulL_b ymm1_b ymm12_b;
smull mulHymm12_c mulL_c ymm1_c ymm12_c;
smull mulHymm12_d mulL_d ymm1_d ymm12_d;
smull mulHymm12_e mulL_e ymm1_e ymm12_e;
smull mulHymm12_f mulL_f ymm1_f ymm12_f;
cast ymm8_0@sint16 mulL_0;
cast ymm8_1@sint16 mulL_1;
cast ymm8_2@sint16 mulL_2;
cast ymm8_3@sint16 mulL_3;
cast ymm8_4@sint16 mulL_4;
cast ymm8_5@sint16 mulL_5;
cast ymm8_6@sint16 mulL_6;
cast ymm8_7@sint16 mulL_7;
cast ymm8_8@sint16 mulL_8;
cast ymm8_9@sint16 mulL_9;
cast ymm8_a@sint16 mulL_a;
cast ymm8_b@sint16 mulL_b;
cast ymm8_c@sint16 mulL_c;
cast ymm8_d@sint16 mulL_d;
cast ymm8_e@sint16 mulL_e;
cast ymm8_f@sint16 mulL_f;
(* vpaddw %ymm9,%ymm5,%ymm5                        #! PC = 0x555555559829 *)
add ymm5_0 ymm5_0 ymm9_0;
add ymm5_1 ymm5_1 ymm9_1;
add ymm5_2 ymm5_2 ymm9_2;
add ymm5_3 ymm5_3 ymm9_3;
add ymm5_4 ymm5_4 ymm9_4;
add ymm5_5 ymm5_5 ymm9_5;
add ymm5_6 ymm5_6 ymm9_6;
add ymm5_7 ymm5_7 ymm9_7;
add ymm5_8 ymm5_8 ymm9_8;
add ymm5_9 ymm5_9 ymm9_9;
add ymm5_a ymm5_a ymm9_a;
add ymm5_b ymm5_b ymm9_b;
add ymm5_c ymm5_c ymm9_c;
add ymm5_d ymm5_d ymm9_d;
add ymm5_e ymm5_e ymm9_e;
add ymm5_f ymm5_f ymm9_f;
(* vpsubw %ymm6,%ymm10,%ymm14                      #! PC = 0x55555555982e *)
sub ymm14_0 ymm10_0 ymm6_0;
sub ymm14_1 ymm10_1 ymm6_1;
sub ymm14_2 ymm10_2 ymm6_2;
sub ymm14_3 ymm10_3 ymm6_3;
sub ymm14_4 ymm10_4 ymm6_4;
sub ymm14_5 ymm10_5 ymm6_5;
sub ymm14_6 ymm10_6 ymm6_6;
sub ymm14_7 ymm10_7 ymm6_7;
sub ymm14_8 ymm10_8 ymm6_8;
sub ymm14_9 ymm10_9 ymm6_9;
sub ymm14_a ymm10_a ymm6_a;
sub ymm14_b ymm10_b ymm6_b;
sub ymm14_c ymm10_c ymm6_c;
sub ymm14_d ymm10_d ymm6_d;
sub ymm14_e ymm10_e ymm6_e;
sub ymm14_f ymm10_f ymm6_f;
(* vpmullw %ymm1,%ymm13,%ymm9                      #! PC = 0x555555559832 *)
smull mulHymm13_0 mulL_0 ymm1_0 ymm13_0;
smull mulHymm13_1 mulL_1 ymm1_1 ymm13_1;
smull mulHymm13_2 mulL_2 ymm1_2 ymm13_2;
smull mulHymm13_3 mulL_3 ymm1_3 ymm13_3;
smull mulHymm13_4 mulL_4 ymm1_4 ymm13_4;
smull mulHymm13_5 mulL_5 ymm1_5 ymm13_5;
smull mulHymm13_6 mulL_6 ymm1_6 ymm13_6;
smull mulHymm13_7 mulL_7 ymm1_7 ymm13_7;
smull mulHymm13_8 mulL_8 ymm1_8 ymm13_8;
smull mulHymm13_9 mulL_9 ymm1_9 ymm13_9;
smull mulHymm13_a mulL_a ymm1_a ymm13_a;
smull mulHymm13_b mulL_b ymm1_b ymm13_b;
smull mulHymm13_c mulL_c ymm1_c ymm13_c;
smull mulHymm13_d mulL_d ymm1_d ymm13_d;
smull mulHymm13_e mulL_e ymm1_e ymm13_e;
smull mulHymm13_f mulL_f ymm1_f ymm13_f;
cast ymm9_0@sint16 mulL_0;
cast ymm9_1@sint16 mulL_1;
cast ymm9_2@sint16 mulL_2;
cast ymm9_3@sint16 mulL_3;
cast ymm9_4@sint16 mulL_4;
cast ymm9_5@sint16 mulL_5;
cast ymm9_6@sint16 mulL_6;
cast ymm9_7@sint16 mulL_7;
cast ymm9_8@sint16 mulL_8;
cast ymm9_9@sint16 mulL_9;
cast ymm9_a@sint16 mulL_a;
cast ymm9_b@sint16 mulL_b;
cast ymm9_c@sint16 mulL_c;
cast ymm9_d@sint16 mulL_d;
cast ymm9_e@sint16 mulL_e;
cast ymm9_f@sint16 mulL_f;
(* vpaddw %ymm10,%ymm6,%ymm6                       #! PC = 0x555555559836 *)
add ymm6_0 ymm6_0 ymm10_0;
add ymm6_1 ymm6_1 ymm10_1;
add ymm6_2 ymm6_2 ymm10_2;
add ymm6_3 ymm6_3 ymm10_3;
add ymm6_4 ymm6_4 ymm10_4;
add ymm6_5 ymm6_5 ymm10_5;
add ymm6_6 ymm6_6 ymm10_6;
add ymm6_7 ymm6_7 ymm10_7;
add ymm6_8 ymm6_8 ymm10_8;
add ymm6_9 ymm6_9 ymm10_9;
add ymm6_a ymm6_a ymm10_a;
add ymm6_b ymm6_b ymm10_b;
add ymm6_c ymm6_c ymm10_c;
add ymm6_d ymm6_d ymm10_d;
add ymm6_e ymm6_e ymm10_e;
add ymm6_f ymm6_f ymm10_f;
(* vpsubw %ymm7,%ymm11,%ymm15                      #! PC = 0x55555555983b *)
sub ymm15_0 ymm11_0 ymm7_0;
sub ymm15_1 ymm11_1 ymm7_1;
sub ymm15_2 ymm11_2 ymm7_2;
sub ymm15_3 ymm11_3 ymm7_3;
sub ymm15_4 ymm11_4 ymm7_4;
sub ymm15_5 ymm11_5 ymm7_5;
sub ymm15_6 ymm11_6 ymm7_6;
sub ymm15_7 ymm11_7 ymm7_7;
sub ymm15_8 ymm11_8 ymm7_8;
sub ymm15_9 ymm11_9 ymm7_9;
sub ymm15_a ymm11_a ymm7_a;
sub ymm15_b ymm11_b ymm7_b;
sub ymm15_c ymm11_c ymm7_c;
sub ymm15_d ymm11_d ymm7_d;
sub ymm15_e ymm11_e ymm7_e;
sub ymm15_f ymm11_f ymm7_f;
(* vpmullw %ymm1,%ymm14,%ymm10                     #! PC = 0x55555555983f *)
smull mulHymm14_0 mulL_0 ymm1_0 ymm14_0;
smull mulHymm14_1 mulL_1 ymm1_1 ymm14_1;
smull mulHymm14_2 mulL_2 ymm1_2 ymm14_2;
smull mulHymm14_3 mulL_3 ymm1_3 ymm14_3;
smull mulHymm14_4 mulL_4 ymm1_4 ymm14_4;
smull mulHymm14_5 mulL_5 ymm1_5 ymm14_5;
smull mulHymm14_6 mulL_6 ymm1_6 ymm14_6;
smull mulHymm14_7 mulL_7 ymm1_7 ymm14_7;
smull mulHymm14_8 mulL_8 ymm1_8 ymm14_8;
smull mulHymm14_9 mulL_9 ymm1_9 ymm14_9;
smull mulHymm14_a mulL_a ymm1_a ymm14_a;
smull mulHymm14_b mulL_b ymm1_b ymm14_b;
smull mulHymm14_c mulL_c ymm1_c ymm14_c;
smull mulHymm14_d mulL_d ymm1_d ymm14_d;
smull mulHymm14_e mulL_e ymm1_e ymm14_e;
smull mulHymm14_f mulL_f ymm1_f ymm14_f;
cast ymm10_0@sint16 mulL_0;
cast ymm10_1@sint16 mulL_1;
cast ymm10_2@sint16 mulL_2;
cast ymm10_3@sint16 mulL_3;
cast ymm10_4@sint16 mulL_4;
cast ymm10_5@sint16 mulL_5;
cast ymm10_6@sint16 mulL_6;
cast ymm10_7@sint16 mulL_7;
cast ymm10_8@sint16 mulL_8;
cast ymm10_9@sint16 mulL_9;
cast ymm10_a@sint16 mulL_a;
cast ymm10_b@sint16 mulL_b;
cast ymm10_c@sint16 mulL_c;
cast ymm10_d@sint16 mulL_d;
cast ymm10_e@sint16 mulL_e;
cast ymm10_f@sint16 mulL_f;
(* vpaddw %ymm11,%ymm7,%ymm7                       #! PC = 0x555555559843 *)
add ymm7_0 ymm7_0 ymm11_0;
add ymm7_1 ymm7_1 ymm11_1;
add ymm7_2 ymm7_2 ymm11_2;
add ymm7_3 ymm7_3 ymm11_3;
add ymm7_4 ymm7_4 ymm11_4;
add ymm7_5 ymm7_5 ymm11_5;
add ymm7_6 ymm7_6 ymm11_6;
add ymm7_7 ymm7_7 ymm11_7;
add ymm7_8 ymm7_8 ymm11_8;
add ymm7_9 ymm7_9 ymm11_9;
add ymm7_a ymm7_a ymm11_a;
add ymm7_b ymm7_b ymm11_b;
add ymm7_c ymm7_c ymm11_c;
add ymm7_d ymm7_d ymm11_d;
add ymm7_e ymm7_e ymm11_e;
add ymm7_f ymm7_f ymm11_f;
(* vpmullw %ymm1,%ymm15,%ymm11                     #! PC = 0x555555559848 *)
smull mulHymm15_0 mulL_0 ymm1_0 ymm15_0;
smull mulHymm15_1 mulL_1 ymm1_1 ymm15_1;
smull mulHymm15_2 mulL_2 ymm1_2 ymm15_2;
smull mulHymm15_3 mulL_3 ymm1_3 ymm15_3;
smull mulHymm15_4 mulL_4 ymm1_4 ymm15_4;
smull mulHymm15_5 mulL_5 ymm1_5 ymm15_5;
smull mulHymm15_6 mulL_6 ymm1_6 ymm15_6;
smull mulHymm15_7 mulL_7 ymm1_7 ymm15_7;
smull mulHymm15_8 mulL_8 ymm1_8 ymm15_8;
smull mulHymm15_9 mulL_9 ymm1_9 ymm15_9;
smull mulHymm15_a mulL_a ymm1_a ymm15_a;
smull mulHymm15_b mulL_b ymm1_b ymm15_b;
smull mulHymm15_c mulL_c ymm1_c ymm15_c;
smull mulHymm15_d mulL_d ymm1_d ymm15_d;
smull mulHymm15_e mulL_e ymm1_e ymm15_e;
smull mulHymm15_f mulL_f ymm1_f ymm15_f;
cast ymm11_0@sint16 mulL_0;
cast ymm11_1@sint16 mulL_1;
cast ymm11_2@sint16 mulL_2;
cast ymm11_3@sint16 mulL_3;
cast ymm11_4@sint16 mulL_4;
cast ymm11_5@sint16 mulL_5;
cast ymm11_6@sint16 mulL_6;
cast ymm11_7@sint16 mulL_7;
cast ymm11_8@sint16 mulL_8;
cast ymm11_9@sint16 mulL_9;
cast ymm11_a@sint16 mulL_a;
cast ymm11_b@sint16 mulL_b;
cast ymm11_c@sint16 mulL_c;
cast ymm11_d@sint16 mulL_d;
cast ymm11_e@sint16 mulL_e;
cast ymm11_f@sint16 mulL_f;
(* vpmulhw %ymm2,%ymm12,%ymm12                     #! PC = 0x55555555984c *)
smull mulH_0 mulLymm12_0 ymm12_0 ymm2_0;
smull mulH_1 mulLymm12_1 ymm12_1 ymm2_1;
smull mulH_2 mulLymm12_2 ymm12_2 ymm2_2;
smull mulH_3 mulLymm12_3 ymm12_3 ymm2_3;
smull mulH_4 mulLymm12_4 ymm12_4 ymm2_4;
smull mulH_5 mulLymm12_5 ymm12_5 ymm2_5;
smull mulH_6 mulLymm12_6 ymm12_6 ymm2_6;
smull mulH_7 mulLymm12_7 ymm12_7 ymm2_7;
smull mulH_8 mulLymm12_8 ymm12_8 ymm2_8;
smull mulH_9 mulLymm12_9 ymm12_9 ymm2_9;
smull mulH_a mulLymm12_a ymm12_a ymm2_a;
smull mulH_b mulLymm12_b ymm12_b ymm2_b;
smull mulH_c mulLymm12_c ymm12_c ymm2_c;
smull mulH_d mulLymm12_d ymm12_d ymm2_d;
smull mulH_e mulLymm12_e ymm12_e ymm2_e;
smull mulH_f mulLymm12_f ymm12_f ymm2_f;
mov ymm12_0 mulH_0;
mov ymm12_1 mulH_1;
mov ymm12_2 mulH_2;
mov ymm12_3 mulH_3;
mov ymm12_4 mulH_4;
mov ymm12_5 mulH_5;
mov ymm12_6 mulH_6;
mov ymm12_7 mulH_7;
mov ymm12_8 mulH_8;
mov ymm12_9 mulH_9;
mov ymm12_a mulH_a;
mov ymm12_b mulH_b;
mov ymm12_c mulH_c;
mov ymm12_d mulH_d;
mov ymm12_e mulH_e;
mov ymm12_f mulH_f;
(* vpmulhw %ymm2,%ymm13,%ymm13                     #! PC = 0x555555559850 *)
smull mulH_0 mulLymm13_0 ymm13_0 ymm2_0;
smull mulH_1 mulLymm13_1 ymm13_1 ymm2_1;
smull mulH_2 mulLymm13_2 ymm13_2 ymm2_2;
smull mulH_3 mulLymm13_3 ymm13_3 ymm2_3;
smull mulH_4 mulLymm13_4 ymm13_4 ymm2_4;
smull mulH_5 mulLymm13_5 ymm13_5 ymm2_5;
smull mulH_6 mulLymm13_6 ymm13_6 ymm2_6;
smull mulH_7 mulLymm13_7 ymm13_7 ymm2_7;
smull mulH_8 mulLymm13_8 ymm13_8 ymm2_8;
smull mulH_9 mulLymm13_9 ymm13_9 ymm2_9;
smull mulH_a mulLymm13_a ymm13_a ymm2_a;
smull mulH_b mulLymm13_b ymm13_b ymm2_b;
smull mulH_c mulLymm13_c ymm13_c ymm2_c;
smull mulH_d mulLymm13_d ymm13_d ymm2_d;
smull mulH_e mulLymm13_e ymm13_e ymm2_e;
smull mulH_f mulLymm13_f ymm13_f ymm2_f;
mov ymm13_0 mulH_0;
mov ymm13_1 mulH_1;
mov ymm13_2 mulH_2;
mov ymm13_3 mulH_3;
mov ymm13_4 mulH_4;
mov ymm13_5 mulH_5;
mov ymm13_6 mulH_6;
mov ymm13_7 mulH_7;
mov ymm13_8 mulH_8;
mov ymm13_9 mulH_9;
mov ymm13_a mulH_a;
mov ymm13_b mulH_b;
mov ymm13_c mulH_c;
mov ymm13_d mulH_d;
mov ymm13_e mulH_e;
mov ymm13_f mulH_f;
(* vpmulhw %ymm2,%ymm14,%ymm14                     #! PC = 0x555555559854 *)
smull mulH_0 mulLymm14_0 ymm14_0 ymm2_0;
smull mulH_1 mulLymm14_1 ymm14_1 ymm2_1;
smull mulH_2 mulLymm14_2 ymm14_2 ymm2_2;
smull mulH_3 mulLymm14_3 ymm14_3 ymm2_3;
smull mulH_4 mulLymm14_4 ymm14_4 ymm2_4;
smull mulH_5 mulLymm14_5 ymm14_5 ymm2_5;
smull mulH_6 mulLymm14_6 ymm14_6 ymm2_6;
smull mulH_7 mulLymm14_7 ymm14_7 ymm2_7;
smull mulH_8 mulLymm14_8 ymm14_8 ymm2_8;
smull mulH_9 mulLymm14_9 ymm14_9 ymm2_9;
smull mulH_a mulLymm14_a ymm14_a ymm2_a;
smull mulH_b mulLymm14_b ymm14_b ymm2_b;
smull mulH_c mulLymm14_c ymm14_c ymm2_c;
smull mulH_d mulLymm14_d ymm14_d ymm2_d;
smull mulH_e mulLymm14_e ymm14_e ymm2_e;
smull mulH_f mulLymm14_f ymm14_f ymm2_f;
mov ymm14_0 mulH_0;
mov ymm14_1 mulH_1;
mov ymm14_2 mulH_2;
mov ymm14_3 mulH_3;
mov ymm14_4 mulH_4;
mov ymm14_5 mulH_5;
mov ymm14_6 mulH_6;
mov ymm14_7 mulH_7;
mov ymm14_8 mulH_8;
mov ymm14_9 mulH_9;
mov ymm14_a mulH_a;
mov ymm14_b mulH_b;
mov ymm14_c mulH_c;
mov ymm14_d mulH_d;
mov ymm14_e mulH_e;
mov ymm14_f mulH_f;
(* vpmulhw %ymm2,%ymm15,%ymm15                     #! PC = 0x555555559858 *)
smull mulH_0 mulLymm15_0 ymm15_0 ymm2_0;
smull mulH_1 mulLymm15_1 ymm15_1 ymm2_1;
smull mulH_2 mulLymm15_2 ymm15_2 ymm2_2;
smull mulH_3 mulLymm15_3 ymm15_3 ymm2_3;
smull mulH_4 mulLymm15_4 ymm15_4 ymm2_4;
smull mulH_5 mulLymm15_5 ymm15_5 ymm2_5;
smull mulH_6 mulLymm15_6 ymm15_6 ymm2_6;
smull mulH_7 mulLymm15_7 ymm15_7 ymm2_7;
smull mulH_8 mulLymm15_8 ymm15_8 ymm2_8;
smull mulH_9 mulLymm15_9 ymm15_9 ymm2_9;
smull mulH_a mulLymm15_a ymm15_a ymm2_a;
smull mulH_b mulLymm15_b ymm15_b ymm2_b;
smull mulH_c mulLymm15_c ymm15_c ymm2_c;
smull mulH_d mulLymm15_d ymm15_d ymm2_d;
smull mulH_e mulLymm15_e ymm15_e ymm2_e;
smull mulH_f mulLymm15_f ymm15_f ymm2_f;
mov ymm15_0 mulH_0;
mov ymm15_1 mulH_1;
mov ymm15_2 mulH_2;
mov ymm15_3 mulH_3;
mov ymm15_4 mulH_4;
mov ymm15_5 mulH_5;
mov ymm15_6 mulH_6;
mov ymm15_7 mulH_7;
mov ymm15_8 mulH_8;
mov ymm15_9 mulH_9;
mov ymm15_a mulH_a;
mov ymm15_b mulH_b;
mov ymm15_c mulH_c;
mov ymm15_d mulH_d;
mov ymm15_e mulH_e;
mov ymm15_f mulH_f;
(* vpmulhw %ymm0,%ymm8,%ymm8                       #! PC = 0x55555555985c *)
smull mulH_0 red_0 ymm8_0 ymm0_0;
assert true && red_0 = mulLymm12_0;
assume red_0 = mulLymm12_0 && true;
smull mulH_1 red_1 ymm8_1 ymm0_1;
assert true && red_1 = mulLymm12_1;
assume red_1 = mulLymm12_1 && true;
smull mulH_2 red_2 ymm8_2 ymm0_2;
assert true && red_2 = mulLymm12_2;
assume red_2 = mulLymm12_2 && true;
smull mulH_3 red_3 ymm8_3 ymm0_3;
assert true && red_3 = mulLymm12_3;
assume red_3 = mulLymm12_3 && true;
smull mulH_4 red_4 ymm8_4 ymm0_4;
assert true && red_4 = mulLymm12_4;
assume red_4 = mulLymm12_4 && true;
smull mulH_5 red_5 ymm8_5 ymm0_5;
assert true && red_5 = mulLymm12_5;
assume red_5 = mulLymm12_5 && true;
smull mulH_6 red_6 ymm8_6 ymm0_6;
assert true && red_6 = mulLymm12_6;
assume red_6 = mulLymm12_6 && true;
smull mulH_7 red_7 ymm8_7 ymm0_7;
assert true && red_7 = mulLymm12_7;
assume red_7 = mulLymm12_7 && true;
smull mulH_8 red_8 ymm8_8 ymm0_8;
assert true && red_8 = mulLymm12_8;
assume red_8 = mulLymm12_8 && true;
smull mulH_9 red_9 ymm8_9 ymm0_9;
assert true && red_9 = mulLymm12_9;
assume red_9 = mulLymm12_9 && true;
smull mulH_a red_a ymm8_a ymm0_a;
assert true && red_a = mulLymm12_a;
assume red_a = mulLymm12_a && true;
smull mulH_b red_b ymm8_b ymm0_b;
assert true && red_b = mulLymm12_b;
assume red_b = mulLymm12_b && true;
smull mulH_c red_c ymm8_c ymm0_c;
assert true && red_c = mulLymm12_c;
assume red_c = mulLymm12_c && true;
smull mulH_d red_d ymm8_d ymm0_d;
assert true && red_d = mulLymm12_d;
assume red_d = mulLymm12_d && true;
smull mulH_e red_e ymm8_e ymm0_e;
assert true && red_e = mulLymm12_e;
assume red_e = mulLymm12_e && true;
smull mulH_f red_f ymm8_f ymm0_f;
assert true && red_f = mulLymm12_f;
assume red_f = mulLymm12_f && true;
mov ymm8_0 mulH_0;
mov ymm8_1 mulH_1;
mov ymm8_2 mulH_2;
mov ymm8_3 mulH_3;
mov ymm8_4 mulH_4;
mov ymm8_5 mulH_5;
mov ymm8_6 mulH_6;
mov ymm8_7 mulH_7;
mov ymm8_8 mulH_8;
mov ymm8_9 mulH_9;
mov ymm8_a mulH_a;
mov ymm8_b mulH_b;
mov ymm8_c mulH_c;
mov ymm8_d mulH_d;
mov ymm8_e mulH_e;
mov ymm8_f mulH_f;
(* vpmulhw %ymm0,%ymm9,%ymm9                       #! PC = 0x555555559860 *)
smull mulH_0 red_0 ymm9_0 ymm0_0;
assert true && red_0 = mulLymm13_0;
assume red_0 = mulLymm13_0 && true;
smull mulH_1 red_1 ymm9_1 ymm0_1;
assert true && red_1 = mulLymm13_1;
assume red_1 = mulLymm13_1 && true;
smull mulH_2 red_2 ymm9_2 ymm0_2;
assert true && red_2 = mulLymm13_2;
assume red_2 = mulLymm13_2 && true;
smull mulH_3 red_3 ymm9_3 ymm0_3;
assert true && red_3 = mulLymm13_3;
assume red_3 = mulLymm13_3 && true;
smull mulH_4 red_4 ymm9_4 ymm0_4;
assert true && red_4 = mulLymm13_4;
assume red_4 = mulLymm13_4 && true;
smull mulH_5 red_5 ymm9_5 ymm0_5;
assert true && red_5 = mulLymm13_5;
assume red_5 = mulLymm13_5 && true;
smull mulH_6 red_6 ymm9_6 ymm0_6;
assert true && red_6 = mulLymm13_6;
assume red_6 = mulLymm13_6 && true;
smull mulH_7 red_7 ymm9_7 ymm0_7;
assert true && red_7 = mulLymm13_7;
assume red_7 = mulLymm13_7 && true;
smull mulH_8 red_8 ymm9_8 ymm0_8;
assert true && red_8 = mulLymm13_8;
assume red_8 = mulLymm13_8 && true;
smull mulH_9 red_9 ymm9_9 ymm0_9;
assert true && red_9 = mulLymm13_9;
assume red_9 = mulLymm13_9 && true;
smull mulH_a red_a ymm9_a ymm0_a;
assert true && red_a = mulLymm13_a;
assume red_a = mulLymm13_a && true;
smull mulH_b red_b ymm9_b ymm0_b;
assert true && red_b = mulLymm13_b;
assume red_b = mulLymm13_b && true;
smull mulH_c red_c ymm9_c ymm0_c;
assert true && red_c = mulLymm13_c;
assume red_c = mulLymm13_c && true;
smull mulH_d red_d ymm9_d ymm0_d;
assert true && red_d = mulLymm13_d;
assume red_d = mulLymm13_d && true;
smull mulH_e red_e ymm9_e ymm0_e;
assert true && red_e = mulLymm13_e;
assume red_e = mulLymm13_e && true;
smull mulH_f red_f ymm9_f ymm0_f;
assert true && red_f = mulLymm13_f;
assume red_f = mulLymm13_f && true;
mov ymm9_0 mulH_0;
mov ymm9_1 mulH_1;
mov ymm9_2 mulH_2;
mov ymm9_3 mulH_3;
mov ymm9_4 mulH_4;
mov ymm9_5 mulH_5;
mov ymm9_6 mulH_6;
mov ymm9_7 mulH_7;
mov ymm9_8 mulH_8;
mov ymm9_9 mulH_9;
mov ymm9_a mulH_a;
mov ymm9_b mulH_b;
mov ymm9_c mulH_c;
mov ymm9_d mulH_d;
mov ymm9_e mulH_e;
mov ymm9_f mulH_f;
(* vpmulhw %ymm0,%ymm10,%ymm10                     #! PC = 0x555555559864 *)
smull mulH_0 red_0 ymm10_0 ymm0_0;
assert true && red_0 = mulLymm14_0;
assume red_0 = mulLymm14_0 && true;
smull mulH_1 red_1 ymm10_1 ymm0_1;
assert true && red_1 = mulLymm14_1;
assume red_1 = mulLymm14_1 && true;
smull mulH_2 red_2 ymm10_2 ymm0_2;
assert true && red_2 = mulLymm14_2;
assume red_2 = mulLymm14_2 && true;
smull mulH_3 red_3 ymm10_3 ymm0_3;
assert true && red_3 = mulLymm14_3;
assume red_3 = mulLymm14_3 && true;
smull mulH_4 red_4 ymm10_4 ymm0_4;
assert true && red_4 = mulLymm14_4;
assume red_4 = mulLymm14_4 && true;
smull mulH_5 red_5 ymm10_5 ymm0_5;
assert true && red_5 = mulLymm14_5;
assume red_5 = mulLymm14_5 && true;
smull mulH_6 red_6 ymm10_6 ymm0_6;
assert true && red_6 = mulLymm14_6;
assume red_6 = mulLymm14_6 && true;
smull mulH_7 red_7 ymm10_7 ymm0_7;
assert true && red_7 = mulLymm14_7;
assume red_7 = mulLymm14_7 && true;
smull mulH_8 red_8 ymm10_8 ymm0_8;
assert true && red_8 = mulLymm14_8;
assume red_8 = mulLymm14_8 && true;
smull mulH_9 red_9 ymm10_9 ymm0_9;
assert true && red_9 = mulLymm14_9;
assume red_9 = mulLymm14_9 && true;
smull mulH_a red_a ymm10_a ymm0_a;
assert true && red_a = mulLymm14_a;
assume red_a = mulLymm14_a && true;
smull mulH_b red_b ymm10_b ymm0_b;
assert true && red_b = mulLymm14_b;
assume red_b = mulLymm14_b && true;
smull mulH_c red_c ymm10_c ymm0_c;
assert true && red_c = mulLymm14_c;
assume red_c = mulLymm14_c && true;
smull mulH_d red_d ymm10_d ymm0_d;
assert true && red_d = mulLymm14_d;
assume red_d = mulLymm14_d && true;
smull mulH_e red_e ymm10_e ymm0_e;
assert true && red_e = mulLymm14_e;
assume red_e = mulLymm14_e && true;
smull mulH_f red_f ymm10_f ymm0_f;
assert true && red_f = mulLymm14_f;
assume red_f = mulLymm14_f && true;
mov ymm10_0 mulH_0;
mov ymm10_1 mulH_1;
mov ymm10_2 mulH_2;
mov ymm10_3 mulH_3;
mov ymm10_4 mulH_4;
mov ymm10_5 mulH_5;
mov ymm10_6 mulH_6;
mov ymm10_7 mulH_7;
mov ymm10_8 mulH_8;
mov ymm10_9 mulH_9;
mov ymm10_a mulH_a;
mov ymm10_b mulH_b;
mov ymm10_c mulH_c;
mov ymm10_d mulH_d;
mov ymm10_e mulH_e;
mov ymm10_f mulH_f;
(* vpmulhw %ymm0,%ymm11,%ymm11                     #! PC = 0x555555559868 *)
smull mulH_0 red_0 ymm11_0 ymm0_0;
assert true && red_0 = mulLymm15_0;
assume red_0 = mulLymm15_0 && true;
smull mulH_1 red_1 ymm11_1 ymm0_1;
assert true && red_1 = mulLymm15_1;
assume red_1 = mulLymm15_1 && true;
smull mulH_2 red_2 ymm11_2 ymm0_2;
assert true && red_2 = mulLymm15_2;
assume red_2 = mulLymm15_2 && true;
smull mulH_3 red_3 ymm11_3 ymm0_3;
assert true && red_3 = mulLymm15_3;
assume red_3 = mulLymm15_3 && true;
smull mulH_4 red_4 ymm11_4 ymm0_4;
assert true && red_4 = mulLymm15_4;
assume red_4 = mulLymm15_4 && true;
smull mulH_5 red_5 ymm11_5 ymm0_5;
assert true && red_5 = mulLymm15_5;
assume red_5 = mulLymm15_5 && true;
smull mulH_6 red_6 ymm11_6 ymm0_6;
assert true && red_6 = mulLymm15_6;
assume red_6 = mulLymm15_6 && true;
smull mulH_7 red_7 ymm11_7 ymm0_7;
assert true && red_7 = mulLymm15_7;
assume red_7 = mulLymm15_7 && true;
smull mulH_8 red_8 ymm11_8 ymm0_8;
assert true && red_8 = mulLymm15_8;
assume red_8 = mulLymm15_8 && true;
smull mulH_9 red_9 ymm11_9 ymm0_9;
assert true && red_9 = mulLymm15_9;
assume red_9 = mulLymm15_9 && true;
smull mulH_a red_a ymm11_a ymm0_a;
assert true && red_a = mulLymm15_a;
assume red_a = mulLymm15_a && true;
smull mulH_b red_b ymm11_b ymm0_b;
assert true && red_b = mulLymm15_b;
assume red_b = mulLymm15_b && true;
smull mulH_c red_c ymm11_c ymm0_c;
assert true && red_c = mulLymm15_c;
assume red_c = mulLymm15_c && true;
smull mulH_d red_d ymm11_d ymm0_d;
assert true && red_d = mulLymm15_d;
assume red_d = mulLymm15_d && true;
smull mulH_e red_e ymm11_e ymm0_e;
assert true && red_e = mulLymm15_e;
assume red_e = mulLymm15_e && true;
smull mulH_f red_f ymm11_f ymm0_f;
assert true && red_f = mulLymm15_f;
assume red_f = mulLymm15_f && true;
mov ymm11_0 mulH_0;
mov ymm11_1 mulH_1;
mov ymm11_2 mulH_2;
mov ymm11_3 mulH_3;
mov ymm11_4 mulH_4;
mov ymm11_5 mulH_5;
mov ymm11_6 mulH_6;
mov ymm11_7 mulH_7;
mov ymm11_8 mulH_8;
mov ymm11_9 mulH_9;
mov ymm11_a mulH_a;
mov ymm11_b mulH_b;
mov ymm11_c mulH_c;
mov ymm11_d mulH_d;
mov ymm11_e mulH_e;
mov ymm11_f mulH_f;
(* vpsubw %ymm8,%ymm12,%ymm8                       #! PC = 0x55555555986c *)
sub ymm8_0 ymm12_0 ymm8_0;
sub ymm8_1 ymm12_1 ymm8_1;
sub ymm8_2 ymm12_2 ymm8_2;
sub ymm8_3 ymm12_3 ymm8_3;
sub ymm8_4 ymm12_4 ymm8_4;
sub ymm8_5 ymm12_5 ymm8_5;
sub ymm8_6 ymm12_6 ymm8_6;
sub ymm8_7 ymm12_7 ymm8_7;
sub ymm8_8 ymm12_8 ymm8_8;
sub ymm8_9 ymm12_9 ymm8_9;
sub ymm8_a ymm12_a ymm8_a;
sub ymm8_b ymm12_b ymm8_b;
sub ymm8_c ymm12_c ymm8_c;
sub ymm8_d ymm12_d ymm8_d;
sub ymm8_e ymm12_e ymm8_e;
sub ymm8_f ymm12_f ymm8_f;
(* vpsubw %ymm9,%ymm13,%ymm9                       #! PC = 0x555555559871 *)
sub ymm9_0 ymm13_0 ymm9_0;
sub ymm9_1 ymm13_1 ymm9_1;
sub ymm9_2 ymm13_2 ymm9_2;
sub ymm9_3 ymm13_3 ymm9_3;
sub ymm9_4 ymm13_4 ymm9_4;
sub ymm9_5 ymm13_5 ymm9_5;
sub ymm9_6 ymm13_6 ymm9_6;
sub ymm9_7 ymm13_7 ymm9_7;
sub ymm9_8 ymm13_8 ymm9_8;
sub ymm9_9 ymm13_9 ymm9_9;
sub ymm9_a ymm13_a ymm9_a;
sub ymm9_b ymm13_b ymm9_b;
sub ymm9_c ymm13_c ymm9_c;
sub ymm9_d ymm13_d ymm9_d;
sub ymm9_e ymm13_e ymm9_e;
sub ymm9_f ymm13_f ymm9_f;
(* vpsubw %ymm10,%ymm14,%ymm10                     #! PC = 0x555555559876 *)
sub ymm10_0 ymm14_0 ymm10_0;
sub ymm10_1 ymm14_1 ymm10_1;
sub ymm10_2 ymm14_2 ymm10_2;
sub ymm10_3 ymm14_3 ymm10_3;
sub ymm10_4 ymm14_4 ymm10_4;
sub ymm10_5 ymm14_5 ymm10_5;
sub ymm10_6 ymm14_6 ymm10_6;
sub ymm10_7 ymm14_7 ymm10_7;
sub ymm10_8 ymm14_8 ymm10_8;
sub ymm10_9 ymm14_9 ymm10_9;
sub ymm10_a ymm14_a ymm10_a;
sub ymm10_b ymm14_b ymm10_b;
sub ymm10_c ymm14_c ymm10_c;
sub ymm10_d ymm14_d ymm10_d;
sub ymm10_e ymm14_e ymm10_e;
sub ymm10_f ymm14_f ymm10_f;
(* vpsubw %ymm11,%ymm15,%ymm11                     #! PC = 0x55555555987b *)
sub ymm11_0 ymm15_0 ymm11_0;
sub ymm11_1 ymm15_1 ymm11_1;
sub ymm11_2 ymm15_2 ymm11_2;
sub ymm11_3 ymm15_3 ymm11_3;
sub ymm11_4 ymm15_4 ymm11_4;
sub ymm11_5 ymm15_5 ymm11_5;
sub ymm11_6 ymm15_6 ymm11_6;
sub ymm11_7 ymm15_7 ymm11_7;
sub ymm11_8 ymm15_8 ymm11_8;
sub ymm11_9 ymm15_9 ymm11_9;
sub ymm11_a ymm15_a ymm11_a;
sub ymm11_b ymm15_b ymm11_b;
sub ymm11_c ymm15_c ymm11_c;
sub ymm11_d ymm15_d ymm11_d;
sub ymm11_e ymm15_e ymm11_e;
sub ymm11_f ymm15_f ymm11_f;
(* vmovdqa %ymm4,0x80(%rdi)                        #! EA = L0x7fffffffbba0; PC = 0x555555559880 *)
mov L0x7fffffffbba0 ymm4_0;
mov L0x7fffffffbba2 ymm4_1;
mov L0x7fffffffbba4 ymm4_2;
mov L0x7fffffffbba6 ymm4_3;
mov L0x7fffffffbba8 ymm4_4;
mov L0x7fffffffbbaa ymm4_5;
mov L0x7fffffffbbac ymm4_6;
mov L0x7fffffffbbae ymm4_7;
mov L0x7fffffffbbb0 ymm4_8;
mov L0x7fffffffbbb2 ymm4_9;
mov L0x7fffffffbbb4 ymm4_a;
mov L0x7fffffffbbb6 ymm4_b;
mov L0x7fffffffbbb8 ymm4_c;
mov L0x7fffffffbbba ymm4_d;
mov L0x7fffffffbbbc ymm4_e;
mov L0x7fffffffbbbe ymm4_f;
(* vmovdqa %ymm5,0xa0(%rdi)                        #! EA = L0x7fffffffbbc0; PC = 0x555555559888 *)
mov L0x7fffffffbbc0 ymm5_0;
mov L0x7fffffffbbc2 ymm5_1;
mov L0x7fffffffbbc4 ymm5_2;
mov L0x7fffffffbbc6 ymm5_3;
mov L0x7fffffffbbc8 ymm5_4;
mov L0x7fffffffbbca ymm5_5;
mov L0x7fffffffbbcc ymm5_6;
mov L0x7fffffffbbce ymm5_7;
mov L0x7fffffffbbd0 ymm5_8;
mov L0x7fffffffbbd2 ymm5_9;
mov L0x7fffffffbbd4 ymm5_a;
mov L0x7fffffffbbd6 ymm5_b;
mov L0x7fffffffbbd8 ymm5_c;
mov L0x7fffffffbbda ymm5_d;
mov L0x7fffffffbbdc ymm5_e;
mov L0x7fffffffbbde ymm5_f;
(* vmovdqa %ymm6,0xc0(%rdi)                        #! EA = L0x7fffffffbbe0; PC = 0x555555559890 *)
mov L0x7fffffffbbe0 ymm6_0;
mov L0x7fffffffbbe2 ymm6_1;
mov L0x7fffffffbbe4 ymm6_2;
mov L0x7fffffffbbe6 ymm6_3;
mov L0x7fffffffbbe8 ymm6_4;
mov L0x7fffffffbbea ymm6_5;
mov L0x7fffffffbbec ymm6_6;
mov L0x7fffffffbbee ymm6_7;
mov L0x7fffffffbbf0 ymm6_8;
mov L0x7fffffffbbf2 ymm6_9;
mov L0x7fffffffbbf4 ymm6_a;
mov L0x7fffffffbbf6 ymm6_b;
mov L0x7fffffffbbf8 ymm6_c;
mov L0x7fffffffbbfa ymm6_d;
mov L0x7fffffffbbfc ymm6_e;
mov L0x7fffffffbbfe ymm6_f;
(* vmovdqa %ymm7,0xe0(%rdi)                        #! EA = L0x7fffffffbc00; PC = 0x555555559898 *)
mov L0x7fffffffbc00 ymm7_0;
mov L0x7fffffffbc02 ymm7_1;
mov L0x7fffffffbc04 ymm7_2;
mov L0x7fffffffbc06 ymm7_3;
mov L0x7fffffffbc08 ymm7_4;
mov L0x7fffffffbc0a ymm7_5;
mov L0x7fffffffbc0c ymm7_6;
mov L0x7fffffffbc0e ymm7_7;
mov L0x7fffffffbc10 ymm7_8;
mov L0x7fffffffbc12 ymm7_9;
mov L0x7fffffffbc14 ymm7_a;
mov L0x7fffffffbc16 ymm7_b;
mov L0x7fffffffbc18 ymm7_c;
mov L0x7fffffffbc1a ymm7_d;
mov L0x7fffffffbc1c ymm7_e;
mov L0x7fffffffbc1e ymm7_f;
(* vmovdqa %ymm8,0x180(%rdi)                       #! EA = L0x7fffffffbca0; PC = 0x5555555598a0 *)
mov L0x7fffffffbca0 ymm8_0;
mov L0x7fffffffbca2 ymm8_1;
mov L0x7fffffffbca4 ymm8_2;
mov L0x7fffffffbca6 ymm8_3;
mov L0x7fffffffbca8 ymm8_4;
mov L0x7fffffffbcaa ymm8_5;
mov L0x7fffffffbcac ymm8_6;
mov L0x7fffffffbcae ymm8_7;
mov L0x7fffffffbcb0 ymm8_8;
mov L0x7fffffffbcb2 ymm8_9;
mov L0x7fffffffbcb4 ymm8_a;
mov L0x7fffffffbcb6 ymm8_b;
mov L0x7fffffffbcb8 ymm8_c;
mov L0x7fffffffbcba ymm8_d;
mov L0x7fffffffbcbc ymm8_e;
mov L0x7fffffffbcbe ymm8_f;
(* vmovdqa %ymm9,0x1a0(%rdi)                       #! EA = L0x7fffffffbcc0; PC = 0x5555555598a8 *)
mov L0x7fffffffbcc0 ymm9_0;
mov L0x7fffffffbcc2 ymm9_1;
mov L0x7fffffffbcc4 ymm9_2;
mov L0x7fffffffbcc6 ymm9_3;
mov L0x7fffffffbcc8 ymm9_4;
mov L0x7fffffffbcca ymm9_5;
mov L0x7fffffffbccc ymm9_6;
mov L0x7fffffffbcce ymm9_7;
mov L0x7fffffffbcd0 ymm9_8;
mov L0x7fffffffbcd2 ymm9_9;
mov L0x7fffffffbcd4 ymm9_a;
mov L0x7fffffffbcd6 ymm9_b;
mov L0x7fffffffbcd8 ymm9_c;
mov L0x7fffffffbcda ymm9_d;
mov L0x7fffffffbcdc ymm9_e;
mov L0x7fffffffbcde ymm9_f;
(* vmovdqa %ymm10,0x1c0(%rdi)                      #! EA = L0x7fffffffbce0; PC = 0x5555555598b0 *)
mov L0x7fffffffbce0 ymm10_0;
mov L0x7fffffffbce2 ymm10_1;
mov L0x7fffffffbce4 ymm10_2;
mov L0x7fffffffbce6 ymm10_3;
mov L0x7fffffffbce8 ymm10_4;
mov L0x7fffffffbcea ymm10_5;
mov L0x7fffffffbcec ymm10_6;
mov L0x7fffffffbcee ymm10_7;
mov L0x7fffffffbcf0 ymm10_8;
mov L0x7fffffffbcf2 ymm10_9;
mov L0x7fffffffbcf4 ymm10_a;
mov L0x7fffffffbcf6 ymm10_b;
mov L0x7fffffffbcf8 ymm10_c;
mov L0x7fffffffbcfa ymm10_d;
mov L0x7fffffffbcfc ymm10_e;
mov L0x7fffffffbcfe ymm10_f;
(* vmovdqa %ymm11,0x1e0(%rdi)                      #! EA = L0x7fffffffbd00; PC = 0x5555555598b8 *)
mov L0x7fffffffbd00 ymm11_0;
mov L0x7fffffffbd02 ymm11_1;
mov L0x7fffffffbd04 ymm11_2;
mov L0x7fffffffbd06 ymm11_3;
mov L0x7fffffffbd08 ymm11_4;
mov L0x7fffffffbd0a ymm11_5;
mov L0x7fffffffbd0c ymm11_6;
mov L0x7fffffffbd0e ymm11_7;
mov L0x7fffffffbd10 ymm11_8;
mov L0x7fffffffbd12 ymm11_9;
mov L0x7fffffffbd14 ymm11_a;
mov L0x7fffffffbd16 ymm11_b;
mov L0x7fffffffbd18 ymm11_c;
mov L0x7fffffffbd1a ymm11_d;
mov L0x7fffffffbd1c ymm11_e;
mov L0x7fffffffbd1e ymm11_f;
(* #! <- SP = 0x7fffffff9a78 *)
#! 0x7fffffff9a78 = 0x7fffffff9a78;
(* #retq                                           #! PC = 0x5555555598c0 *)
#retq                                           #! 0x5555555598c0 = 0x5555555598c0;

{
  true
  &&
  true
}

