#!/usr/bin/env python3

# 1. to_zdsl.py --no-main --no-pre --no-post nttmul_poly_ntt.gas > nttmul_poly_ntt_preprocessed.cl
# 2. ./nttmul_poly_ntt.py nttmul_poly_ntt_preprocessed.cl > nttmul_poly_ntt.cl

# q1 = 7681, root1 = 62, 2^(-16)%7681 = 900
# q2 = 10753, root = 10

# Inputs:
# %rdx = 0x55555555f7c0
# L0x555555560700-L0x55555556071e (全都是_16XP = 7681, 16個)
# L0x555555560780-L0x55555556079e (全都是_16XMONT_PINV = -9, 16個)
# L0x5555555607a0-L0x5555555607be (全都是_16XMONT = -3593 = 2^16 mod 7681, 16個)
# L0x555555560800-L0x55555556093e (_ZETAS, 160個)
# L0x555555560940-L0x555555560b3e (_TWIST32, 256個, off=0)
# L0x555555560b40-L0x555555560d3e (_TWIST32, 256個, off=1, note: _TWIST32共有512個)
# L0x555555560d50-L0x555555560dbe (_TWISTS4的第三個開始, 56個)
# L0x7fffffffaee0-L0x7fffffffb0de (input coefficients, 256個)
# L0x7fffffffb4e0-L0x7fffffffb6de (output coefficients, 256個)

import re, math
from argparse import ArgumentParser

ORIGINAL_N = 256
ORIGINAL_P = 8192
P = 7681
PINV = -7679   # p^-1 mod 2^16, -7679 * 7681 = 1 (mod 2^16)
MONT = -3593   # 2^16 mod p, -3593 = 4088 (mod 7681)
MONT_PINV = -9 # (MONT * p^-1) mod 2^16, -9*7681 = -3593 (mod 2^16)
ROOT = 62      # 62**256 = -1 (mod 7681)
# 2^(-16) mod 7681 = 900
_16XP_BASE = 0x555555560700
_16XP_NUM = 16
_16XMONT_PINV_BASE = 0x555555560780
_16XMONT_PINV_NUM = 16
_16XMONT_BASE = 0x5555555607a0
_16XMONT_NUM = 16
_ZETAS_BASE = 0x555555560800
_ZETAS_NUM = 160
_TWIST32_BASE = 0x555555560940
_TWIST32_NUM = 512
_TWISTS4_BASE = 0x555555560d40
_TWISTS4_NUM = 64
INPUT_BASE = 0x7fffffffaee0
INPUT_NUM = 256
ANS_BASE = 0x7fffffffb4e0
ANS_NUM = 256
LEVEL3_ZETA_BASE = [62, 4236, 4600, 5805, 217, 7145, 738, 1115]
LEVEL7_ZETA_BASE = [1, 1213, 7154, 7098, 1366, 2648, 2132, 2446]


# The ranges are obtained from test_range256n
RANGES_7681_4096 = [
  #0

  #1

  #2

  #3
  [8308, 7722, 8770, 9467, 8719, 8999, 8416, 8810, 8787, 8782, 8602, 8690, 8970, 9114, 8472, 9407, 8308, 7722, 8770, 9467, 8719, 8999, 8416, 8810, 8787, 8782, 8602, 8690, 8970, 9114, 8472, 9407, 8479, 8829, 8558, 8516, 7882, 8148, 8230, 8223, 8377, 8366, 8789, 8355, 8010, 8315, 8075, 8236, 8479, 8829, 8558, 8516, 7882, 8148, 8230, 8223, 8377, 8366, 8789, 8355, 8010, 8315, 8075, 8236, 8479, 8295, 8405, 8685, 7984, 8409, 8136, 8657, 8257, 8609, 8708, 8232, 7903, 8470, 8801, 8241, 8479, 8295, 8405, 8685, 7984, 8409, 8136, 8657, 8257, 8609, 8708, 8232, 7903, 8470, 8801, 8241, 8479, 8710, 8588, 8150, 8334, 8651, 7976, 8475, 8353, 7976, 7880, 8783, 8603, 7934, 8214, 8782, 8479, 8710, 8588, 8150, 8334, 8651, 7976, 8475, 8353, 7976, 7880, 8783, 8603, 7934, 8214, 8782, 8479, 8797, 8233, 8384, 8821, 8689, 8703, 8771, 8247, 8041, 8136, 8200, 8083, 8086, 8315, 8630, 8479, 8797, 8233, 8384, 8821, 8689, 8703, 8771, 8247, 8041, 8136, 8200, 8083, 8086, 8315, 8630, 8479, 8383, 8561, 8661, 8458, 8261, 7881, 8140, 8245, 8807, 8500, 7936, 8780, 8293, 8761, 8615, 8479, 8383, 8561, 8661, 8458, 8261, 7881, 8140, 8245, 8807, 8500, 7936, 8780, 8293, 8761, 8615, 8479, 8290, 8412, 8771, 8229, 8685, 8315, 8408, 8588, 8047, 8818, 8454, 8167, 8624, 8097, 8045, 8479, 8290, 8412, 8771, 8229, 8685, 8315, 8408, 8588, 8047, 8818, 8454, 8167, 8624, 8097, 8045, 8479, 8644, 8136, 8743, 8218, 8383, 8603, 8829, 8349, 8150, 8548, 8219, 8334, 7981, 8558, 8661, 8479, 8644, 8136, 8743, 8218, 8383, 8603, 8829, 8349, 8150, 8548, 8219, 8334, 7981, 8558, 8661],
  #4
  [12348, 11762, 12810, 13507, 12759, 13039, 12456, 12850, 12348, 11762, 12810, 13507, 12759, 13039, 12456, 12850, 12629, 12043, 13075, 13788, 13040, 13336, 12721, 13172, 12629, 12043, 13075, 13788, 13040, 13336, 12721, 13172, 12519, 12869, 12598, 12556, 11922, 12188, 12270, 12263, 12519, 12869, 12598, 12556, 11922, 12188, 12270, 12263, 12784, 13134, 12879, 12821, 12171, 12437, 12519, 12512, 12784, 13134, 12879, 12821, 12171, 12437, 12519, 12512, 12519, 12335, 12445, 12725, 12024, 12449, 12176, 12697, 12519, 12335, 12445, 12725, 12024, 12449, 12176, 12697, 12768, 12600, 12726, 12974, 12257, 12714, 12457, 12946, 12768, 12600, 12726, 12974, 12257, 12714, 12457, 12946, 12519, 12750, 12628, 12190, 12374, 12691, 12016, 12515, 12519, 12750, 12628, 12190, 12374, 12691, 12016, 12515, 12784, 12999, 12861, 12471, 12639, 12924, 12265, 12796, 12784, 12999, 12861, 12471, 12639, 12924, 12265, 12796, 12519, 12837, 12273, 12424, 12861, 12729, 12743, 12811, 12519, 12837, 12273, 12424, 12861, 12729, 12743, 12811, 12768, 13086, 12522, 12673, 13110, 12978, 12992, 13076, 12768, 13086, 12522, 12673, 13110, 12978, 12992, 13076, 12519, 12423, 12601, 12701, 12498, 12301, 11921, 12180, 12519, 12423, 12601, 12701, 12498, 12301, 11921, 12180, 12768, 12704, 12866, 12934, 12779, 12550, 12202, 12445, 12768, 12704, 12866, 12934, 12779, 12550, 12202, 12445, 12519, 12330, 12452, 12811, 12269, 12725, 12355, 12448, 12519, 12330, 12452, 12811, 12269, 12725, 12355, 12448, 12784, 12579, 12733, 13076, 12518, 12990, 12604, 12697, 12784, 12579, 12733, 13076, 12518, 12990, 12604, 12697, 12519, 12684, 12176, 12783, 12258, 12423, 12643, 12869, 12519, 12684, 12176, 12783, 12258, 12423, 12643, 12869, 12784, 12933, 12441, 13032, 12523, 12672, 12908, 13134, 12784, 12933, 12441, 13032, 12523, 12672, 12908, 13134],
  #5
  [16787, 16201, 17249, 17946, 16787, 16201, 17249, 17946, 16904, 16334, 17350, 18063, 16904, 16334, 17350, 18063, 17036, 16525, 17482, 18195, 17036, 16525, 17482, 18195, 17165, 16604, 17586, 18324, 17165, 16604, 17586, 18324, 16958, 17308, 17037, 16995, 16958, 17308, 17037, 16995, 17018, 17409, 17138, 17096, 17018, 17409, 17138, 17096, 17191, 17541, 17286, 17228, 17191, 17541, 17286, 17228, 17270, 17645, 17390, 17332, 17270, 17645, 17390, 17332, 16958, 16774, 16884, 17164, 16958, 16774, 16884, 17164, 17018, 16875, 16960, 17281, 17018, 16875, 16960, 17281, 17175, 17007, 17133, 17381, 17175, 17007, 17133, 17381, 17254, 17111, 17237, 17510, 17254, 17111, 17237, 17510, 16958, 17189, 17067, 16629, 16958, 17189, 17067, 16629, 17059, 17306, 17127, 16730, 17059, 17306, 17127, 16730, 17191, 17406, 17268, 16878, 17191, 17406, 17268, 16878, 17295, 17535, 17347, 17007, 17295, 17535, 17347, 17007, 16958, 17276, 16712, 16863, 16958, 17276, 16712, 16863, 17075, 17393, 16829, 16980, 17075, 17393, 16829, 16980, 17175, 17493, 16929, 17080, 17175, 17493, 16929, 17080, 17304, 17622, 17058, 17209, 17304, 17622, 17058, 17209, 16958, 16862, 17040, 17140, 16958, 16862, 17040, 17140, 17059, 16963, 17100, 17216, 17059, 16963, 17100, 17216, 17175, 17111, 17273, 17341, 17175, 17111, 17273, 17341, 17279, 17215, 17352, 17445, 17279, 17215, 17352, 17445, 16958, 16769, 16891, 17250, 16958, 16769, 16891, 17250, 17059, 16886, 16992, 17351, 17059, 16886, 16992, 17351, 17191, 16986, 17140, 17483, 17191, 16986, 17140, 17483, 17295, 17115, 17244, 17587, 17295, 17115, 17244, 17587, 16958, 17123, 16615, 17222, 16958, 17123, 16615, 17222, 17059, 17224, 16732, 17339, 17059, 17224, 16732, 17339, 17191, 17340, 16848, 17439, 17191, 17340, 16848, 17439, 17295, 17444, 16977, 17568, 17295, 17444, 16977, 17568],
  #6
  [8878, 8878, 8878, 8878, 9262, 9355, 9262, 9355, 9075, 9216, 9075, 9216, 9212, 8502, 9212, 8502, 9238, 8338, 9238, 8338, 8563, 8762, 8563, 8762, 8924, 8844, 8924, 8844, 8859, 8724, 8859, 8724, 8878, 8878, 8878, 8878, 9221, 9403, 9221, 9403, 9075, 9249, 9075, 9249, 9206, 8544, 9206, 8544, 9224, 8292, 9224, 8292, 8563, 8767, 8563, 8767, 8924, 8868, 8924, 8868, 8859, 8689, 8859, 8689, 8878, 8878, 8878, 8878, 9221, 9403, 9221, 9403, 9075, 9243, 9075, 9243, 9206, 8513, 9206, 8513, 9224, 8315, 9224, 8315, 8563, 8745, 8563, 8745, 8889, 8845, 8889, 8845, 8844, 8673, 8844, 8673, 8878, 8878, 8878, 8878, 9237, 9378, 9237, 9378, 9075, 9249, 9075, 9249, 9206, 8516, 9206, 8516, 9224, 8292, 9224, 8292, 8563, 8742, 8563, 8742, 8915, 8852, 8915, 8852, 8844, 8667, 8844, 8667, 8878, 8878, 8878, 8878, 9221, 9403, 9221, 9403, 9075, 9249, 9075, 9249, 9206, 8531, 9206, 8531, 9224, 8292, 9224, 8292, 8550, 8756, 8550, 8756, 8889, 8852, 8889, 8852, 8829, 8689, 8829, 8689, 8878, 8878, 8878, 8878, 9221, 9403, 9221, 9403, 9075, 9235, 9075, 9235, 9206, 8514, 9206, 8514, 9224, 8315, 9224, 8315, 8563, 8756, 8563, 8756, 8915, 8845, 8915, 8845, 8844, 8673, 8844, 8673, 8878, 8878, 8878, 8878, 9221, 9409, 9221, 9409, 9075, 9261, 9075, 9261, 9206, 8513, 9206, 8513, 9224, 8315, 9224, 8315, 8563, 8745, 8563, 8745, 8889, 8861, 8889, 8861, 8844, 8684, 8844, 8684, 8878, 8878, 8878, 8878, 9205, 9409, 9205, 9409, 9075, 9261, 9075, 9261, 9181, 8529, 9181, 8529, 9224, 8315, 9224, 8315, 8550, 8756, 8550, 8756, 8889, 8884, 8889, 8884, 8829, 8689, 8829, 8689],
  #7
  [17756, 17756, 13199, 13199, 18617, 18617, 13624, 13624, 18291, 18291, 13437, 13437, 17714, 17714, 13517, 13517, 17576, 17576, 13543, 13543, 17325, 17325, 12884, 12884, 17768, 17768, 13245, 13245, 17583, 17583, 13180, 13180, 17756, 17756, 13199, 13199, 18624, 18624, 13583, 13583, 18324, 18324, 13437, 13437, 17750, 17750, 13511, 13511, 17516, 17516, 13513, 13513, 17330, 17330, 12884, 12884, 17792, 17792, 13245, 13245, 17548, 17548, 13180, 13180, 17756, 17756, 13199, 13199, 18624, 18624, 13583, 13583, 18318, 18318, 13437, 13437, 17719, 17719, 13511, 13511, 17539, 17539, 13513, 13513, 17308, 17308, 12884, 12884, 17734, 17734, 13210, 13210, 17517, 17517, 13149, 13149, 17756, 17756, 13199, 13199, 18615, 18615, 13599, 13599, 18324, 18324, 13437, 13437, 17722, 17722, 13511, 13511, 17516, 17516, 13513, 13513, 17305, 17305, 12884, 12884, 17767, 17767, 13236, 13236, 17511, 17511, 13149, 13149, 17756, 17756, 13199, 13199, 18624, 18624, 13583, 13583, 18324, 18324, 13437, 13437, 17737, 17737, 13511, 13511, 17516, 17516, 13513, 13513, 17306, 17306, 12871, 12871, 17741, 17741, 13210, 13210, 17518, 17518, 13150, 13150, 17756, 17756, 13199, 13199, 18624, 18624, 13583, 13583, 18310, 18310, 13437, 13437, 17720, 17720, 13511, 13511, 17539, 17539, 13513, 13513, 17319, 17319, 12884, 12884, 17760, 17760, 13236, 13236, 17517, 17517, 13149, 13149, 17756, 17756, 13199, 13199, 18630, 18630, 13583, 13583, 18336, 18336, 13437, 13437, 17719, 17719, 13511, 13511, 17539, 17539, 13513, 13513, 17308, 17308, 12884, 12884, 17750, 17750, 13210, 13210, 17528, 17528, 13165, 13165, 17756, 17756, 13199, 13199, 18614, 18614, 13567, 13567, 18336, 18336, 13437, 13437, 17710, 17710, 13486, 13486, 17539, 17539, 13513, 13513, 17306, 17306, 12871, 12871, 17773, 17773, 13210, 13210, 17518, 17518, 13150, 13150]
]

def join_chunks(xs, glue, n, indent=0):
    return [" " * indent + glue.join(xs[i:i + n]) for i in range(0, len(xs), n)]

def num_to_bits (n, w):
    r = []
    for i in range (w):
        r.append (n % 2)
        n //= 2
    return (r)

def bits_to_num (l):
    r = 0
    for i in range (len(l) - 1, -1, -1):
        r = r * 2 + l[i]
    return (r)

def flatten(ll):
    return [i for l in ll for i in l]

def ziplist(l1, l2):
    return list(zip(l1, l2))

def str_main_args ():
    return "\n".join([
        "(* parameters *)\n",
        ",\n".join(join_chunks(["sint16 f{:03d}".format(i) for i in range(INPUT_NUM)], ", ", 4))])

def str_precondition_algebra ():
    return "\n".join([
        "(* algebraic precondition *)\n",
        "true"])

def str_precondition_range ():
    return "\n".join([
        "(* range precondition *)\n",
        "and [",
        format(",\n".join(join_chunks(["(-{0})@16 <s f{1:03d}, f{1:03d} <s {0}@16".format(4096, i) for i in range(INPUT_NUM)], ", ", 4))),
        "]"])

def str_twiddles ():
    _16XP = [ P, P, P, P, P, P, P, P, P, P, P, P, P, P, P, P ]
    _16XMONT_PINV = [
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV,
  MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV, MONT_PINV
        ]
    _16XMONT = [
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT,
  MONT, MONT, MONT, MONT, MONT, MONT, MONT, MONT
        ]
    _ZETAS = [
   28865,  28865,  28865,  28865,  28865,  28865,  28865,  28865,
   28865,  28865,  28865,  28865,  28865,  28865,  28865,  28865,
    3777,   3777,   3777,   3777,   3777,   3777,   3777,   3777,
    3777,   3777,   3777,   3777,   3777,   3777,   3777,   3777,
  -10350, -10350, -10350, -10350, -10350, -10350, -10350, -10350,
  -10350, -10350, -10350, -10350, -10350, -10350, -10350, -10350,
   -3182,  -3182,  -3182,  -3182,  -3182,  -3182,  -3182,  -3182,
   -3182,  -3182,  -3182,  -3182,  -3182,  -3182,  -3182,  -3182,
    4496,   4496,   4496,   4496,   4496,   4496,   4496,   4496,
   -7244,  -7244,  -7244,  -7244,  -7244,  -7244,  -7244,  -7244,
   -3696,  -3696,  -3696,  -3696,  -3696,  -3696,  -3696,  -3696,
   -1100,  -1100,  -1100,  -1100,  -1100,  -1100,  -1100,  -1100,
   16425,  16425,  16425,  16425,  16425,  16425,  16425,  16425,
   16425,  16425,  16425,  16425,  16425,  16425,  16425,  16425,
    3625,   3625,   3625,   3625,   3625,   3625,   3625,   3625,
    3625,   3625,   3625,   3625,   3625,   3625,   3625,   3625,
   14744,  14744,  14744,  14744,  14744,  14744,  14744,  14744,
   -4974,  -4974,  -4974,  -4974,  -4974,  -4974,  -4974,  -4974,
    2456,   2456,   2456,   2456,   2456,   2456,   2456,   2456,
    2194,   2194,   2194,   2194,   2194,   2194,   2194,   2194
        ]
    _TWIST32 = [
      -9,   -529,  32738,  -1851,     -9,  29394,  -7508, -20435,
      -9,  26288,   9855, -19215,     -9,  16006, -12611,   -964,
   -3593,    -17,  -1054,   3781,  -3593,   3794,   2732,  -2515,
   -3593,   1712,   2175,  -3343,  -3593,  -3450,  -2883,   1084,
   16279,  26288,  -8558,  -6297,  11783, -25648,  14351, -25733,
   21066, -23882, -17440,  -7304, -26279,  16791,  22124, -20435,
   -3689,   1712,  -1390,  -1689,      7,  -1072,  -1521,   1403,
    -438,  -2378,  -1056,  -3208,   1881,  -3177,   -404,  -2515,
    2816, -22039,   9855,  21168, -19394,  30255, -27132,  17013,
   23489, -18506,   1869,  10145,  -3114,   9650, -15358, -24232,
    2816,  -2071,   2175,  -3408,  -1986,  -2001,   3588,  -1931,
   -1599,   2998,   3405,   1441,   2006,    434,      2,  -3752,
    1724, -24214,   6032, -19215, -21467,  29453, -16655,  32124,
    4505,  13686, -25946, -12790, -23668, -31518,  14351,  12449,
    3772,   3434,  -2160,  -3343,    549,  -1779,   -783,   1404,
    -103,   2422,   3750,  -1526,   2956,    226,  -1521,   3745,
  -11655,  -1715,  24743,  26766,  23754,  22943,  -2722,   4880,
   18242,  26621, -32329, -10333, -22593, -16715,  30426,   2858,
     121,   -179,  -3417,   3214,   2250,  -1121,  -1698,  -3312,
     834,   3581,  -3145,  -3677,   2495,  -2891,    730,  -2262,
   21066,  -4624, -24573, -16186,  29667, -30597,  23225,  10333,
  -15998,   6510,  -3558,  17491,  11792,  30255,  -4693,  21723,
    -438,   3568,  -1533,  -2874,   3555,  -3461,   2233,   3677,
    -638,   -658,   -486,   -429,   3600,  -2001,  -2133,   -293,
  -20469, -23882,  26663,  14718,  -9488, -16885, -26220,  17636,
  -19351, -17082,   2722,   2807,  10972,  -5990,  29871,  -5299,
   -1525,  -2378,  -1497,   -642,  -1296,   2059,  -3692,   -796,
     617,  -3770,   1698,   -777,  -3364,  -2918,  -2385,  -3763,
   -4983,  18745, -17440, -32695,  -4505, -12261, -32252,  23933,
    2073, -30938,  30136,  16083, -21467, -32414,  -8908,   -947,
   -1399,  -2247,  -1056,   3657,    103,  -1509,  -1532,    893,
   -2535,  -1242,   1464,  -1837,    549,   -670,  -2764,    589,
      -9,  -1851,  -8558, -22039,     -9,   4573, -26441,  16791,
      -9,  -6297,   6032,  -4624,     -9,  -9513,   9360,  16006,
   -3593,   3781,  -1390,  -2071,  -3593,  -2083,   2743,  -3177,
   -3593,  -1689,  -2160,   3568,  -3593,   3287,   1168,  -3450,
    1724, -19215,  24743,  -4624, -21766,   1007, -15358, -25648,
   -4983,  -7304, -16092, -13711,  21399,   4573, -12611,  29394,
    3772,  -3343,  -3417,   3568,  -2310,   1519,      2,  -1072,
   -1399,  -3208,  -1756,   2161,   1431,  -2083,  -2883,   3794,
  -20469,  14718, -17440,  16638, -15307,  12449,  12269, -22764,
  -26382,  -5452, -25946, -11996,   5759,   -964, -26441,   9087,
   -1525,   -642,  -1056,   1278,  -1483,   3745,  -2579,   -236,
   -2830,    692,   3750,   2340,  -1921,   1084,   2743,   1407,
    5930, -23933, -16092, -18506,  11792, -28805, -27132,  -5990,
   -5913,  27243, -13933,   6510, -26279,  -6766,  -7508,  16791,
     810,   -893,  -1756,   2998,   3600,  -1669,   3588,  -2918,
   -1305,  -2965,    915,   -658,   1881,    402,   2732,  -3177,
  -18191, -15221, -26262,   2739,   -828, -15145,  -8908,  -9633,
   20315, -15111, -10478,    802, -20870,  -4565,  22124,  26783,
   -2319,   3723,   1386,   1203,  -2876,  -2345,  -2764,   -929,
   -1701,  -3335,  -3310,   -222,  -1414,  -2005,   -404,   2719,
    4505,  -5452,  -3456, -28958, -14121,  32124,  17602,   2526,
    2073,  22790, -24052,   9633, -21766, -20435,  21868,   3524,
    -103,    692,  -3456,   2786,  -1321,   1404,    194,   3550,
   -2535,   3334,   2572,    929,  -2310,  -2515,   -660,   1476,
    7491, -12790, -22875,  16885,  22568,  27858,  10478,  20119,
   31177,   5299, -21860, -10495,  -3114,   1007,   8472,   9650,
   -2237,  -1526,   -859,  -2059,   2088,   2258,   3310,    151,
    1993,   3763,  -3428,  -2815,   2006,   1519,  -3816,    434,
   -5913,  27636, -32329,  -2952,  29667,  23984, -10409,   8831,
  -11792,  14138,  13541,  31518,  11783,  30844, -15358, -19274,
   -1305,   1012,  -3145,   1144,   3555,   -592,   2391,   1151,
   -3600,    826,   2789,   -226,      7,    124,      2,   2230
        ]
    _TWISTS4 = [
      -9, -16425, -28865,  10350,  -3593,  -3625,  -3777,   3182,
      -9, -10350,  28865,  16425,  -3593,  -3182,   3777,   3625,
      -9,   4496, -10350,  14744,  -3593,  -3696,  -3182,   2456,
      -9,   4974, -16425,   7244,  -3593,  -2194,  -3625,   1100,
      -9, -11655,   4496, -18191,  -3593,    121,  -3696,  -2319,
      -9, -22593,   7244, -20315,  -3593,   2495,   1100,   1701,
      -9, -18191,  14744, -23754,  -3593,  -2319,   2456,  -2250,
      -9, -20870,   4974, -22593,  -3593,  -1414,  -2194,   2495
        ]
    twiddles = [
        ("_16XP", _16XP, _16XP_BASE),
        ("_16XMONT", _16XMONT, _16XMONT_BASE),
        ("_16XMONT_PINV", _16XMONT_PINV, _16XMONT_PINV_BASE),
        ("_16XMONT", _16XMONT, _16XMONT_BASE),
        ("_ZETAS", _ZETAS, _ZETAS_BASE),
        ("_TWIST32", _TWIST32, _TWIST32_BASE),
        ("_TWISTS4", _TWISTS4, _TWISTS4_BASE)
        ]
    res = []
    for (name, arr, base) in twiddles:
        res.append("\n(* {} *)\n".format(name))
        res.append("\n".join(join_chunks(["mov L0x{:x} ({:4d})@sint16;".format(base + 2*i, arr[i]) for i in range (len(arr))], " ", 4)))
    return "\n".join(res)

def ntt_mod(num_ans, prime, mont, root, negacyclic, stage):
    num_rings = 2**stage
    num_coeffs = num_ans // num_rings
    n_expn = int(math.log(num_ans, 2))
    num_bits = n_expn + 1 if negacyclic else n_expn
    res = []
    for i in range (num_rings):
        if negacyclic:
            l = num_to_bits(i, stage)
            l.reverse()
            l.insert(0, 1)
            l = [0 for i in range(num_bits - stage - 1)] + l
        else:
            l = num_to_bits(i, num_bits)
            l.reverse()
        e = bits_to_num(l)
        modulo = (root**e) % prime
        modulo_mont = (modulo * mont) % prime
        modulo = modulo - prime if modulo > prime / 2 else modulo
        modulo_mont = modulo_mont - prime if modulo_mont > prime / 2 else modulo_mont
        res.append(dict(modulo = modulo, mont = modulo_mont))
    return res

def str_inits ():
    return "\n".join([
        "(* inits *)\n",
        "\n".join(join_chunks(["mov L0x{:x} f{:03d};".format(INPUT_BASE + 2 * i, i) for i in range(INPUT_NUM)], " ", 4))])

def str_init_poly_var(poly_var):
    return ("ghost {}@sint16 : true && true;").format(poly_var)

def str_init_poly (poly, poly_var, prefix, num):
    return "\n".join([
        "(* {} *)\n".format(poly),
        "ghost {}@bit :".format(poly),
        "{0} * {0} =".format(poly),
        "{} && true;".format(" +\n".join(join_chunks(["{0}{1:03d}*({2}**{1})".format (prefix, i, poly_var) for i in range(num)], " + ", 4)))])

def str_level0_fined_range_condition (base, addr_off, ranges, num_ans):
    return ",\n".join(join_chunks(["(-({0}))@16 <s L0x{1:x}, L0x{1:x} <s ({0})@16".format(ranges[i], base + addr_off * i) for i in range(num_ans)], ", ", 2))

def str_levels1t7_fined_range_condition (ymms, ranges, ymms_off, ymms_count, left_rel, right_rel):
    def range_ymm(rs, ymm):
        return ",\n".join(join_chunks(["(-({0}))@16 {3} ymm{1}_{2:1x}, ymm{1}_{2:1x} {4} ({0})@16".format(rs[i], ymm, i + ymms_off, left_rel, right_rel) for i in range(ymms_count)], ", ", 2))
    return ",\n".join([range_ymm(rs, ymm) for rs, ymm in zip(ranges, ymms)])

def str_range_condition(args, left_rel, right_rel):
    return "  " + ",\n  ".join(join_chunks(["(-({1}))@16 {2} {0}, {0} {3} ({1})@16".format(ymm, r, left_rel, right_rel) for (ymm, r) in args], ", ", 2))

def make_ymms(ymms, off, num):
    return ["ymm{}_{:x}".format(ymm, off + i) for ymm in ymms for i in range(num)]

def make_eqmod(poly_name, ymms, coefs, mods):
    return "\n".join([
        "eqmod",
        "  ({0} * {0})".format(poly_name),
        "  (",
        " +\n".join(join_chunks(["{0}*({1}**{2})".format(ymms[i], coefs[i], i) for i in range(len(ymms))], " + ", 4, indent=4)),
        "  )",
        "  [{}]".format(", ".join(mods))
    ])

def str_ghost(typed_vars, easserts, rasserts):
    return "\n".join([
             "ghost {} :".format(", ".join(["{0}@{1}".format(var, typ) for (var, typ) in typed_vars])),
             "and [",
             "  {}".format("true" if len(easserts) == 0 else ",\n  ".join(easserts)),
             "] && and [",
             "  {}".format("true" if len(rasserts) == 0 else ",\n  ".join(rasserts)),
             "];"
           ])

def str_twist1(poly_name, args, expn):
    res = "\n".join([
        "\n(* ecut {0} *)\n".format(ecut_id),
        "ecut and [",
        ",\n".join([make_eqmod(poly_name, ymms, ["({0} * {1})".format(zeta_name, y_name) for i in range(expn)],
                               [str(P), "x0 - {0} * {1}".format(zeta_name, y_name), "{0}**{1} - 1".format(y_name, expn)]) for (zeta, zeta_name, y_name, ymms) in args]),
        "];"
    ])
    return res

def str_twist2(poly_name, args, expn):
    res = "\n".join([
        "\n(* ecut {0} *)\n".format(ecut_id),
        "ecut and [",
        ",\n".join([make_eqmod(poly_name, ymms, ["({0} * {1})".format(zeta2_name, y2_name) for i in range(expn)],
                               [str(P), "x0 - {0} * {1}".format(zeta1_name, y1_name),
                                "{0} - {1} * {2}".format(y1_name, zeta2_name, y2_name), "{0}**{1} - 1".format(y2_name, expn)]) for (zeta, zeta1_name, y1_name, zeta2_name, y2_name, ymms) in args]),
        "];"
    ])
    return res

def str_level0to2_algebra(poly_name, args, expn):
    return ",\n".join([
        make_eqmod(poly_name, ymms, ["x0"] * len(ymms), [str(P), "x0**{1} - ({0})".format(m, expn)]) for (ymms, m) in args
    ])

def str_level3to5_algebra(poly_name, args, expn):
    return ",\n".join([
        make_eqmod(poly_name, ymms, [y_name] * len(ymms), [str(P), "x0 - {0} * {1}".format(zeta_name, y_name), "{0}**{2} - ({1})".format(y_name, m, expn)]) for (zeta_name, y_name, ymms, m) in args
    ])

def str_level6to7_algebra(poly_name, args, expn):
    return ",\n".join([
        make_eqmod(poly_name, ymms, [y2_name] * len(ymms), [ str(P),
                                                            "x0 - {0} * {1}".format(zeta1_name, y1_name),
                                                            "{0} - {1} * {2}".format(y1_name, zeta2_name, y2_name),
                                                            "{0}**{2} - ({1})".format(y2_name, m, expn)]) for (zeta1_name, y1_name, zeta2_name, y2_name, ymms, m) in args
    ])

def get_ntt_mod_level0to2(stage, i):
    return ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=stage)[i]["modulo"]

def get_ntt_mod_level3to7(i):
    if i < 2:
        return 1 if i % 2 == 0 else -1
    else:
        s = 0
        j = 0
        n = int(math.log(ORIGINAL_N, 2))
        for k in range(2, n + 1):
            if i < math.pow(2, k):
                s = k - 1
                break
        j = i % pow(2, s)
        return ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=s)[j]["modulo"]
    return 0

def str_assertions(pairs):
    equalities = []
    for (ymm1, ymm2) in pairs:
        for i in range(0, 16):
            equalities.append("mulLymm{0}_{2:x} = mulLymm{1}_{2:x}".format(ymm1, ymm2, i))
    return "assert true && and [\n{0}\n];\nassume and [\n{0}\n] && true;".format(",\n".join(join_chunks(equalities, ", ", 2)))

level = 0
off = 0
ecut_id = 0
rcut_id = 0
level5_ecut_ids = [[], []]
level6_ecut_ids = [[], []]
level7_summary_ecut_ids = []

def print_comment(str):
    print("(* {} *)".format(str))

def print_instr(instr):
    global level, off, ecut_id, rcut_id

    # ==================== Level 0 ====================
    if instr.startswith("(* vmovdqa 0x100(%rsi),%ymm8") and level == 0:
        print_comment("===== Start of level 0 =====")
    elif instr.startswith("(* vpaddw %ymm8,%ymm4,%ymm3") and level == 0:
        print(str_assertions([(8, 12), (9, 13), (10, 14), (11, 15)]))

    # ==================== Level 1 ====================
    elif instr.startswith("(* vmovdqa 0x140(%rdx),%ymm15") and level == 0:
        print_comment("===== End of level 0 =====")
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print("and [")
        print(str_level0to2_algebra(
            poly_name="inp_poly",
            args=[(["L0x{:x}".format(ANS_BASE + (k + i*128)*2) for k in range(128)], get_ntt_mod_level0to2(level+1, i)) for i in range(2)],
            expn=128))
        print("] && and [")
        print(str_range_condition(
            args=[("L0x{:x}".format(ANS_BASE + i*2), RANGES_7681_4096[level][i]) for i in range(256)],
            left_rel="<s",
            right_rel="<s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        print_comment("===== Start of level 1, off {} =====".format(off))
        level = level + 1
    elif instr.startswith("(* vpaddw %ymm8,%ymm4,%ymm3") and level == 1:
        print(str_assertions([(8, 12), (9, 13), (10, 14), (11, 15)]))

    # ==================== Level 2 ====================
    elif instr.startswith("(* vperm2i128 $0x20,%ymm10,%ymm5,%ymm7") and level == 1:
        print_comment("===== End of level 1, off {} =====".format(off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print("and [")
        print(str_level0to2_algebra(
            poly_name="inp_poly",
            args=[(make_ymms([[3, 4, 5, 6], [8, 9, 10, 11]][i], 0, 16), get_ntt_mod_level0to2(level+1, i+off*2)) for i in range(2)],
            expn=64))
        print ("] && and [")
        print(str_range_condition(
            args=ziplist(make_ymms([3, 4, 5, 6, 8, 9, 10, 11], 0, 16), RANGES_7681_4096[level][(off*128):(off*128+128)]),
            left_rel="<s",
            right_rel="<s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        print_comment("===== Start of level 2, off {} =====".format(off))
        level = level + 1
    elif instr.startswith("(* vpaddw %ymm7,%ymm6,%ymm4") and level == 2:
        print(str_assertions([(7, 12), (10, 13), (5, 14), (11, 15)]))

    # ==================== Level 3 ====================
    elif instr.startswith("(* vpunpcklqdq %ymm7,%ymm4,%ymm9") and level == 2:
        print_comment("===== End of level 2, off {} =====".format(off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print ("cut")
        print ("and [")
        print(str_level0to2_algebra(
            poly_name="inp_poly",
            args=[(make_ymms([[4, 6, 8, 3], [7, 10, 5, 11]][i%2], (i//2)*8, 8), get_ntt_mod_level0to2(level+1, i+off*4)) for i in range(4)],
            expn=32))
        print ("] && and [")
        print(str_range_condition(
            args=ziplist(flatten(make_ymms([[4, 6, 8, 3], [7, 10, 5, 11]][i%2], (i//2)*8, 8) for i in range(4)), RANGES_7681_4096[level][(off*128):(off*128+128)]),
            left_rel="<s",
            right_rel="<s"))
        print("];\n")
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        print(str_ghost(
            [("y_0_{}".format(i+off*4), "sint16") for i in range(4)] + [("zeta_0_{}".format(i+off*4), "sint16") for i in range(4)],
            ["zeta_0_{0} = {1}".format(i+off*4, LEVEL3_ZETA_BASE[i+off*4]) for i in range(4)],
            []))
        print(str_twist1(
            "inp_poly",
            [(LEVEL3_ZETA_BASE[i+off*4], "zeta_0_{}".format(i+off*4), "y_0_{}".format(i+off*4), make_ymms([[4, 6, 8, 3], [7, 10, 5, 11]][i%2], (i//2)*8, 8)) for i in range(4)],
            32))
        ecut_id = ecut_id + 1
        print()
        print_comment("===== Start of level 3, off {} =====".format(off))
        level = level + 1
    elif (instr.startswith("(* vpmullw 0x340(%rdx),%ymm6,%ymm12") or instr.startswith("(* vpmullw 0x540(%rdx),%ymm6,%ymm12")) and level == 3:
        print(str_assertions([(9, 12), (7, 13), (4, 14), (10, 15)]))
    elif instr.startswith("(* vpaddw %ymm6,%ymm9,%ymm3") and level == 3:
        print(str_assertions([(6, 12), (5, 13), (8, 14), (11, 15)]))

    # ==================== Level 4 ====================
    elif instr.startswith("(* vmovdqa 0x80(%rdx),%ymm14") and level == 3:
        print_comment("===== End of level 3, off {} =====".format(off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print("and [")
        print(str_level3to5_algebra(
            poly_name="inp_poly",
            args=[("zeta_0_{}".format(i//2+4*off), "y_0_{}".format((i//2)+4*off),
                       make_ymms([[3, 9, 7, 4], [6, 5, 8, 11]][i%2], (i//2)*4, 4), 1 if i % 2 == 0 else -1) for i in range(8)],
            expn=16))
        print("] prove with [all ghosts] && and [")
        # Failed
        print(str_range_condition(
            args=ziplist(flatten(make_ymms([[3, 9, 7, 4], [6, 5, 8, 11]][i%2], (i//2)*4, 4) for i in range(8)), RANGES_7681_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];")
        print()
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        print_comment("===== Start of level 4, off {} =====".format(off))
        level = level + 1
    elif instr.startswith("(* vpsubw %ymm13,%ymm7,%ymm7") and level == 4:
        print(str_assertions([(7, 13)]))
    elif instr.startswith("(* vpsubw %ymm13,%ymm4,%ymm4") and level == 4:
        print(str_assertions([(4, 13)]))
    elif instr.startswith("(* vpaddw %ymm8,%ymm6,%ymm9") and level == 4:
        print(str_assertions([(8, 12), (11, 13)]))

    # ==================== Level 5 ====================
    elif instr.startswith("(* vpmullw %ymm14,%ymm3,%ymm13") and level == 4:
        print_comment("===== End of level 4, off {} =====".format(off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print("and [")
        print(str_level3to5_algebra(
            poly_name="inp_poly",
            args=[("zeta_0_{}".format((i//4)+4*off), "y_0_{}".format((i//4)+4*off),
                  make_ymms([[10, 3], [7, 4], [9, 6], [8, 11]][i%4], (i//4)*4, 4), get_ntt_mod_level3to7(i%4)) for i in range(16)],
            expn=8))
        # [
        #     ("zeta_0_0", "y_0_0", make_ymms([10, 3], 0, 4), 1),
        #     ("zeta_0_0", "y_0_0", make_ymms([7, 4], 0, 4), -1),
        #     ("zeta_0_0", "y_0_0", make_ymms([9, 6], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[0]["modulo"]),
        #     ("zeta_0_0", "y_0_0", make_ymms([8, 11], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[1]["modulo"]),
        #     ("zeta_0_1", "y_0_1", make_ymms([10, 3], 4, 4), 1),
        #     ("zeta_0_1", "y_0_1", make_ymms([7, 4], 4, 4), -1),
        #     ("zeta_0_1", "y_0_1", make_ymms([9, 6], 4, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[0]["modulo"]),
        #     ("zeta_0_1", "y_0_1", make_ymms([8, 11], 4, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[1]["modulo"]),
        #     ("zeta_0_2", "y_0_2", make_ymms([10, 3], 8, 4), 1),
        #     ("zeta_0_2", "y_0_2", make_ymms([7, 4], 8, 4), -1),
        #     ("zeta_0_2", "y_0_2", make_ymms([9, 6], 8, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[0]["modulo"]),
        #     ("zeta_0_2", "y_0_2", make_ymms([8, 11], 8, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[1]["modulo"]),
        #     ("zeta_0_3", "y_0_3", make_ymms([10, 3], 12, 4), 1),
        #     ("zeta_0_3", "y_0_3", make_ymms([7, 4], 12, 4), -1),
        #     ("zeta_0_3", "y_0_3", make_ymms([9, 6], 12, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[0]["modulo"]),
        #     ("zeta_0_3", "y_0_3", make_ymms([8, 11], 12, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[1]["modulo"])
        # ]
        print("] && and [")
        # Failed
        print(str_range_condition(
            args=ziplist(flatten([make_ymms([[10, 3], [7, 4], [9, 6], [8, 11]][i%4], (i//4)*4, 4) for i in range(16)]), RANGES_7681_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];")
        print()
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        print_comment("===== Start of level 5, off {} =====".format(off))
        level = level + 1
    elif instr.startswith("(* vpsubw %ymm13,%ymm3,%ymm3") and level == 5:
        print(str_assertions([(3, 13)]))
    elif instr.startswith("(* vpaddw %ymm4,%ymm7,%ymm10") and level == 5:
        print(str_assertions([(4, 12), (6, 13), (11, 14)]))

    # ==================== Level 6 ====================
    elif instr.startswith("(* vpmullw 0x80(%rdx),%ymm5,%ymm12") and level == 5:
        # End of level 5 (Verified: algebra)
        print_comment("===== End of level 5, off {} =====".format(off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print("and [")
        print(str_level3to5_algebra(
            poly_name="inp_poly",
            args=[("zeta_0_{}".format((i//8)+4*off), "y_0_{}".format((i//8)+4*off),
                  make_ymms([[5], [3], [10], [4], [7], [6], [9], [11]][i%8], (i//8)*4, 4), get_ntt_mod_level3to7(i%8)) for i in range(32)],
            expn=4))
        # [
        #     ("zeta_0_0", "y_0_0", make_ymms([5], 0, 4), 1),
        #     ("zeta_0_0", "y_0_0", make_ymms([3], 0, 4), -1),
        #     ("zeta_0_0", "y_0_0", make_ymms([10], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[0]["modulo"]),
        #     ("zeta_0_0", "y_0_0", make_ymms([4], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=1)[1]["modulo"]),
        #     ("zeta_0_0", "y_0_0", make_ymms([7], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=2)[0]["modulo"]),
        #     ("zeta_0_0", "y_0_0", make_ymms([6], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=2)[1]["modulo"]),
        #     ("zeta_0_0", "y_0_0", make_ymms([9], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=2)[2]["modulo"]),
        #     ("zeta_0_0", "y_0_0", make_ymms([11], 0, 4), ntt_mod(num_ans=ANS_NUM, prime=P, mont=MONT, root=ROOT, negacyclic=True, stage=2)[3]["modulo"]),
        #     ...
        # ]
        print("] && and [")
        # Failed
        print(str_range_condition(
            args=ziplist(flatten([make_ymms([[5], [3], [10], [4], [7], [6], [9], [11]][i%8], (i//8)*4, 4) for i in range(32)]), RANGES_7681_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];")
        print()
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        print(str_ghost(
            [("y_1_{}".format(i+off*32), "sint16") for i in range(32)] + [("zeta_1_{}".format(i+off*32), "sint16") for i in range(32)],
            ["zeta_1_{0} = {1}".format(i+off*32, LEVEL7_ZETA_BASE[i%8]) for i in range(32)],
            []))
        print(str_twist2(
            "inp_poly",
            [(LEVEL7_ZETA_BASE[i%8], "zeta_0_{0}".format(i//8+off*4), "y_0_{0}".format(i//8+off*4), "zeta_1_{0}".format(i+off*32), "y_1_{}".format(i+off*32),
                  make_ymms([[5], [3], [10], [4], [7], [6], [9], [11]][i%8], (i//8)*4, 4)) for i in range(32)],
            4))
        print()
        ecut_id = ecut_id + 1
        print_comment("===== Start of level 6, off {} =====".format(off))
        level = level + 1
    elif instr.startswith("(* vpsubw %ymm12,%ymm5,%ymm5") and level == 6:
        print(str_assertions([(5, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm3,%ymm3") and level == 6:
        print(str_assertions([(3, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm10,%ymm10") and level == 6:
        print(str_assertions([(10, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm4,%ymm4") and level == 6:
        print(str_assertions([(4, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm7,%ymm7") and level == 6:
        print(str_assertions([(7, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm6,%ymm6") and level == 6:
        print(str_assertions([(6, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm9,%ymm9") and level == 6:
        print(str_assertions([(9, 12)]))
    elif instr.startswith("(* vpsubw %ymm12,%ymm11,%ymm11") and level == 6:
        print(str_assertions([(11, 12)]))

    # ==================== Level 7 ====================
    elif instr.startswith("(* vpmullw %ymm1,%ymm9,%ymm12") and level == 6:
        # End of level 6
        print_comment("===== End of level 6, off {} =====".format(off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        print("and [")
        print(str_level6to7_algebra(
            poly_name="inp_poly",
            args=[("zeta_0_{}".format(i//16+4*off), "y_0_{}".format(i//16+4*off), "zeta_1_{}".format(i//2+32*off), "y_1_{}".format(i//2+32*off),
                   make_ymms([[6, 4], [8, 9], [3, 7], [5, 11]][i%4], i//4, 1), 1 if i % 2 == 0 else -1) for i in range(64)],
            expn=2))
        print("] prove with [all ghosts] && and [")
        print("  true")
        print("];")
        print()
        level6_ecut_id = ecut_id
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        # Split the cut at the end of level 6
        for i in range(64):
            print("\n(* ecut {0} *)\n".format(ecut_id))
            print("ecut")
            print(str_level6to7_algebra(
                poly_name="inp_poly",
                args=[("zeta_0_{}".format(i//16+4*off), "y_0_{}".format(i//16+4*off), "zeta_1_{}".format(i//2+32*off), "y_1_{}".format(i//2+32*off),
                           make_ymms([[6, 4], [8, 9], [3, 7], [5, 11]][i%4], i//4, 1), 1 if i % 2 == 0 else -1)],
                           expn=2
                ))
            print("prove with [cuts [{0}]];".format(level6_ecut_id))
            print()
            level6_ecut_ids[off].append(str(ecut_id))
            ecut_id = ecut_id + 1
        print_comment("===== Start of level 7, off {} =====".format(off))
        level = level + 1
    elif instr.startswith("(* vpaddw %ymm9,%ymm8,%ymm3") and level == 7:
        print(str_assertions([(9, 12), (11, 13)]))   # Verified
    elif instr.startswith("(* vmovdqa %ymm10,(%rdi)") and level == 7:
        print_comment("===== Store results of levels1t7, off {} =====".format(off))

    # ==================== End of level 7, off = 0 ====================
    elif instr.startswith("(* vmovdqa 0x1c0(%rdx),%ymm15") or instr.startswith("(* #! <- SP = 0x7fffffffa038 *)"):
        print_comment("End of level 7, off {}".format(off))
        print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
        print("cut")
        for i in range(128):
            print(str_level6to7_algebra(
                poly_name="inp_poly",
                args=[("zeta_0_{}".format(i//32+4*off), "y_0_{}".format(i//32+4*off), "zeta_1_{}".format(i//4+32*off), "y_1_{}".format(i//4+32*off),
                      ["L0x{:x}".format(ANS_BASE + 2*(i%8*16 + i//8 + off*128))], get_ntt_mod_level3to7(i%4))],
                expn=1))
            print("prove with [all ghosts, cuts [{0}]]".format(level6_ecut_ids[off][i//2]), end='')
            if i < 127: print(",")
        print("&& and [")
        print(str_range_condition(
            args=ziplist(["L0x{:x}".format(ANS_BASE + 2*(i%8*16 + i//8 + off*128)) for i in range(128)], RANGES_7681_4096[level][(off*128):(off*128+128)]),
            left_rel="<=s",
            right_rel="<=s"))
        print("];")
        print()
        level7_summary_ecut_ids.append(str(ecut_id))
        ecut_id = ecut_id + 1
        rcut_id = rcut_id + 1
        # Print the high part of cut 0
        if off == 0:
            print("\n(* ecut {0}, rcut {1} *)\n".format(ecut_id, rcut_id))
            print("cut")
            print("and [")
            print(str_level0to2_algebra(
                poly_name="inp_poly",
                args=[(["L0x{:x}".format(ANS_BASE + (k + i*128)*2) for k in range(128)], get_ntt_mod_level0to2(1, i)) for i in range(1, 2)], expn=128))
            print ("] prove with [ cuts [ 0 ] ] && and [")
            print(str_range_condition(
                args=[("L0x{:x}".format(ANS_BASE + (i+128)*2), RANGES_7681_4096[0][i+128]) for i in range(128)],
                left_rel="<s",
                right_rel="<s"))
            print("] prove with [ cuts [ 0 ] ];\n")
            ecut_id = ecut_id + 1
            rcut_id = rcut_id + 1
            off = 1
            level = 1
            print_comment("Start of level 1, off {}".format(off))
        # Start of level 1, off = 1
    print(instr)

def str_post():
    return "\n".join([
        "{",
        "and [",
        str_level6to7_algebra(
            poly_name="inp_poly",
            args=[("zeta_0_{}".format(i//32+4*off), "y_0_{}".format(i//32+4*off), "zeta_1_{}".format(i//4+32*off), "y_1_{}".format(i//4+32*off),
                  ["L0x{:x}".format(ANS_BASE + 2*(i%8*16 + i//8 + off*128))], get_ntt_mod_level3to7(i%4)) for i in range(128) for off in range(1)],
            expn=1
        ),
        "] prove with [cuts [{0}]] && and [".format(", ".join(level7_summary_ecut_ids)),
        "  true",
        "]",
        "}"
    ])

def main():
    parser = ArgumentParser()
    parser.add_argument("cl_file", help="the nttmul_poly_ntt cl file to be processed")
    args = parser.parse_args()
    with open(args.cl_file) as f:
        # ========== proc main ==========
        print('proc main(\n')
        print(str_main_args())
        print('\n) =\n')
        # ========== pre-condition ==========
        print('{\n')
        print(str_precondition_algebra())
        print("\n&&\n")
        print(str_precondition_range())
        print('\n}\n')
        # ========== inits ==========
        print(str_inits())
        print(str_twiddles())
        print()
        print(str_init_poly_var('x0'))
        print(str_init_poly(poly='inp_poly', poly_var='x0', prefix='f', num=INPUT_NUM))
        # ========== program ==========
        print("\n\n#===== program start =====\n\n")
        for line in f.readlines():
            print_instr(line.strip())
        # ========== post-condition ==========
        print(str_post())


if __name__ == "__main__":
  main()
